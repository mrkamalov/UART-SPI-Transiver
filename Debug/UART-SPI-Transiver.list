
UART-SPI-Transiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cf8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08006e88  08006e88  00016e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f8c  08006f8c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006f8c  08006f8c  00016f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f94  08006f94  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f94  08006f94  00016f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f98  08006f98  00016f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006f9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00004a70  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004a84  20004a84  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016066  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000323a  00000000  00000000  000360aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001138  00000000  00000000  000392e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001010  00000000  00000000  0003a420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003aed  00000000  00000000  0003b430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013c06  00000000  00000000  0003ef1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce479  00000000  00000000  00052b23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00120f9c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000046bc  00000000  00000000  00120fec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006e70 	.word	0x08006e70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08006e70 	.word	0x08006e70

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fc7a 	bl	8000dd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f85a 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f93e 	bl	8000760 <MX_GPIO_Init>
  MX_IWDG_Init();
 80004e4:	f000 f8c0 	bl	8000668 <MX_IWDG_Init>
  MX_SPI2_Init();
 80004e8:	f000 f8d8 	bl	800069c <MX_SPI2_Init>
  MX_UART4_Init();
 80004ec:	f000 f90e 	bl	800070c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  __HAL_DBGMCU_FREEZE_IWDG();
 80004f0:	4b19      	ldr	r3, [pc, #100]	; (8000558 <main+0x84>)
 80004f2:	689b      	ldr	r3, [r3, #8]
 80004f4:	4a18      	ldr	r2, [pc, #96]	; (8000558 <main+0x84>)
 80004f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004fa:	6093      	str	r3, [r2, #8]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004fc:	f003 f90a 	bl	8003714 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of uartSendSem */
  uartSendSemHandle = osSemaphoreNew(1, 1, &uartSendSem_attributes);
 8000500:	4a16      	ldr	r2, [pc, #88]	; (800055c <main+0x88>)
 8000502:	2101      	movs	r1, #1
 8000504:	2001      	movs	r0, #1
 8000506:	f003 f9e1 	bl	80038cc <osSemaphoreNew>
 800050a:	4603      	mov	r3, r0
 800050c:	4a14      	ldr	r2, [pc, #80]	; (8000560 <main+0x8c>)
 800050e:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of uartSendQueue */
  uartSendQueueHandle = osMessageQueueNew (10, sizeof(uint16_t), &uartSendQueue_attributes);
 8000510:	4a14      	ldr	r2, [pc, #80]	; (8000564 <main+0x90>)
 8000512:	2102      	movs	r1, #2
 8000514:	200a      	movs	r0, #10
 8000516:	f003 faf9 	bl	8003b0c <osMessageQueueNew>
 800051a:	4603      	mov	r3, r0
 800051c:	4a12      	ldr	r2, [pc, #72]	; (8000568 <main+0x94>)
 800051e:	6013      	str	r3, [r2, #0]

  /* creation of spiSendQueue */
  spiSendQueueHandle = osMessageQueueNew (10, sizeof(uint16_t), &spiSendQueue_attributes);
 8000520:	4a12      	ldr	r2, [pc, #72]	; (800056c <main+0x98>)
 8000522:	2102      	movs	r1, #2
 8000524:	200a      	movs	r0, #10
 8000526:	f003 faf1 	bl	8003b0c <osMessageQueueNew>
 800052a:	4603      	mov	r3, r0
 800052c:	4a10      	ldr	r2, [pc, #64]	; (8000570 <main+0x9c>)
 800052e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of uartTransiver */
  uartTransiverHandle = osThreadNew(uartTransiverTask, (void*) &huart4, &uartTransiver_attributes);
 8000530:	4a10      	ldr	r2, [pc, #64]	; (8000574 <main+0xa0>)
 8000532:	4911      	ldr	r1, [pc, #68]	; (8000578 <main+0xa4>)
 8000534:	4811      	ldr	r0, [pc, #68]	; (800057c <main+0xa8>)
 8000536:	f003 f937 	bl	80037a8 <osThreadNew>
 800053a:	4603      	mov	r3, r0
 800053c:	4a10      	ldr	r2, [pc, #64]	; (8000580 <main+0xac>)
 800053e:	6013      	str	r3, [r2, #0]

  /* creation of spiTransiver */
  spiTransiverHandle = osThreadNew(spiTransiverTask, (void*) &hspi2, &spiTransiver_attributes);
 8000540:	4a10      	ldr	r2, [pc, #64]	; (8000584 <main+0xb0>)
 8000542:	4911      	ldr	r1, [pc, #68]	; (8000588 <main+0xb4>)
 8000544:	4811      	ldr	r0, [pc, #68]	; (800058c <main+0xb8>)
 8000546:	f003 f92f 	bl	80037a8 <osThreadNew>
 800054a:	4603      	mov	r3, r0
 800054c:	4a10      	ldr	r2, [pc, #64]	; (8000590 <main+0xbc>)
 800054e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000550:	f003 f904 	bl	800375c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000554:	e7fe      	b.n	8000554 <main+0x80>
 8000556:	bf00      	nop
 8000558:	e0042000 	.word	0xe0042000
 800055c:	08006f64 	.word	0x08006f64
 8000560:	200000e8 	.word	0x200000e8
 8000564:	08006f34 	.word	0x08006f34
 8000568:	200000e0 	.word	0x200000e0
 800056c:	08006f4c 	.word	0x08006f4c
 8000570:	200000e4 	.word	0x200000e4
 8000574:	08006eec 	.word	0x08006eec
 8000578:	20000094 	.word	0x20000094
 800057c:	08000c11 	.word	0x08000c11
 8000580:	200000d8 	.word	0x200000d8
 8000584:	08006f10 	.word	0x08006f10
 8000588:	2000003c 	.word	0x2000003c
 800058c:	08000841 	.word	0x08000841
 8000590:	200000dc 	.word	0x200000dc

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b094      	sub	sp, #80	; 0x50
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 0320 	add.w	r3, r7, #32
 800059e:	2230      	movs	r2, #48	; 0x30
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f006 fc5c 	bl	8006e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b8:	2300      	movs	r3, #0
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	4b28      	ldr	r3, [pc, #160]	; (8000660 <SystemClock_Config+0xcc>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	4a27      	ldr	r2, [pc, #156]	; (8000660 <SystemClock_Config+0xcc>)
 80005c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c6:	6413      	str	r3, [r2, #64]	; 0x40
 80005c8:	4b25      	ldr	r3, [pc, #148]	; (8000660 <SystemClock_Config+0xcc>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d4:	2300      	movs	r3, #0
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	4b22      	ldr	r3, [pc, #136]	; (8000664 <SystemClock_Config+0xd0>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a21      	ldr	r2, [pc, #132]	; (8000664 <SystemClock_Config+0xd0>)
 80005de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <SystemClock_Config+0xd0>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80005f0:	230a      	movs	r3, #10
 80005f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f4:	2301      	movs	r3, #1
 80005f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f8:	2310      	movs	r3, #16
 80005fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005fc:	2301      	movs	r3, #1
 80005fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000600:	2302      	movs	r3, #2
 8000602:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000604:	2300      	movs	r3, #0
 8000606:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000608:	2310      	movs	r3, #16
 800060a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 128;
 800060c:	2380      	movs	r3, #128	; 0x80
 800060e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000610:	2304      	movs	r3, #4
 8000612:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000614:	2304      	movs	r3, #4
 8000616:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000618:	f107 0320 	add.w	r3, r7, #32
 800061c:	4618      	mov	r0, r3
 800061e:	f000 fff5 	bl	800160c <HAL_RCC_OscConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000628:	f000 f904 	bl	8000834 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062c:	230f      	movs	r3, #15
 800062e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000630:	2302      	movs	r3, #2
 8000632:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2101      	movs	r1, #1
 8000646:	4618      	mov	r0, r3
 8000648:	f001 fa58 	bl	8001afc <HAL_RCC_ClockConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000652:	f000 f8ef 	bl	8000834 <Error_Handler>
  }
}
 8000656:	bf00      	nop
 8000658:	3750      	adds	r7, #80	; 0x50
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40023800 	.word	0x40023800
 8000664:	40007000 	.word	0x40007000

08000668 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_IWDG_Init+0x2c>)
 800066e:	4a0a      	ldr	r2, [pc, #40]	; (8000698 <MX_IWDG_Init+0x30>)
 8000670:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8000672:	4b08      	ldr	r3, [pc, #32]	; (8000694 <MX_IWDG_Init+0x2c>)
 8000674:	2206      	movs	r2, #6
 8000676:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_IWDG_Init+0x2c>)
 800067a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800067e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000680:	4804      	ldr	r0, [pc, #16]	; (8000694 <MX_IWDG_Init+0x2c>)
 8000682:	f000 ff70 	bl	8001566 <HAL_IWDG_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 800068c:	f000 f8d2 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000030 	.word	0x20000030
 8000698:	40003000 	.word	0x40003000

0800069c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80006a0:	4b18      	ldr	r3, [pc, #96]	; (8000704 <MX_SPI2_Init+0x68>)
 80006a2:	4a19      	ldr	r2, [pc, #100]	; (8000708 <MX_SPI2_Init+0x6c>)
 80006a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006a6:	4b17      	ldr	r3, [pc, #92]	; (8000704 <MX_SPI2_Init+0x68>)
 80006a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006ac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006ae:	4b15      	ldr	r3, [pc, #84]	; (8000704 <MX_SPI2_Init+0x68>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80006b4:	4b13      	ldr	r3, [pc, #76]	; (8000704 <MX_SPI2_Init+0x68>)
 80006b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006ba:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_SPI2_Init+0x68>)
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <MX_SPI2_Init+0x68>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80006c8:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_SPI2_Init+0x68>)
 80006ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ce:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_SPI2_Init+0x68>)
 80006d2:	2218      	movs	r2, #24
 80006d4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <MX_SPI2_Init+0x68>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_SPI2_Init+0x68>)
 80006de:	2200      	movs	r2, #0
 80006e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006e2:	4b08      	ldr	r3, [pc, #32]	; (8000704 <MX_SPI2_Init+0x68>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_SPI2_Init+0x68>)
 80006ea:	220a      	movs	r2, #10
 80006ec:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_SPI2_Init+0x68>)
 80006f0:	f001 fbe4 	bl	8001ebc <HAL_SPI_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80006fa:	f000 f89b 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	2000003c 	.word	0x2000003c
 8000708:	40003800 	.word	0x40003800

0800070c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_UART4_Init+0x4c>)
 8000712:	4a12      	ldr	r2, [pc, #72]	; (800075c <MX_UART4_Init+0x50>)
 8000714:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000716:	4b10      	ldr	r3, [pc, #64]	; (8000758 <MX_UART4_Init+0x4c>)
 8000718:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800071c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_UART4_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_UART4_Init+0x4c>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <MX_UART4_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_UART4_Init+0x4c>)
 8000732:	220c      	movs	r2, #12
 8000734:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <MX_UART4_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_UART4_Init+0x4c>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_UART4_Init+0x4c>)
 8000744:	f002 f800 	bl	8002748 <HAL_UART_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800074e:	f000 f871 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000094 	.word	0x20000094
 800075c:	40004c00 	.word	0x40004c00

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b088      	sub	sp, #32
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 030c 	add.w	r3, r7, #12
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	4b2b      	ldr	r3, [pc, #172]	; (8000828 <MX_GPIO_Init+0xc8>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a2a      	ldr	r2, [pc, #168]	; (8000828 <MX_GPIO_Init+0xc8>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b28      	ldr	r3, [pc, #160]	; (8000828 <MX_GPIO_Init+0xc8>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	4b24      	ldr	r3, [pc, #144]	; (8000828 <MX_GPIO_Init+0xc8>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a23      	ldr	r2, [pc, #140]	; (8000828 <MX_GPIO_Init+0xc8>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b21      	ldr	r3, [pc, #132]	; (8000828 <MX_GPIO_Init+0xc8>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	603b      	str	r3, [r7, #0]
 80007b2:	4b1d      	ldr	r3, [pc, #116]	; (8000828 <MX_GPIO_Init+0xc8>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a1c      	ldr	r2, [pc, #112]	; (8000828 <MX_GPIO_Init+0xc8>)
 80007b8:	f043 0308 	orr.w	r3, r3, #8
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b1a      	ldr	r3, [pc, #104]	; (8000828 <MX_GPIO_Init+0xc8>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0308 	and.w	r3, r3, #8
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_EN_GPIO_Port, SPI2_EN_Pin, GPIO_PIN_SET);
 80007ca:	2201      	movs	r2, #1
 80007cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007d0:	4816      	ldr	r0, [pc, #88]	; (800082c <MX_GPIO_Init+0xcc>)
 80007d2:	f000 feaf 	bl	8001534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80007dc:	4814      	ldr	r0, [pc, #80]	; (8000830 <MX_GPIO_Init+0xd0>)
 80007de:	f000 fea9 	bl	8001534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI2_EN_Pin */
  GPIO_InitStruct.Pin = SPI2_EN_Pin;
 80007e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e8:	2301      	movs	r3, #1
 80007ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI2_EN_GPIO_Port, &GPIO_InitStruct);
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	4619      	mov	r1, r3
 80007fa:	480c      	ldr	r0, [pc, #48]	; (800082c <MX_GPIO_Init+0xcc>)
 80007fc:	f000 fcfe 	bl	80011fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000800:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000804:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	2301      	movs	r3, #1
 8000808:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000812:	f107 030c 	add.w	r3, r7, #12
 8000816:	4619      	mov	r1, r3
 8000818:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_GPIO_Init+0xd0>)
 800081a:	f000 fcef 	bl	80011fc <HAL_GPIO_Init>

}
 800081e:	bf00      	nop
 8000820:	3720      	adds	r7, #32
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40023800 	.word	0x40023800
 800082c:	40020400 	.word	0x40020400
 8000830:	40020c00 	.word	0x40020c00

08000834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000838:	b672      	cpsid	i
}
 800083a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800083c:	e7fe      	b.n	800083c <Error_Handler+0x8>
	...

08000840 <spiTransiverTask>:
extern osMessageQueueId_t uartSendQueueHandle;
extern IWDG_HandleTypeDef hiwdg;
volatile uint8_t spiSendFlag = 0;

void spiTransiverTask(void *argument)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b088      	sub	sp, #32
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  uint16_t uartMsg[10]={0xaa};
 8000848:	f107 030c 	add.w	r3, r7, #12
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
 8000858:	23aa      	movs	r3, #170	; 0xaa
 800085a:	81bb      	strh	r3, [r7, #12]
  pSPI = (SPI_HandleTypeDef*)argument;
 800085c:	4a24      	ldr	r2, [pc, #144]	; (80008f0 <spiTransiverTask+0xb0>)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	6013      	str	r3, [r2, #0]

  HAL_GPIO_WritePin(SPI2_EN_GPIO_Port, SPI2_EN_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000868:	4822      	ldr	r0, [pc, #136]	; (80008f4 <spiTransiverTask+0xb4>)
 800086a:	f000 fe63 	bl	8001534 <HAL_GPIO_WritePin>
  memset(transmitBuffer, stringEndSymbol, BUFFER_SIZE);
 800086e:	2300      	movs	r3, #0
 8000870:	220a      	movs	r2, #10
 8000872:	4619      	mov	r1, r3
 8000874:	4820      	ldr	r0, [pc, #128]	; (80008f8 <spiTransiverTask+0xb8>)
 8000876:	f006 faf3 	bl	8006e60 <memset>
  HAL_SPI_TransmitReceive_IT(pSPI, (uint8_t*)transmitBuffer, (uint8_t*)receiveBuffer, 1);
 800087a:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <spiTransiverTask+0xb0>)
 800087c:	6818      	ldr	r0, [r3, #0]
 800087e:	2301      	movs	r3, #1
 8000880:	4a1e      	ldr	r2, [pc, #120]	; (80008fc <spiTransiverTask+0xbc>)
 8000882:	491d      	ldr	r1, [pc, #116]	; (80008f8 <spiTransiverTask+0xb8>)
 8000884:	f001 fba4 	bl	8001fd0 <HAL_SPI_TransmitReceive_IT>
  for(;;)
  {
	HAL_IWDG_Refresh(&hiwdg);
 8000888:	481d      	ldr	r0, [pc, #116]	; (8000900 <spiTransiverTask+0xc0>)
 800088a:	f000 feae 	bl	80015ea <HAL_IWDG_Refresh>
  	if(osMessageQueueGet (spiSendQueueHandle, &uartMsg, 0, SECOND_TIMEOUT) == osOK){
 800088e:	4b1d      	ldr	r3, [pc, #116]	; (8000904 <spiTransiverTask+0xc4>)
 8000890:	6818      	ldr	r0, [r3, #0]
 8000892:	f107 010c 	add.w	r1, r7, #12
 8000896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800089a:	2200      	movs	r2, #0
 800089c:	f003 fa0a 	bl	8003cb4 <osMessageQueueGet>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d118      	bne.n	80008d8 <spiTransiverTask+0x98>
  	  if(getUARTLastByte()==stringEndSymbol) spiSendFlag = 0;
 80008a6:	f000 fa5d 	bl	8000d64 <getUARTLastByte>
 80008aa:	4603      	mov	r3, r0
 80008ac:	461a      	mov	r2, r3
 80008ae:	2300      	movs	r3, #0
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d103      	bne.n	80008bc <spiTransiverTask+0x7c>
 80008b4:	4b14      	ldr	r3, [pc, #80]	; (8000908 <spiTransiverTask+0xc8>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	701a      	strb	r2, [r3, #0]
 80008ba:	e002      	b.n	80008c2 <spiTransiverTask+0x82>
  	  else spiSendFlag = 1;
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <spiTransiverTask+0xc8>)
 80008be:	2201      	movs	r2, #1
 80008c0:	701a      	strb	r2, [r3, #0]
  	  transmitBuffer[0] = uartMsg[0];
 80008c2:	89ba      	ldrh	r2, [r7, #12]
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <spiTransiverTask+0xb8>)
 80008c6:	801a      	strh	r2, [r3, #0]
      HAL_SPI_TransmitReceive_IT(pSPI, (uint8_t*)transmitBuffer, (uint8_t*)receiveBuffer, 1);
 80008c8:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <spiTransiverTask+0xb0>)
 80008ca:	6818      	ldr	r0, [r3, #0]
 80008cc:	2301      	movs	r3, #1
 80008ce:	4a0b      	ldr	r2, [pc, #44]	; (80008fc <spiTransiverTask+0xbc>)
 80008d0:	4909      	ldr	r1, [pc, #36]	; (80008f8 <spiTransiverTask+0xb8>)
 80008d2:	f001 fb7d 	bl	8001fd0 <HAL_SPI_TransmitReceive_IT>
 80008d6:	e7d7      	b.n	8000888 <spiTransiverTask+0x48>
  	}
  	else{
  	  spiSendFlag = 0;
 80008d8:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <spiTransiverTask+0xc8>)
 80008da:	2200      	movs	r2, #0
 80008dc:	701a      	strb	r2, [r3, #0]
  	  HAL_SPI_TransmitReceive_IT(pSPI, (uint8_t*)transmitBuffer, (uint8_t*)receiveBuffer, 1);
 80008de:	4b04      	ldr	r3, [pc, #16]	; (80008f0 <spiTransiverTask+0xb0>)
 80008e0:	6818      	ldr	r0, [r3, #0]
 80008e2:	2301      	movs	r3, #1
 80008e4:	4a05      	ldr	r2, [pc, #20]	; (80008fc <spiTransiverTask+0xbc>)
 80008e6:	4904      	ldr	r1, [pc, #16]	; (80008f8 <spiTransiverTask+0xb8>)
 80008e8:	f001 fb72 	bl	8001fd0 <HAL_SPI_TransmitReceive_IT>
	HAL_IWDG_Refresh(&hiwdg);
 80008ec:	e7cc      	b.n	8000888 <spiTransiverTask+0x48>
 80008ee:	bf00      	nop
 80008f0:	200000ec 	.word	0x200000ec
 80008f4:	40020400 	.word	0x40020400
 80008f8:	200000f0 	.word	0x200000f0
 80008fc:	20000104 	.word	0x20000104
 8000900:	20000030 	.word	0x20000030
 8000904:	200000e4 	.word	0x200000e4
 8000908:	20000118 	.word	0x20000118

0800090c <isDataTransmitted>:
  	}
  }
}

uint8_t isDataTransmitted(uint16_t data){
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	80fb      	strh	r3, [r7, #6]
  static uint8_t transmissionFlag = 0;

  if(transmissionFlag==0){
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <isDataTransmitted+0x50>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d10d      	bne.n	800093a <isDataTransmitted+0x2e>
    if((data&0xff00)>>8==stringEndSymbol){
 800091e:	88fb      	ldrh	r3, [r7, #6]
 8000920:	0a1b      	lsrs	r3, r3, #8
 8000922:	b29a      	uxth	r2, r3
 8000924:	2300      	movs	r3, #0
 8000926:	b29b      	uxth	r3, r3
 8000928:	429a      	cmp	r2, r3
 800092a:	d104      	bne.n	8000936 <isDataTransmitted+0x2a>
    	transmissionFlag = 1;
 800092c:	4b0b      	ldr	r3, [pc, #44]	; (800095c <isDataTransmitted+0x50>)
 800092e:	2201      	movs	r2, #1
 8000930:	701a      	strb	r2, [r3, #0]
      return 1;
 8000932:	2301      	movs	r3, #1
 8000934:	e00c      	b.n	8000950 <isDataTransmitted+0x44>
    }
	else return 0;
 8000936:	2300      	movs	r3, #0
 8000938:	e00a      	b.n	8000950 <isDataTransmitted+0x44>
  }
  else{
    if((data&0xff)==stringEndSymbol){
 800093a:	88fb      	ldrh	r3, [r7, #6]
 800093c:	b2db      	uxtb	r3, r3
 800093e:	2200      	movs	r2, #0
 8000940:	4293      	cmp	r3, r2
 8000942:	d104      	bne.n	800094e <isDataTransmitted+0x42>
      transmissionFlag = 0;
 8000944:	4b05      	ldr	r3, [pc, #20]	; (800095c <isDataTransmitted+0x50>)
 8000946:	2200      	movs	r2, #0
 8000948:	701a      	strb	r2, [r3, #0]
	  return 1;
 800094a:	2301      	movs	r3, #1
 800094c:	e000      	b.n	8000950 <isDataTransmitted+0x44>
	}
	else return 1;
 800094e:	2301      	movs	r3, #1
  }
}
 8000950:	4618      	mov	r0, r3
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	20000119 	.word	0x20000119

08000960 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  if(hspi != pSPI) return;
 8000968:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <HAL_SPI_TxRxCpltCallback+0x70>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	687a      	ldr	r2, [r7, #4]
 800096e:	429a      	cmp	r2, r3
 8000970:	d129      	bne.n	80009c6 <HAL_SPI_TxRxCpltCallback+0x66>
  if(pSPI->Instance->SR&SPI_FLAG_RXNE){
 8000972:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <HAL_SPI_TxRxCpltCallback+0x70>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	689b      	ldr	r3, [r3, #8]
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	2b00      	cmp	r3, #0
 8000980:	d00e      	beq.n	80009a0 <HAL_SPI_TxRxCpltCallback+0x40>
	if(isDataTransmitted(receiveBuffer[0])) osMessageQueuePut(uartSendQueueHandle,receiveBuffer,0,0);
 8000982:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <HAL_SPI_TxRxCpltCallback+0x74>)
 8000984:	881b      	ldrh	r3, [r3, #0]
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff ffc0 	bl	800090c <isDataTransmitted>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d006      	beq.n	80009a0 <HAL_SPI_TxRxCpltCallback+0x40>
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <HAL_SPI_TxRxCpltCallback+0x78>)
 8000994:	6818      	ldr	r0, [r3, #0]
 8000996:	2300      	movs	r3, #0
 8000998:	2200      	movs	r2, #0
 800099a:	490e      	ldr	r1, [pc, #56]	; (80009d4 <HAL_SPI_TxRxCpltCallback+0x74>)
 800099c:	f003 f92a 	bl	8003bf4 <osMessageQueuePut>
  }
  if(spiSendFlag == 0){
 80009a0:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <HAL_SPI_TxRxCpltCallback+0x7c>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d10e      	bne.n	80009c8 <HAL_SPI_TxRxCpltCallback+0x68>
    memset(transmitBuffer, stringEndSymbol, BUFFER_SIZE);
 80009aa:	2300      	movs	r3, #0
 80009ac:	220a      	movs	r2, #10
 80009ae:	4619      	mov	r1, r3
 80009b0:	480b      	ldr	r0, [pc, #44]	; (80009e0 <HAL_SPI_TxRxCpltCallback+0x80>)
 80009b2:	f006 fa55 	bl	8006e60 <memset>
    HAL_SPI_TransmitReceive_IT(pSPI, (uint8_t*)transmitBuffer, (uint8_t*)receiveBuffer, 1);
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_SPI_TxRxCpltCallback+0x70>)
 80009b8:	6818      	ldr	r0, [r3, #0]
 80009ba:	2301      	movs	r3, #1
 80009bc:	4a05      	ldr	r2, [pc, #20]	; (80009d4 <HAL_SPI_TxRxCpltCallback+0x74>)
 80009be:	4908      	ldr	r1, [pc, #32]	; (80009e0 <HAL_SPI_TxRxCpltCallback+0x80>)
 80009c0:	f001 fb06 	bl	8001fd0 <HAL_SPI_TransmitReceive_IT>
 80009c4:	e000      	b.n	80009c8 <HAL_SPI_TxRxCpltCallback+0x68>
  if(hspi != pSPI) return;
 80009c6:	bf00      	nop
  }
}
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200000ec 	.word	0x200000ec
 80009d4:	20000104 	.word	0x20000104
 80009d8:	200000e0 	.word	0x200000e0
 80009dc:	20000118 	.word	0x20000118
 80009e0:	200000f0 	.word	0x200000f0

080009e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <HAL_MspInit+0x54>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	4a11      	ldr	r2, [pc, #68]	; (8000a38 <HAL_MspInit+0x54>)
 80009f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f8:	6453      	str	r3, [r2, #68]	; 0x44
 80009fa:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <HAL_MspInit+0x54>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	603b      	str	r3, [r7, #0]
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <HAL_MspInit+0x54>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	; (8000a38 <HAL_MspInit+0x54>)
 8000a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a14:	6413      	str	r3, [r2, #64]	; 0x40
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <HAL_MspInit+0x54>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	210f      	movs	r1, #15
 8000a26:	f06f 0001 	mvn.w	r0, #1
 8000a2a:	f000 fb1e 	bl	800106a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40023800 	.word	0x40023800

08000a3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08a      	sub	sp, #40	; 0x28
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a1d      	ldr	r2, [pc, #116]	; (8000ad0 <HAL_SPI_MspInit+0x94>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d134      	bne.n	8000ac8 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	613b      	str	r3, [r7, #16]
 8000a62:	4b1c      	ldr	r3, [pc, #112]	; (8000ad4 <HAL_SPI_MspInit+0x98>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a66:	4a1b      	ldr	r2, [pc, #108]	; (8000ad4 <HAL_SPI_MspInit+0x98>)
 8000a68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6e:	4b19      	ldr	r3, [pc, #100]	; (8000ad4 <HAL_SPI_MspInit+0x98>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <HAL_SPI_MspInit+0x98>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a14      	ldr	r2, [pc, #80]	; (8000ad4 <HAL_SPI_MspInit+0x98>)
 8000a84:	f043 0302 	orr.w	r3, r3, #2
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <HAL_SPI_MspInit+0x98>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0302 	and.w	r3, r3, #2
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000a96:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000aa8:	2305      	movs	r3, #5
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4809      	ldr	r0, [pc, #36]	; (8000ad8 <HAL_SPI_MspInit+0x9c>)
 8000ab4:	f000 fba2 	bl	80011fc <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2105      	movs	r1, #5
 8000abc:	2024      	movs	r0, #36	; 0x24
 8000abe:	f000 fad4 	bl	800106a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000ac2:	2024      	movs	r0, #36	; 0x24
 8000ac4:	f000 faed 	bl	80010a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000ac8:	bf00      	nop
 8000aca:	3728      	adds	r7, #40	; 0x28
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40003800 	.word	0x40003800
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40020400 	.word	0x40020400

08000adc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	; 0x28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a1d      	ldr	r2, [pc, #116]	; (8000b70 <HAL_UART_MspInit+0x94>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d133      	bne.n	8000b66 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	4b1c      	ldr	r3, [pc, #112]	; (8000b74 <HAL_UART_MspInit+0x98>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b06:	4a1b      	ldr	r2, [pc, #108]	; (8000b74 <HAL_UART_MspInit+0x98>)
 8000b08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0e:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <HAL_UART_MspInit+0x98>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <HAL_UART_MspInit+0x98>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a14      	ldr	r2, [pc, #80]	; (8000b74 <HAL_UART_MspInit+0x98>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <HAL_UART_MspInit+0x98>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b36:	2303      	movs	r3, #3
 8000b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b42:	2303      	movs	r3, #3
 8000b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b46:	2308      	movs	r3, #8
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4809      	ldr	r0, [pc, #36]	; (8000b78 <HAL_UART_MspInit+0x9c>)
 8000b52:	f000 fb53 	bl	80011fc <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2105      	movs	r1, #5
 8000b5a:	2034      	movs	r0, #52	; 0x34
 8000b5c:	f000 fa85 	bl	800106a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000b60:	2034      	movs	r0, #52	; 0x34
 8000b62:	f000 fa9e 	bl	80010a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000b66:	bf00      	nop
 8000b68:	3728      	adds	r7, #40	; 0x28
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40004c00 	.word	0x40004c00
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40020000 	.word	0x40020000

08000b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <NMI_Handler+0x4>

08000b82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <HardFault_Handler+0x4>

08000b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <MemManage_Handler+0x4>

08000b8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b92:	e7fe      	b.n	8000b92 <BusFault_Handler+0x4>

08000b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <UsageFault_Handler+0x4>

08000b9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bac:	f000 f962 	bl	8000e74 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000bb0:	f004 ffbe 	bl	8005b30 <xTaskGetSchedulerState>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d001      	beq.n	8000bbe <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000bba:	f005 fea5 	bl	8006908 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000bc8:	4802      	ldr	r0, [pc, #8]	; (8000bd4 <SPI2_IRQHandler+0x10>)
 8000bca:	f001 fa95 	bl	80020f8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	2000003c 	.word	0x2000003c

08000bd8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000bdc:	4802      	ldr	r0, [pc, #8]	; (8000be8 <UART4_IRQHandler+0x10>)
 8000bde:	f001 fe75 	bl	80028cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000094 	.word	0x20000094

08000bec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <SystemInit+0x20>)
 8000bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bf6:	4a05      	ldr	r2, [pc, #20]	; (8000c0c <SystemInit+0x20>)
 8000bf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <uartTransiverTask>:
extern osMessageQueueId_t spiSendQueueHandle;
extern osMessageQueueId_t uartSendQueueHandle;
extern osSemaphoreId_t uartSendSemHandle;
static uint8_t lastByte = 0;
void uartTransiverTask(void *argument)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b088      	sub	sp, #32
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  uint16_t spiMsg[10];
  pUART = (UART_HandleTypeDef *)argument;
 8000c18:	4a15      	ldr	r2, [pc, #84]	; (8000c70 <uartTransiverTask+0x60>)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6013      	str	r3, [r2, #0]

  HAL_UART_Receive_IT(pUART, uartBuffer, 1);
 8000c1e:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <uartTransiverTask+0x60>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2201      	movs	r2, #1
 8000c24:	4913      	ldr	r1, [pc, #76]	; (8000c74 <uartTransiverTask+0x64>)
 8000c26:	4618      	mov	r0, r3
 8000c28:	f001 fe20 	bl	800286c <HAL_UART_Receive_IT>
  for(;;)
  {
	if(osMessageQueueGet(uartSendQueueHandle, &spiMsg, 0, osWaitForever) != osOK) continue;
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <uartTransiverTask+0x68>)
 8000c2e:	6818      	ldr	r0, [r3, #0]
 8000c30:	f107 010c 	add.w	r1, r7, #12
 8000c34:	f04f 33ff 	mov.w	r3, #4294967295
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f003 f83b 	bl	8003cb4 <osMessageQueueGet>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d112      	bne.n	8000c6a <uartTransiverTask+0x5a>
	if(osSemaphoreAcquire(uartSendSemHandle, SECOND_TIMEOUT)==osOK)
 8000c44:	4b0d      	ldr	r3, [pc, #52]	; (8000c7c <uartTransiverTask+0x6c>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f002 fec7 	bl	80039e0 <osSemaphoreAcquire>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d1e9      	bne.n	8000c2c <uartTransiverTask+0x1c>
      HAL_UART_Transmit_IT(pUART, (uint8_t*)spiMsg, 2);
 8000c58:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <uartTransiverTask+0x60>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f107 010c 	add.w	r1, r7, #12
 8000c60:	2202      	movs	r2, #2
 8000c62:	4618      	mov	r0, r3
 8000c64:	f001 fdbd 	bl	80027e2 <HAL_UART_Transmit_IT>
 8000c68:	e7e0      	b.n	8000c2c <uartTransiverTask+0x1c>
	if(osMessageQueueGet(uartSendQueueHandle, &spiMsg, 0, osWaitForever) != osOK) continue;
 8000c6a:	bf00      	nop
 8000c6c:	e7de      	b.n	8000c2c <uartTransiverTask+0x1c>
 8000c6e:	bf00      	nop
 8000c70:	2000011c 	.word	0x2000011c
 8000c74:	20000120 	.word	0x20000120
 8000c78:	200000e0 	.word	0x200000e0
 8000c7c:	200000e8 	.word	0x200000e8

08000c80 <processBytes>:
  }
}

void processBytes(uint8_t byte){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
  static uint8_t prevByte = 0;
  static uint8_t isFirstByte = 1;
  static uint16_t value = 0;

  lastByte = byte;
 8000c8a:	4a1a      	ldr	r2, [pc, #104]	; (8000cf4 <processBytes+0x74>)
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	7013      	strb	r3, [r2, #0]
  if(isFirstByte){
 8000c90:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <processBytes+0x78>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d015      	beq.n	8000cc4 <processBytes+0x44>
	if(byte==stringEndSymbol){
 8000c98:	2200      	movs	r2, #0
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d10a      	bne.n	8000cb6 <processBytes+0x36>
	  value = 0;
 8000ca0:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <processBytes+0x7c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	801a      	strh	r2, [r3, #0]
	  osMessageQueuePut(spiSendQueueHandle,&value,0,0);
 8000ca6:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <processBytes+0x80>)
 8000ca8:	6818      	ldr	r0, [r3, #0]
 8000caa:	2300      	movs	r3, #0
 8000cac:	2200      	movs	r2, #0
 8000cae:	4913      	ldr	r1, [pc, #76]	; (8000cfc <processBytes+0x7c>)
 8000cb0:	f002 ffa0 	bl	8003bf4 <osMessageQueuePut>
	  return;
 8000cb4:	e01b      	b.n	8000cee <processBytes+0x6e>
	}
	prevByte = byte;
 8000cb6:	4a13      	ldr	r2, [pc, #76]	; (8000d04 <processBytes+0x84>)
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	7013      	strb	r3, [r2, #0]
	isFirstByte = 0;
 8000cbc:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <processBytes+0x78>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
 8000cc2:	e014      	b.n	8000cee <processBytes+0x6e>
  }
  else {
	value = (prevByte << 8) | byte;
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <processBytes+0x84>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	021b      	lsls	r3, r3, #8
 8000cca:	b21a      	sxth	r2, r3
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	b21b      	sxth	r3, r3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	b21b      	sxth	r3, r3
 8000cd4:	b29a      	uxth	r2, r3
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <processBytes+0x7c>)
 8000cd8:	801a      	strh	r2, [r3, #0]
	isFirstByte = 1;
 8000cda:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <processBytes+0x78>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	701a      	strb	r2, [r3, #0]
	osMessageQueuePut(spiSendQueueHandle,&value,0,0);
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <processBytes+0x80>)
 8000ce2:	6818      	ldr	r0, [r3, #0]
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	4904      	ldr	r1, [pc, #16]	; (8000cfc <processBytes+0x7c>)
 8000cea:	f002 ff83 	bl	8003bf4 <osMessageQueuePut>
  }
}
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	2000012a 	.word	0x2000012a
 8000cf8:	20000004 	.word	0x20000004
 8000cfc:	2000012c 	.word	0x2000012c
 8000d00:	200000e4 	.word	0x200000e4
 8000d04:	2000012e 	.word	0x2000012e

08000d08 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  if(huart == pUART){
 8000d10:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <HAL_UART_RxCpltCallback+0x34>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	687a      	ldr	r2, [r7, #4]
 8000d16:	429a      	cmp	r2, r3
 8000d18:	d10b      	bne.n	8000d32 <HAL_UART_RxCpltCallback+0x2a>
	processBytes(uartBuffer[0]);
 8000d1a:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <HAL_UART_RxCpltCallback+0x38>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff ffae 	bl	8000c80 <processBytes>
    HAL_UART_Receive_IT(pUART, uartBuffer, 1);
 8000d24:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <HAL_UART_RxCpltCallback+0x34>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2201      	movs	r2, #1
 8000d2a:	4905      	ldr	r1, [pc, #20]	; (8000d40 <HAL_UART_RxCpltCallback+0x38>)
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f001 fd9d 	bl	800286c <HAL_UART_Receive_IT>
  }
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	2000011c 	.word	0x2000011c
 8000d40:	20000120 	.word	0x20000120

08000d44 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(uartSendSemHandle);
 8000d4c:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <HAL_UART_TxCpltCallback+0x1c>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f002 fe97 	bl	8003a84 <osSemaphoreRelease>
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	200000e8 	.word	0x200000e8

08000d64 <getUARTLastByte>:

uint8_t getUARTLastByte(void){
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return lastByte;
 8000d68:	4b03      	ldr	r3, [pc, #12]	; (8000d78 <getUARTLastByte+0x14>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	2000012a 	.word	0x2000012a

08000d7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000db4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d80:	480d      	ldr	r0, [pc, #52]	; (8000db8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d82:	490e      	ldr	r1, [pc, #56]	; (8000dbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d84:	4a0e      	ldr	r2, [pc, #56]	; (8000dc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d88:	e002      	b.n	8000d90 <LoopCopyDataInit>

08000d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8e:	3304      	adds	r3, #4

08000d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d94:	d3f9      	bcc.n	8000d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d96:	4a0b      	ldr	r2, [pc, #44]	; (8000dc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d98:	4c0b      	ldr	r4, [pc, #44]	; (8000dc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d9c:	e001      	b.n	8000da2 <LoopFillZerobss>

08000d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da0:	3204      	adds	r2, #4

08000da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da4:	d3fb      	bcc.n	8000d9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000da6:	f7ff ff21 	bl	8000bec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000daa:	f006 f827 	bl	8006dfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dae:	f7ff fb91 	bl	80004d4 <main>
  bx  lr    
 8000db2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000db4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dbc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000dc0:	08006f9c 	.word	0x08006f9c
  ldr r2, =_sbss
 8000dc4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000dc8:	20004a84 	.word	0x20004a84

08000dcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dcc:	e7fe      	b.n	8000dcc <ADC_IRQHandler>
	...

08000dd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dd4:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <HAL_Init+0x40>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a0d      	ldr	r2, [pc, #52]	; (8000e10 <HAL_Init+0x40>)
 8000dda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000de0:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <HAL_Init+0x40>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <HAL_Init+0x40>)
 8000de6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dec:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a07      	ldr	r2, [pc, #28]	; (8000e10 <HAL_Init+0x40>)
 8000df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df8:	2003      	movs	r0, #3
 8000dfa:	f000 f92b 	bl	8001054 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dfe:	200f      	movs	r0, #15
 8000e00:	f000 f808 	bl	8000e14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e04:	f7ff fdee 	bl	80009e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40023c00 	.word	0x40023c00

08000e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e1c:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <HAL_InitTick+0x54>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <HAL_InitTick+0x58>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	4619      	mov	r1, r3
 8000e26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 f943 	bl	80010be <HAL_SYSTICK_Config>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e00e      	b.n	8000e60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2b0f      	cmp	r3, #15
 8000e46:	d80a      	bhi.n	8000e5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	6879      	ldr	r1, [r7, #4]
 8000e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e50:	f000 f90b 	bl	800106a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e54:	4a06      	ldr	r2, [pc, #24]	; (8000e70 <HAL_InitTick+0x5c>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	e000      	b.n	8000e60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000000 	.word	0x20000000
 8000e6c:	2000000c 	.word	0x2000000c
 8000e70:	20000008 	.word	0x20000008

08000e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_IncTick+0x20>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <HAL_IncTick+0x24>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4413      	add	r3, r2
 8000e84:	4a04      	ldr	r2, [pc, #16]	; (8000e98 <HAL_IncTick+0x24>)
 8000e86:	6013      	str	r3, [r2, #0]
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	2000000c 	.word	0x2000000c
 8000e98:	20000130 	.word	0x20000130

08000e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea0:	4b03      	ldr	r3, [pc, #12]	; (8000eb0 <HAL_GetTick+0x14>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000130 	.word	0x20000130

08000eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eca:	68ba      	ldr	r2, [r7, #8]
 8000ecc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000edc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee6:	4a04      	ldr	r2, [pc, #16]	; (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	60d3      	str	r3, [r2, #12]
}
 8000eec:	bf00      	nop
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f00:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <__NVIC_GetPriorityGrouping+0x18>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	0a1b      	lsrs	r3, r3, #8
 8000f06:	f003 0307 	and.w	r3, r3, #7
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	db0b      	blt.n	8000f42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	f003 021f 	and.w	r2, r3, #31
 8000f30:	4907      	ldr	r1, [pc, #28]	; (8000f50 <__NVIC_EnableIRQ+0x38>)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	095b      	lsrs	r3, r3, #5
 8000f38:	2001      	movs	r0, #1
 8000f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000e100 	.word	0xe000e100

08000f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	6039      	str	r1, [r7, #0]
 8000f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	db0a      	blt.n	8000f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	490c      	ldr	r1, [pc, #48]	; (8000fa0 <__NVIC_SetPriority+0x4c>)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	0112      	lsls	r2, r2, #4
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	440b      	add	r3, r1
 8000f78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f7c:	e00a      	b.n	8000f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4908      	ldr	r1, [pc, #32]	; (8000fa4 <__NVIC_SetPriority+0x50>)
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	f003 030f 	and.w	r3, r3, #15
 8000f8a:	3b04      	subs	r3, #4
 8000f8c:	0112      	lsls	r2, r2, #4
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	440b      	add	r3, r1
 8000f92:	761a      	strb	r2, [r3, #24]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000e100 	.word	0xe000e100
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b089      	sub	sp, #36	; 0x24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f1c3 0307 	rsb	r3, r3, #7
 8000fc2:	2b04      	cmp	r3, #4
 8000fc4:	bf28      	it	cs
 8000fc6:	2304      	movcs	r3, #4
 8000fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	2b06      	cmp	r3, #6
 8000fd0:	d902      	bls.n	8000fd8 <NVIC_EncodePriority+0x30>
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3b03      	subs	r3, #3
 8000fd6:	e000      	b.n	8000fda <NVIC_EncodePriority+0x32>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43da      	mvns	r2, r3
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	401a      	ands	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffa:	43d9      	mvns	r1, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	4313      	orrs	r3, r2
         );
}
 8001002:	4618      	mov	r0, r3
 8001004:	3724      	adds	r7, #36	; 0x24
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
	...

08001010 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3b01      	subs	r3, #1
 800101c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001020:	d301      	bcc.n	8001026 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001022:	2301      	movs	r3, #1
 8001024:	e00f      	b.n	8001046 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001026:	4a0a      	ldr	r2, [pc, #40]	; (8001050 <SysTick_Config+0x40>)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3b01      	subs	r3, #1
 800102c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800102e:	210f      	movs	r1, #15
 8001030:	f04f 30ff 	mov.w	r0, #4294967295
 8001034:	f7ff ff8e 	bl	8000f54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <SysTick_Config+0x40>)
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800103e:	4b04      	ldr	r3, [pc, #16]	; (8001050 <SysTick_Config+0x40>)
 8001040:	2207      	movs	r2, #7
 8001042:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	e000e010 	.word	0xe000e010

08001054 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff ff29 	bl	8000eb4 <__NVIC_SetPriorityGrouping>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800106a:	b580      	push	{r7, lr}
 800106c:	b086      	sub	sp, #24
 800106e:	af00      	add	r7, sp, #0
 8001070:	4603      	mov	r3, r0
 8001072:	60b9      	str	r1, [r7, #8]
 8001074:	607a      	str	r2, [r7, #4]
 8001076:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800107c:	f7ff ff3e 	bl	8000efc <__NVIC_GetPriorityGrouping>
 8001080:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	68b9      	ldr	r1, [r7, #8]
 8001086:	6978      	ldr	r0, [r7, #20]
 8001088:	f7ff ff8e 	bl	8000fa8 <NVIC_EncodePriority>
 800108c:	4602      	mov	r2, r0
 800108e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001092:	4611      	mov	r1, r2
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ff5d 	bl	8000f54 <__NVIC_SetPriority>
}
 800109a:	bf00      	nop
 800109c:	3718      	adds	r7, #24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	4603      	mov	r3, r0
 80010aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff ff31 	bl	8000f18 <__NVIC_EnableIRQ>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff ffa2 	bl	8001010 <SysTick_Config>
 80010cc:	4603      	mov	r3, r0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b084      	sub	sp, #16
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80010e4:	f7ff feda 	bl	8000e9c <HAL_GetTick>
 80010e8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d008      	beq.n	8001108 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2280      	movs	r2, #128	; 0x80
 80010fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	e052      	b.n	80011ae <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f022 0216 	bic.w	r2, r2, #22
 8001116:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	695a      	ldr	r2, [r3, #20]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001126:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112c:	2b00      	cmp	r3, #0
 800112e:	d103      	bne.n	8001138 <HAL_DMA_Abort+0x62>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001134:	2b00      	cmp	r3, #0
 8001136:	d007      	beq.n	8001148 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f022 0208 	bic.w	r2, r2, #8
 8001146:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f022 0201 	bic.w	r2, r2, #1
 8001156:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001158:	e013      	b.n	8001182 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800115a:	f7ff fe9f 	bl	8000e9c <HAL_GetTick>
 800115e:	4602      	mov	r2, r0
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	2b05      	cmp	r3, #5
 8001166:	d90c      	bls.n	8001182 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2220      	movs	r2, #32
 800116c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2203      	movs	r2, #3
 8001172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e015      	b.n	80011ae <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 0301 	and.w	r3, r3, #1
 800118c:	2b00      	cmp	r3, #0
 800118e:	d1e4      	bne.n	800115a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001194:	223f      	movs	r2, #63	; 0x3f
 8001196:	409a      	lsls	r2, r3
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2201      	movs	r2, #1
 80011a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011b6:	b480      	push	{r7}
 80011b8:	b083      	sub	sp, #12
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d004      	beq.n	80011d4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2280      	movs	r2, #128	; 0x80
 80011ce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e00c      	b.n	80011ee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2205      	movs	r2, #5
 80011d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f022 0201 	bic.w	r2, r2, #1
 80011ea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
	...

080011fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b089      	sub	sp, #36	; 0x24
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001206:	2300      	movs	r3, #0
 8001208:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800120e:	2300      	movs	r3, #0
 8001210:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001212:	2300      	movs	r3, #0
 8001214:	61fb      	str	r3, [r7, #28]
 8001216:	e16b      	b.n	80014f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001218:	2201      	movs	r2, #1
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	697a      	ldr	r2, [r7, #20]
 8001228:	4013      	ands	r3, r2
 800122a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	429a      	cmp	r2, r3
 8001232:	f040 815a 	bne.w	80014ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f003 0303 	and.w	r3, r3, #3
 800123e:	2b01      	cmp	r3, #1
 8001240:	d005      	beq.n	800124e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800124a:	2b02      	cmp	r3, #2
 800124c:	d130      	bne.n	80012b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	2203      	movs	r2, #3
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43db      	mvns	r3, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4013      	ands	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	68da      	ldr	r2, [r3, #12]
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4313      	orrs	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001284:	2201      	movs	r2, #1
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	091b      	lsrs	r3, r3, #4
 800129a:	f003 0201 	and.w	r2, r3, #1
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 0303 	and.w	r3, r3, #3
 80012b8:	2b03      	cmp	r3, #3
 80012ba:	d017      	beq.n	80012ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	2203      	movs	r2, #3
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	689a      	ldr	r2, [r3, #8]
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 0303 	and.w	r3, r3, #3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d123      	bne.n	8001340 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	08da      	lsrs	r2, r3, #3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3208      	adds	r2, #8
 8001300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001304:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	f003 0307 	and.w	r3, r3, #7
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	220f      	movs	r2, #15
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	43db      	mvns	r3, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4013      	ands	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	691a      	ldr	r2, [r3, #16]
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	08da      	lsrs	r2, r3, #3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	3208      	adds	r2, #8
 800133a:	69b9      	ldr	r1, [r7, #24]
 800133c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	2203      	movs	r2, #3
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 0203 	and.w	r2, r3, #3
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800137c:	2b00      	cmp	r3, #0
 800137e:	f000 80b4 	beq.w	80014ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	4b60      	ldr	r3, [pc, #384]	; (8001508 <HAL_GPIO_Init+0x30c>)
 8001388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138a:	4a5f      	ldr	r2, [pc, #380]	; (8001508 <HAL_GPIO_Init+0x30c>)
 800138c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001390:	6453      	str	r3, [r2, #68]	; 0x44
 8001392:	4b5d      	ldr	r3, [pc, #372]	; (8001508 <HAL_GPIO_Init+0x30c>)
 8001394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800139e:	4a5b      	ldr	r2, [pc, #364]	; (800150c <HAL_GPIO_Init+0x310>)
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	089b      	lsrs	r3, r3, #2
 80013a4:	3302      	adds	r3, #2
 80013a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	f003 0303 	and.w	r3, r3, #3
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	220f      	movs	r2, #15
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43db      	mvns	r3, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4013      	ands	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a52      	ldr	r2, [pc, #328]	; (8001510 <HAL_GPIO_Init+0x314>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d02b      	beq.n	8001422 <HAL_GPIO_Init+0x226>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a51      	ldr	r2, [pc, #324]	; (8001514 <HAL_GPIO_Init+0x318>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d025      	beq.n	800141e <HAL_GPIO_Init+0x222>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a50      	ldr	r2, [pc, #320]	; (8001518 <HAL_GPIO_Init+0x31c>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d01f      	beq.n	800141a <HAL_GPIO_Init+0x21e>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a4f      	ldr	r2, [pc, #316]	; (800151c <HAL_GPIO_Init+0x320>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d019      	beq.n	8001416 <HAL_GPIO_Init+0x21a>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a4e      	ldr	r2, [pc, #312]	; (8001520 <HAL_GPIO_Init+0x324>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d013      	beq.n	8001412 <HAL_GPIO_Init+0x216>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a4d      	ldr	r2, [pc, #308]	; (8001524 <HAL_GPIO_Init+0x328>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d00d      	beq.n	800140e <HAL_GPIO_Init+0x212>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a4c      	ldr	r2, [pc, #304]	; (8001528 <HAL_GPIO_Init+0x32c>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d007      	beq.n	800140a <HAL_GPIO_Init+0x20e>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a4b      	ldr	r2, [pc, #300]	; (800152c <HAL_GPIO_Init+0x330>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d101      	bne.n	8001406 <HAL_GPIO_Init+0x20a>
 8001402:	2307      	movs	r3, #7
 8001404:	e00e      	b.n	8001424 <HAL_GPIO_Init+0x228>
 8001406:	2308      	movs	r3, #8
 8001408:	e00c      	b.n	8001424 <HAL_GPIO_Init+0x228>
 800140a:	2306      	movs	r3, #6
 800140c:	e00a      	b.n	8001424 <HAL_GPIO_Init+0x228>
 800140e:	2305      	movs	r3, #5
 8001410:	e008      	b.n	8001424 <HAL_GPIO_Init+0x228>
 8001412:	2304      	movs	r3, #4
 8001414:	e006      	b.n	8001424 <HAL_GPIO_Init+0x228>
 8001416:	2303      	movs	r3, #3
 8001418:	e004      	b.n	8001424 <HAL_GPIO_Init+0x228>
 800141a:	2302      	movs	r3, #2
 800141c:	e002      	b.n	8001424 <HAL_GPIO_Init+0x228>
 800141e:	2301      	movs	r3, #1
 8001420:	e000      	b.n	8001424 <HAL_GPIO_Init+0x228>
 8001422:	2300      	movs	r3, #0
 8001424:	69fa      	ldr	r2, [r7, #28]
 8001426:	f002 0203 	and.w	r2, r2, #3
 800142a:	0092      	lsls	r2, r2, #2
 800142c:	4093      	lsls	r3, r2
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4313      	orrs	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001434:	4935      	ldr	r1, [pc, #212]	; (800150c <HAL_GPIO_Init+0x310>)
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	089b      	lsrs	r3, r3, #2
 800143a:	3302      	adds	r3, #2
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001442:	4b3b      	ldr	r3, [pc, #236]	; (8001530 <HAL_GPIO_Init+0x334>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	43db      	mvns	r3, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4013      	ands	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	4313      	orrs	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001466:	4a32      	ldr	r2, [pc, #200]	; (8001530 <HAL_GPIO_Init+0x334>)
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800146c:	4b30      	ldr	r3, [pc, #192]	; (8001530 <HAL_GPIO_Init+0x334>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	43db      	mvns	r3, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4013      	ands	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d003      	beq.n	8001490 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	4313      	orrs	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001490:	4a27      	ldr	r2, [pc, #156]	; (8001530 <HAL_GPIO_Init+0x334>)
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001496:	4b26      	ldr	r3, [pc, #152]	; (8001530 <HAL_GPIO_Init+0x334>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	43db      	mvns	r3, r3
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	4013      	ands	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014ba:	4a1d      	ldr	r2, [pc, #116]	; (8001530 <HAL_GPIO_Init+0x334>)
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014c0:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <HAL_GPIO_Init+0x334>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	43db      	mvns	r3, r3
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4013      	ands	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d003      	beq.n	80014e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014e4:	4a12      	ldr	r2, [pc, #72]	; (8001530 <HAL_GPIO_Init+0x334>)
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3301      	adds	r3, #1
 80014ee:	61fb      	str	r3, [r7, #28]
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	2b0f      	cmp	r3, #15
 80014f4:	f67f ae90 	bls.w	8001218 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014f8:	bf00      	nop
 80014fa:	bf00      	nop
 80014fc:	3724      	adds	r7, #36	; 0x24
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	40023800 	.word	0x40023800
 800150c:	40013800 	.word	0x40013800
 8001510:	40020000 	.word	0x40020000
 8001514:	40020400 	.word	0x40020400
 8001518:	40020800 	.word	0x40020800
 800151c:	40020c00 	.word	0x40020c00
 8001520:	40021000 	.word	0x40021000
 8001524:	40021400 	.word	0x40021400
 8001528:	40021800 	.word	0x40021800
 800152c:	40021c00 	.word	0x40021c00
 8001530:	40013c00 	.word	0x40013c00

08001534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	807b      	strh	r3, [r7, #2]
 8001540:	4613      	mov	r3, r2
 8001542:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001544:	787b      	ldrb	r3, [r7, #1]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800154a:	887a      	ldrh	r2, [r7, #2]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001550:	e003      	b.n	800155a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001552:	887b      	ldrh	r3, [r7, #2]
 8001554:	041a      	lsls	r2, r3, #16
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	619a      	str	r2, [r3, #24]
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b084      	sub	sp, #16
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d101      	bne.n	8001578 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e034      	b.n	80015e2 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8001580:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f245 5255 	movw	r2, #21845	; 0x5555
 800158a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	6852      	ldr	r2, [r2, #4]
 8001594:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	6892      	ldr	r2, [r2, #8]
 800159e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80015a0:	f7ff fc7c 	bl	8000e9c <HAL_GetTick>
 80015a4:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80015a6:	e00f      	b.n	80015c8 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80015a8:	f7ff fc78 	bl	8000e9c <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b31      	cmp	r3, #49	; 0x31
 80015b4:	d908      	bls.n	80015c8 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	f003 0303 	and.w	r3, r3, #3
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e00c      	b.n	80015e2 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	f003 0303 	and.w	r3, r3, #3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1e8      	bne.n	80015a8 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80015de:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80015fa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
	...

0800160c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e267      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	2b00      	cmp	r3, #0
 8001628:	d075      	beq.n	8001716 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800162a:	4b88      	ldr	r3, [pc, #544]	; (800184c <HAL_RCC_OscConfig+0x240>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f003 030c 	and.w	r3, r3, #12
 8001632:	2b04      	cmp	r3, #4
 8001634:	d00c      	beq.n	8001650 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001636:	4b85      	ldr	r3, [pc, #532]	; (800184c <HAL_RCC_OscConfig+0x240>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800163e:	2b08      	cmp	r3, #8
 8001640:	d112      	bne.n	8001668 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001642:	4b82      	ldr	r3, [pc, #520]	; (800184c <HAL_RCC_OscConfig+0x240>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800164a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800164e:	d10b      	bne.n	8001668 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001650:	4b7e      	ldr	r3, [pc, #504]	; (800184c <HAL_RCC_OscConfig+0x240>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d05b      	beq.n	8001714 <HAL_RCC_OscConfig+0x108>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d157      	bne.n	8001714 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e242      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001670:	d106      	bne.n	8001680 <HAL_RCC_OscConfig+0x74>
 8001672:	4b76      	ldr	r3, [pc, #472]	; (800184c <HAL_RCC_OscConfig+0x240>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a75      	ldr	r2, [pc, #468]	; (800184c <HAL_RCC_OscConfig+0x240>)
 8001678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800167c:	6013      	str	r3, [r2, #0]
 800167e:	e01d      	b.n	80016bc <HAL_RCC_OscConfig+0xb0>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001688:	d10c      	bne.n	80016a4 <HAL_RCC_OscConfig+0x98>
 800168a:	4b70      	ldr	r3, [pc, #448]	; (800184c <HAL_RCC_OscConfig+0x240>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a6f      	ldr	r2, [pc, #444]	; (800184c <HAL_RCC_OscConfig+0x240>)
 8001690:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	4b6d      	ldr	r3, [pc, #436]	; (800184c <HAL_RCC_OscConfig+0x240>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a6c      	ldr	r2, [pc, #432]	; (800184c <HAL_RCC_OscConfig+0x240>)
 800169c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	e00b      	b.n	80016bc <HAL_RCC_OscConfig+0xb0>
 80016a4:	4b69      	ldr	r3, [pc, #420]	; (800184c <HAL_RCC_OscConfig+0x240>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a68      	ldr	r2, [pc, #416]	; (800184c <HAL_RCC_OscConfig+0x240>)
 80016aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ae:	6013      	str	r3, [r2, #0]
 80016b0:	4b66      	ldr	r3, [pc, #408]	; (800184c <HAL_RCC_OscConfig+0x240>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a65      	ldr	r2, [pc, #404]	; (800184c <HAL_RCC_OscConfig+0x240>)
 80016b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d013      	beq.n	80016ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c4:	f7ff fbea 	bl	8000e9c <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016cc:	f7ff fbe6 	bl	8000e9c <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b64      	cmp	r3, #100	; 0x64
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e207      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016de:	4b5b      	ldr	r3, [pc, #364]	; (800184c <HAL_RCC_OscConfig+0x240>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d0f0      	beq.n	80016cc <HAL_RCC_OscConfig+0xc0>
 80016ea:	e014      	b.n	8001716 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ec:	f7ff fbd6 	bl	8000e9c <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016f4:	f7ff fbd2 	bl	8000e9c <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b64      	cmp	r3, #100	; 0x64
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e1f3      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001706:	4b51      	ldr	r3, [pc, #324]	; (800184c <HAL_RCC_OscConfig+0x240>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1f0      	bne.n	80016f4 <HAL_RCC_OscConfig+0xe8>
 8001712:	e000      	b.n	8001716 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001714:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d063      	beq.n	80017ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001722:	4b4a      	ldr	r3, [pc, #296]	; (800184c <HAL_RCC_OscConfig+0x240>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 030c 	and.w	r3, r3, #12
 800172a:	2b00      	cmp	r3, #0
 800172c:	d00b      	beq.n	8001746 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800172e:	4b47      	ldr	r3, [pc, #284]	; (800184c <HAL_RCC_OscConfig+0x240>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001736:	2b08      	cmp	r3, #8
 8001738:	d11c      	bne.n	8001774 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800173a:	4b44      	ldr	r3, [pc, #272]	; (800184c <HAL_RCC_OscConfig+0x240>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d116      	bne.n	8001774 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001746:	4b41      	ldr	r3, [pc, #260]	; (800184c <HAL_RCC_OscConfig+0x240>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d005      	beq.n	800175e <HAL_RCC_OscConfig+0x152>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d001      	beq.n	800175e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e1c7      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800175e:	4b3b      	ldr	r3, [pc, #236]	; (800184c <HAL_RCC_OscConfig+0x240>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	4937      	ldr	r1, [pc, #220]	; (800184c <HAL_RCC_OscConfig+0x240>)
 800176e:	4313      	orrs	r3, r2
 8001770:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001772:	e03a      	b.n	80017ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d020      	beq.n	80017be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800177c:	4b34      	ldr	r3, [pc, #208]	; (8001850 <HAL_RCC_OscConfig+0x244>)
 800177e:	2201      	movs	r2, #1
 8001780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001782:	f7ff fb8b 	bl	8000e9c <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800178a:	f7ff fb87 	bl	8000e9c <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e1a8      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179c:	4b2b      	ldr	r3, [pc, #172]	; (800184c <HAL_RCC_OscConfig+0x240>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0f0      	beq.n	800178a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a8:	4b28      	ldr	r3, [pc, #160]	; (800184c <HAL_RCC_OscConfig+0x240>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	4925      	ldr	r1, [pc, #148]	; (800184c <HAL_RCC_OscConfig+0x240>)
 80017b8:	4313      	orrs	r3, r2
 80017ba:	600b      	str	r3, [r1, #0]
 80017bc:	e015      	b.n	80017ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017be:	4b24      	ldr	r3, [pc, #144]	; (8001850 <HAL_RCC_OscConfig+0x244>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c4:	f7ff fb6a 	bl	8000e9c <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017cc:	f7ff fb66 	bl	8000e9c <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e187      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017de:	4b1b      	ldr	r3, [pc, #108]	; (800184c <HAL_RCC_OscConfig+0x240>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f0      	bne.n	80017cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0308 	and.w	r3, r3, #8
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d036      	beq.n	8001864 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d016      	beq.n	800182c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017fe:	4b15      	ldr	r3, [pc, #84]	; (8001854 <HAL_RCC_OscConfig+0x248>)
 8001800:	2201      	movs	r2, #1
 8001802:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001804:	f7ff fb4a 	bl	8000e9c <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800180c:	f7ff fb46 	bl	8000e9c <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e167      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800181e:	4b0b      	ldr	r3, [pc, #44]	; (800184c <HAL_RCC_OscConfig+0x240>)
 8001820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d0f0      	beq.n	800180c <HAL_RCC_OscConfig+0x200>
 800182a:	e01b      	b.n	8001864 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800182c:	4b09      	ldr	r3, [pc, #36]	; (8001854 <HAL_RCC_OscConfig+0x248>)
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001832:	f7ff fb33 	bl	8000e9c <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001838:	e00e      	b.n	8001858 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800183a:	f7ff fb2f 	bl	8000e9c <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d907      	bls.n	8001858 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e150      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
 800184c:	40023800 	.word	0x40023800
 8001850:	42470000 	.word	0x42470000
 8001854:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001858:	4b88      	ldr	r3, [pc, #544]	; (8001a7c <HAL_RCC_OscConfig+0x470>)
 800185a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d1ea      	bne.n	800183a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	2b00      	cmp	r3, #0
 800186e:	f000 8097 	beq.w	80019a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001872:	2300      	movs	r3, #0
 8001874:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001876:	4b81      	ldr	r3, [pc, #516]	; (8001a7c <HAL_RCC_OscConfig+0x470>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d10f      	bne.n	80018a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	4b7d      	ldr	r3, [pc, #500]	; (8001a7c <HAL_RCC_OscConfig+0x470>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	4a7c      	ldr	r2, [pc, #496]	; (8001a7c <HAL_RCC_OscConfig+0x470>)
 800188c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001890:	6413      	str	r3, [r2, #64]	; 0x40
 8001892:	4b7a      	ldr	r3, [pc, #488]	; (8001a7c <HAL_RCC_OscConfig+0x470>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800189e:	2301      	movs	r3, #1
 80018a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a2:	4b77      	ldr	r3, [pc, #476]	; (8001a80 <HAL_RCC_OscConfig+0x474>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d118      	bne.n	80018e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ae:	4b74      	ldr	r3, [pc, #464]	; (8001a80 <HAL_RCC_OscConfig+0x474>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a73      	ldr	r2, [pc, #460]	; (8001a80 <HAL_RCC_OscConfig+0x474>)
 80018b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ba:	f7ff faef 	bl	8000e9c <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c2:	f7ff faeb 	bl	8000e9c <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e10c      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d4:	4b6a      	ldr	r3, [pc, #424]	; (8001a80 <HAL_RCC_OscConfig+0x474>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0f0      	beq.n	80018c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d106      	bne.n	80018f6 <HAL_RCC_OscConfig+0x2ea>
 80018e8:	4b64      	ldr	r3, [pc, #400]	; (8001a7c <HAL_RCC_OscConfig+0x470>)
 80018ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ec:	4a63      	ldr	r2, [pc, #396]	; (8001a7c <HAL_RCC_OscConfig+0x470>)
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	6713      	str	r3, [r2, #112]	; 0x70
 80018f4:	e01c      	b.n	8001930 <HAL_RCC_OscConfig+0x324>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	2b05      	cmp	r3, #5
 80018fc:	d10c      	bne.n	8001918 <HAL_RCC_OscConfig+0x30c>
 80018fe:	4b5f      	ldr	r3, [pc, #380]	; (8001a7c <HAL_RCC_OscConfig+0x470>)
 8001900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001902:	4a5e      	ldr	r2, [pc, #376]	; (8001a7c <HAL_RCC_OscConfig+0x470>)
 8001904:	f043 0304 	orr.w	r3, r3, #4
 8001908:	6713      	str	r3, [r2, #112]	; 0x70
 800190a:	4b5c      	ldr	r3, [pc, #368]	; (8001a7c <HAL_RCC_OscConfig+0x470>)
 800190c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800190e:	4a5b      	ldr	r2, [pc, #364]	; (8001a7c <HAL_RCC_OscConfig+0x470>)
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	6713      	str	r3, [r2, #112]	; 0x70
 8001916:	e00b      	b.n	8001930 <HAL_RCC_OscConfig+0x324>
 8001918:	4b58      	ldr	r3, [pc, #352]	; (8001a7c <HAL_RCC_OscConfig+0x470>)
 800191a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191c:	4a57      	ldr	r2, [pc, #348]	; (8001a7c <HAL_RCC_OscConfig+0x470>)
 800191e:	f023 0301 	bic.w	r3, r3, #1
 8001922:	6713      	str	r3, [r2, #112]	; 0x70
 8001924:	4b55      	ldr	r3, [pc, #340]	; (8001a7c <HAL_RCC_OscConfig+0x470>)
 8001926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001928:	4a54      	ldr	r2, [pc, #336]	; (8001a7c <HAL_RCC_OscConfig+0x470>)
 800192a:	f023 0304 	bic.w	r3, r3, #4
 800192e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d015      	beq.n	8001964 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001938:	f7ff fab0 	bl	8000e9c <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800193e:	e00a      	b.n	8001956 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001940:	f7ff faac 	bl	8000e9c <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	f241 3288 	movw	r2, #5000	; 0x1388
 800194e:	4293      	cmp	r3, r2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e0cb      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001956:	4b49      	ldr	r3, [pc, #292]	; (8001a7c <HAL_RCC_OscConfig+0x470>)
 8001958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d0ee      	beq.n	8001940 <HAL_RCC_OscConfig+0x334>
 8001962:	e014      	b.n	800198e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001964:	f7ff fa9a 	bl	8000e9c <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800196a:	e00a      	b.n	8001982 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800196c:	f7ff fa96 	bl	8000e9c <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	f241 3288 	movw	r2, #5000	; 0x1388
 800197a:	4293      	cmp	r3, r2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e0b5      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001982:	4b3e      	ldr	r3, [pc, #248]	; (8001a7c <HAL_RCC_OscConfig+0x470>)
 8001984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1ee      	bne.n	800196c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800198e:	7dfb      	ldrb	r3, [r7, #23]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d105      	bne.n	80019a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001994:	4b39      	ldr	r3, [pc, #228]	; (8001a7c <HAL_RCC_OscConfig+0x470>)
 8001996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001998:	4a38      	ldr	r2, [pc, #224]	; (8001a7c <HAL_RCC_OscConfig+0x470>)
 800199a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800199e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f000 80a1 	beq.w	8001aec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019aa:	4b34      	ldr	r3, [pc, #208]	; (8001a7c <HAL_RCC_OscConfig+0x470>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 030c 	and.w	r3, r3, #12
 80019b2:	2b08      	cmp	r3, #8
 80019b4:	d05c      	beq.n	8001a70 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d141      	bne.n	8001a42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019be:	4b31      	ldr	r3, [pc, #196]	; (8001a84 <HAL_RCC_OscConfig+0x478>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c4:	f7ff fa6a 	bl	8000e9c <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019cc:	f7ff fa66 	bl	8000e9c <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e087      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019de:	4b27      	ldr	r3, [pc, #156]	; (8001a7c <HAL_RCC_OscConfig+0x470>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1f0      	bne.n	80019cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69da      	ldr	r2, [r3, #28]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a1b      	ldr	r3, [r3, #32]
 80019f2:	431a      	orrs	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f8:	019b      	lsls	r3, r3, #6
 80019fa:	431a      	orrs	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a00:	085b      	lsrs	r3, r3, #1
 8001a02:	3b01      	subs	r3, #1
 8001a04:	041b      	lsls	r3, r3, #16
 8001a06:	431a      	orrs	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0c:	061b      	lsls	r3, r3, #24
 8001a0e:	491b      	ldr	r1, [pc, #108]	; (8001a7c <HAL_RCC_OscConfig+0x470>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a14:	4b1b      	ldr	r3, [pc, #108]	; (8001a84 <HAL_RCC_OscConfig+0x478>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1a:	f7ff fa3f 	bl	8000e9c <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a22:	f7ff fa3b 	bl	8000e9c <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e05c      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a34:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <HAL_RCC_OscConfig+0x470>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0f0      	beq.n	8001a22 <HAL_RCC_OscConfig+0x416>
 8001a40:	e054      	b.n	8001aec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a42:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <HAL_RCC_OscConfig+0x478>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a48:	f7ff fa28 	bl	8000e9c <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a50:	f7ff fa24 	bl	8000e9c <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e045      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a62:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_RCC_OscConfig+0x470>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f0      	bne.n	8001a50 <HAL_RCC_OscConfig+0x444>
 8001a6e:	e03d      	b.n	8001aec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d107      	bne.n	8001a88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e038      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40007000 	.word	0x40007000
 8001a84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a88:	4b1b      	ldr	r3, [pc, #108]	; (8001af8 <HAL_RCC_OscConfig+0x4ec>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d028      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d121      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d11a      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ab8:	4013      	ands	r3, r2
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001abe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d111      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ace:	085b      	lsrs	r3, r3, #1
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d107      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d001      	beq.n	8001aec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e000      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3718      	adds	r7, #24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40023800 	.word	0x40023800

08001afc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d101      	bne.n	8001b10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e0cc      	b.n	8001caa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b10:	4b68      	ldr	r3, [pc, #416]	; (8001cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d90c      	bls.n	8001b38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b1e:	4b65      	ldr	r3, [pc, #404]	; (8001cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b26:	4b63      	ldr	r3, [pc, #396]	; (8001cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d001      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e0b8      	b.n	8001caa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d020      	beq.n	8001b86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d005      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b50:	4b59      	ldr	r3, [pc, #356]	; (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	4a58      	ldr	r2, [pc, #352]	; (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0308 	and.w	r3, r3, #8
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d005      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b68:	4b53      	ldr	r3, [pc, #332]	; (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	4a52      	ldr	r2, [pc, #328]	; (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b74:	4b50      	ldr	r3, [pc, #320]	; (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	494d      	ldr	r1, [pc, #308]	; (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d044      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d107      	bne.n	8001baa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b9a:	4b47      	ldr	r3, [pc, #284]	; (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d119      	bne.n	8001bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e07f      	b.n	8001caa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d003      	beq.n	8001bba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bb6:	2b03      	cmp	r3, #3
 8001bb8:	d107      	bne.n	8001bca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bba:	4b3f      	ldr	r3, [pc, #252]	; (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d109      	bne.n	8001bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e06f      	b.n	8001caa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bca:	4b3b      	ldr	r3, [pc, #236]	; (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e067      	b.n	8001caa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bda:	4b37      	ldr	r3, [pc, #220]	; (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f023 0203 	bic.w	r2, r3, #3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	4934      	ldr	r1, [pc, #208]	; (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bec:	f7ff f956 	bl	8000e9c <HAL_GetTick>
 8001bf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf2:	e00a      	b.n	8001c0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf4:	f7ff f952 	bl	8000e9c <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e04f      	b.n	8001caa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c0a:	4b2b      	ldr	r3, [pc, #172]	; (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 020c 	and.w	r2, r3, #12
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d1eb      	bne.n	8001bf4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c1c:	4b25      	ldr	r3, [pc, #148]	; (8001cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d20c      	bcs.n	8001c44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2a:	4b22      	ldr	r3, [pc, #136]	; (8001cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	b2d2      	uxtb	r2, r2
 8001c30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c32:	4b20      	ldr	r3, [pc, #128]	; (8001cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d001      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e032      	b.n	8001caa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d008      	beq.n	8001c62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c50:	4b19      	ldr	r3, [pc, #100]	; (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	4916      	ldr	r1, [pc, #88]	; (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d009      	beq.n	8001c82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c6e:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	490e      	ldr	r1, [pc, #56]	; (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c82:	f000 f821 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 8001c86:	4602      	mov	r2, r0
 8001c88:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	091b      	lsrs	r3, r3, #4
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	490a      	ldr	r1, [pc, #40]	; (8001cbc <HAL_RCC_ClockConfig+0x1c0>)
 8001c94:	5ccb      	ldrb	r3, [r1, r3]
 8001c96:	fa22 f303 	lsr.w	r3, r2, r3
 8001c9a:	4a09      	ldr	r2, [pc, #36]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c9e:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff f8b6 	bl	8000e14 <HAL_InitTick>

  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40023c00 	.word	0x40023c00
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	08006f74 	.word	0x08006f74
 8001cc0:	20000000 	.word	0x20000000
 8001cc4:	20000008 	.word	0x20000008

08001cc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ccc:	b090      	sub	sp, #64	; 0x40
 8001cce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	637b      	str	r3, [r7, #52]	; 0x34
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cd8:	2300      	movs	r3, #0
 8001cda:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ce0:	4b59      	ldr	r3, [pc, #356]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f003 030c 	and.w	r3, r3, #12
 8001ce8:	2b08      	cmp	r3, #8
 8001cea:	d00d      	beq.n	8001d08 <HAL_RCC_GetSysClockFreq+0x40>
 8001cec:	2b08      	cmp	r3, #8
 8001cee:	f200 80a1 	bhi.w	8001e34 <HAL_RCC_GetSysClockFreq+0x16c>
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d002      	beq.n	8001cfc <HAL_RCC_GetSysClockFreq+0x34>
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	d003      	beq.n	8001d02 <HAL_RCC_GetSysClockFreq+0x3a>
 8001cfa:	e09b      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cfc:	4b53      	ldr	r3, [pc, #332]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x184>)
 8001cfe:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001d00:	e09b      	b.n	8001e3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d02:	4b53      	ldr	r3, [pc, #332]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d04:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d06:	e098      	b.n	8001e3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d08:	4b4f      	ldr	r3, [pc, #316]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d10:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d12:	4b4d      	ldr	r3, [pc, #308]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d028      	beq.n	8001d70 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d1e:	4b4a      	ldr	r3, [pc, #296]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	099b      	lsrs	r3, r3, #6
 8001d24:	2200      	movs	r2, #0
 8001d26:	623b      	str	r3, [r7, #32]
 8001d28:	627a      	str	r2, [r7, #36]	; 0x24
 8001d2a:	6a3b      	ldr	r3, [r7, #32]
 8001d2c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001d30:	2100      	movs	r1, #0
 8001d32:	4b47      	ldr	r3, [pc, #284]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d34:	fb03 f201 	mul.w	r2, r3, r1
 8001d38:	2300      	movs	r3, #0
 8001d3a:	fb00 f303 	mul.w	r3, r0, r3
 8001d3e:	4413      	add	r3, r2
 8001d40:	4a43      	ldr	r2, [pc, #268]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d42:	fba0 1202 	umull	r1, r2, r0, r2
 8001d46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d48:	460a      	mov	r2, r1
 8001d4a:	62ba      	str	r2, [r7, #40]	; 0x28
 8001d4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d4e:	4413      	add	r3, r2
 8001d50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d54:	2200      	movs	r2, #0
 8001d56:	61bb      	str	r3, [r7, #24]
 8001d58:	61fa      	str	r2, [r7, #28]
 8001d5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d5e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d62:	f7fe fa35 	bl	80001d0 <__aeabi_uldivmod>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d6e:	e053      	b.n	8001e18 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d70:	4b35      	ldr	r3, [pc, #212]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	099b      	lsrs	r3, r3, #6
 8001d76:	2200      	movs	r2, #0
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	617a      	str	r2, [r7, #20]
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001d82:	f04f 0b00 	mov.w	fp, #0
 8001d86:	4652      	mov	r2, sl
 8001d88:	465b      	mov	r3, fp
 8001d8a:	f04f 0000 	mov.w	r0, #0
 8001d8e:	f04f 0100 	mov.w	r1, #0
 8001d92:	0159      	lsls	r1, r3, #5
 8001d94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d98:	0150      	lsls	r0, r2, #5
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	ebb2 080a 	subs.w	r8, r2, sl
 8001da2:	eb63 090b 	sbc.w	r9, r3, fp
 8001da6:	f04f 0200 	mov.w	r2, #0
 8001daa:	f04f 0300 	mov.w	r3, #0
 8001dae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001db2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001db6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001dba:	ebb2 0408 	subs.w	r4, r2, r8
 8001dbe:	eb63 0509 	sbc.w	r5, r3, r9
 8001dc2:	f04f 0200 	mov.w	r2, #0
 8001dc6:	f04f 0300 	mov.w	r3, #0
 8001dca:	00eb      	lsls	r3, r5, #3
 8001dcc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dd0:	00e2      	lsls	r2, r4, #3
 8001dd2:	4614      	mov	r4, r2
 8001dd4:	461d      	mov	r5, r3
 8001dd6:	eb14 030a 	adds.w	r3, r4, sl
 8001dda:	603b      	str	r3, [r7, #0]
 8001ddc:	eb45 030b 	adc.w	r3, r5, fp
 8001de0:	607b      	str	r3, [r7, #4]
 8001de2:	f04f 0200 	mov.w	r2, #0
 8001de6:	f04f 0300 	mov.w	r3, #0
 8001dea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dee:	4629      	mov	r1, r5
 8001df0:	028b      	lsls	r3, r1, #10
 8001df2:	4621      	mov	r1, r4
 8001df4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001df8:	4621      	mov	r1, r4
 8001dfa:	028a      	lsls	r2, r1, #10
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	4619      	mov	r1, r3
 8001e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e02:	2200      	movs	r2, #0
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	60fa      	str	r2, [r7, #12]
 8001e08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e0c:	f7fe f9e0 	bl	80001d0 <__aeabi_uldivmod>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	4613      	mov	r3, r2
 8001e16:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e18:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	0c1b      	lsrs	r3, r3, #16
 8001e1e:	f003 0303 	and.w	r3, r3, #3
 8001e22:	3301      	adds	r3, #1
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001e28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e30:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e32:	e002      	b.n	8001e3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e34:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x184>)
 8001e36:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3740      	adds	r7, #64	; 0x40
 8001e40:	46bd      	mov	sp, r7
 8001e42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e46:	bf00      	nop
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	00f42400 	.word	0x00f42400
 8001e50:	017d7840 	.word	0x017d7840

08001e54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e58:	4b03      	ldr	r3, [pc, #12]	; (8001e68 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	20000000 	.word	0x20000000

08001e6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e70:	f7ff fff0 	bl	8001e54 <HAL_RCC_GetHCLKFreq>
 8001e74:	4602      	mov	r2, r0
 8001e76:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	0a9b      	lsrs	r3, r3, #10
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	4903      	ldr	r1, [pc, #12]	; (8001e90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e82:	5ccb      	ldrb	r3, [r1, r3]
 8001e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	08006f84 	.word	0x08006f84

08001e94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e98:	f7ff ffdc 	bl	8001e54 <HAL_RCC_GetHCLKFreq>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	0b5b      	lsrs	r3, r3, #13
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	4903      	ldr	r1, [pc, #12]	; (8001eb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eaa:	5ccb      	ldrb	r3, [r1, r3]
 8001eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	08006f84 	.word	0x08006f84

08001ebc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e07b      	b.n	8001fc6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d108      	bne.n	8001ee8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ede:	d009      	beq.n	8001ef4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	61da      	str	r2, [r3, #28]
 8001ee6:	e005      	b.n	8001ef4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d106      	bne.n	8001f14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7fe fd94 	bl	8000a3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2202      	movs	r2, #2
 8001f18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	431a      	orrs	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f64:	431a      	orrs	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f78:	ea42 0103 	orr.w	r1, r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f80:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	0c1b      	lsrs	r3, r3, #16
 8001f92:	f003 0104 	and.w	r1, r3, #4
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9a:	f003 0210 	and.w	r2, r3, #16
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	69da      	ldr	r2, [r3, #28]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fb4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b087      	sub	sp, #28
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
 8001fdc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d101      	bne.n	8001ff0 <HAL_SPI_TransmitReceive_IT+0x20>
 8001fec:	2302      	movs	r3, #2
 8001fee:	e075      	b.n	80020dc <HAL_SPI_TransmitReceive_IT+0x10c>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ffe:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002006:	7dbb      	ldrb	r3, [r7, #22]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d00d      	beq.n	8002028 <HAL_SPI_TransmitReceive_IT+0x58>
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002012:	d106      	bne.n	8002022 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d102      	bne.n	8002022 <HAL_SPI_TransmitReceive_IT+0x52>
 800201c:	7dbb      	ldrb	r3, [r7, #22]
 800201e:	2b04      	cmp	r3, #4
 8002020:	d002      	beq.n	8002028 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8002022:	2302      	movs	r3, #2
 8002024:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002026:	e054      	b.n	80020d2 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d005      	beq.n	800203a <HAL_SPI_TransmitReceive_IT+0x6a>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d002      	beq.n	800203a <HAL_SPI_TransmitReceive_IT+0x6a>
 8002034:	887b      	ldrh	r3, [r7, #2]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d102      	bne.n	8002040 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800203e:	e048      	b.n	80020d2 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b04      	cmp	r3, #4
 800204a:	d003      	beq.n	8002054 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2205      	movs	r2, #5
 8002050:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2200      	movs	r2, #0
 8002058:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	68ba      	ldr	r2, [r7, #8]
 800205e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	887a      	ldrh	r2, [r7, #2]
 8002064:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	887a      	ldrh	r2, [r7, #2]
 800206a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	887a      	ldrh	r2, [r7, #2]
 8002076:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	887a      	ldrh	r2, [r7, #2]
 800207c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d006      	beq.n	8002094 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	4a17      	ldr	r2, [pc, #92]	; (80020e8 <HAL_SPI_TransmitReceive_IT+0x118>)
 800208a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4a17      	ldr	r2, [pc, #92]	; (80020ec <HAL_SPI_TransmitReceive_IT+0x11c>)
 8002090:	645a      	str	r2, [r3, #68]	; 0x44
 8002092:	e005      	b.n	80020a0 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4a16      	ldr	r2, [pc, #88]	; (80020f0 <HAL_SPI_TransmitReceive_IT+0x120>)
 8002098:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	4a15      	ldr	r2, [pc, #84]	; (80020f4 <HAL_SPI_TransmitReceive_IT+0x124>)
 800209e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80020ae:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ba:	2b40      	cmp	r3, #64	; 0x40
 80020bc:	d008      	beq.n	80020d0 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	e000      	b.n	80020d2 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 80020d0:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80020da:	7dfb      	ldrb	r3, [r7, #23]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	371c      	adds	r7, #28
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	0800240d 	.word	0x0800240d
 80020ec:	0800246d 	.word	0x0800246d
 80020f0:	08002349 	.word	0x08002349
 80020f4:	080023ad 	.word	0x080023ad

080020f8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b088      	sub	sp, #32
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	099b      	lsrs	r3, r3, #6
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10f      	bne.n	800213c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00a      	beq.n	800213c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	099b      	lsrs	r3, r3, #6
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	d004      	beq.n	800213c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	4798      	blx	r3
    return;
 800213a:	e0d7      	b.n	80022ec <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	085b      	lsrs	r3, r3, #1
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00a      	beq.n	800215e <HAL_SPI_IRQHandler+0x66>
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	09db      	lsrs	r3, r3, #7
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	2b00      	cmp	r3, #0
 8002152:	d004      	beq.n	800215e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	4798      	blx	r3
    return;
 800215c:	e0c6      	b.n	80022ec <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	095b      	lsrs	r3, r3, #5
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10c      	bne.n	8002184 <HAL_SPI_IRQHandler+0x8c>
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	099b      	lsrs	r3, r3, #6
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d106      	bne.n	8002184 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	0a1b      	lsrs	r3, r3, #8
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 80b4 	beq.w	80022ec <HAL_SPI_IRQHandler+0x1f4>
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	095b      	lsrs	r3, r3, #5
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	2b00      	cmp	r3, #0
 800218e:	f000 80ad 	beq.w	80022ec <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	099b      	lsrs	r3, r3, #6
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b00      	cmp	r3, #0
 800219c:	d023      	beq.n	80021e6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b03      	cmp	r3, #3
 80021a8:	d011      	beq.n	80021ce <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ae:	f043 0204 	orr.w	r2, r3, #4
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	617b      	str	r3, [r7, #20]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	617b      	str	r3, [r7, #20]
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	e00b      	b.n	80021e6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80021ce:	2300      	movs	r3, #0
 80021d0:	613b      	str	r3, [r7, #16]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	613b      	str	r3, [r7, #16]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	613b      	str	r3, [r7, #16]
 80021e2:	693b      	ldr	r3, [r7, #16]
        return;
 80021e4:	e082      	b.n	80022ec <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	095b      	lsrs	r3, r3, #5
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d014      	beq.n	800221c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f6:	f043 0201 	orr.w	r2, r3, #1
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80021fe:	2300      	movs	r3, #0
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	0a1b      	lsrs	r3, r3, #8
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00c      	beq.n	8002242 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800222c:	f043 0208 	orr.w	r2, r3, #8
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002234:	2300      	movs	r3, #0
 8002236:	60bb      	str	r3, [r7, #8]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	60bb      	str	r3, [r7, #8]
 8002240:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002246:	2b00      	cmp	r3, #0
 8002248:	d04f      	beq.n	80022ea <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002258:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d104      	bne.n	8002276 <HAL_SPI_IRQHandler+0x17e>
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d034      	beq.n	80022e0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 0203 	bic.w	r2, r2, #3
 8002284:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228a:	2b00      	cmp	r3, #0
 800228c:	d011      	beq.n	80022b2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002292:	4a18      	ldr	r2, [pc, #96]	; (80022f4 <HAL_SPI_IRQHandler+0x1fc>)
 8002294:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800229a:	4618      	mov	r0, r3
 800229c:	f7fe ff8b 	bl	80011b6 <HAL_DMA_Abort_IT>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d005      	beq.n	80022b2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d016      	beq.n	80022e8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022be:	4a0d      	ldr	r2, [pc, #52]	; (80022f4 <HAL_SPI_IRQHandler+0x1fc>)
 80022c0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7fe ff75 	bl	80011b6 <HAL_DMA_Abort_IT>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00a      	beq.n	80022e8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80022de:	e003      	b.n	80022e8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 f813 	bl	800230c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80022e6:	e000      	b.n	80022ea <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80022e8:	bf00      	nop
    return;
 80022ea:	bf00      	nop
  }
}
 80022ec:	3720      	adds	r7, #32
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	08002321 	.word	0x08002321

080022f8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f7ff ffe6 	bl	800230c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002340:	bf00      	nop
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f103 020c 	add.w	r2, r3, #12
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800235c:	7812      	ldrb	r2, [r2, #0]
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002366:	1c5a      	adds	r2, r3, #1
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002370:	b29b      	uxth	r3, r3
 8002372:	3b01      	subs	r3, #1
 8002374:	b29a      	uxth	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800237e:	b29b      	uxth	r3, r3
 8002380:	2b00      	cmp	r3, #0
 8002382:	d10f      	bne.n	80023a4 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002392:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002398:	b29b      	uxth	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d102      	bne.n	80023a4 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 f95e 	bl	8002660 <SPI_CloseRxTx_ISR>
    }
  }
}
 80023a4:	bf00      	nop
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	330c      	adds	r3, #12
 80023be:	7812      	ldrb	r2, [r2, #0]
 80023c0:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	1c5a      	adds	r2, r3, #1
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	3b01      	subs	r3, #1
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023de:	b29b      	uxth	r3, r3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d10f      	bne.n	8002404 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023f2:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d102      	bne.n	8002404 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 f92e 	bl	8002660 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002404:	bf00      	nop
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241e:	b292      	uxth	r2, r2
 8002420:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002426:	1c9a      	adds	r2, r3, #2
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002430:	b29b      	uxth	r3, r3
 8002432:	3b01      	subs	r3, #1
 8002434:	b29a      	uxth	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800243e:	b29b      	uxth	r3, r3
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10f      	bne.n	8002464 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002452:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002458:	b29b      	uxth	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d102      	bne.n	8002464 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f8fe 	bl	8002660 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002464:	bf00      	nop
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002478:	881a      	ldrh	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002484:	1c9a      	adds	r2, r3, #2
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800248e:	b29b      	uxth	r3, r3
 8002490:	3b01      	subs	r3, #1
 8002492:	b29a      	uxth	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800249c:	b29b      	uxth	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10f      	bne.n	80024c2 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024b0:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d102      	bne.n	80024c2 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 f8cf 	bl	8002660 <SPI_CloseRxTx_ISR>
    }
  }
}
 80024c2:	bf00      	nop
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b088      	sub	sp, #32
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	603b      	str	r3, [r7, #0]
 80024d8:	4613      	mov	r3, r2
 80024da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80024dc:	f7fe fcde 	bl	8000e9c <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e4:	1a9b      	subs	r3, r3, r2
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	4413      	add	r3, r2
 80024ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80024ec:	f7fe fcd6 	bl	8000e9c <HAL_GetTick>
 80024f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80024f2:	4b39      	ldr	r3, [pc, #228]	; (80025d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	015b      	lsls	r3, r3, #5
 80024f8:	0d1b      	lsrs	r3, r3, #20
 80024fa:	69fa      	ldr	r2, [r7, #28]
 80024fc:	fb02 f303 	mul.w	r3, r2, r3
 8002500:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002502:	e054      	b.n	80025ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250a:	d050      	beq.n	80025ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800250c:	f7fe fcc6 	bl	8000e9c <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	69fa      	ldr	r2, [r7, #28]
 8002518:	429a      	cmp	r2, r3
 800251a:	d902      	bls.n	8002522 <SPI_WaitFlagStateUntilTimeout+0x56>
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d13d      	bne.n	800259e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002530:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800253a:	d111      	bne.n	8002560 <SPI_WaitFlagStateUntilTimeout+0x94>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002544:	d004      	beq.n	8002550 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800254e:	d107      	bne.n	8002560 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800255e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002564:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002568:	d10f      	bne.n	800258a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002588:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e017      	b.n	80025ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d101      	bne.n	80025a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80025a4:	2300      	movs	r3, #0
 80025a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	3b01      	subs	r3, #1
 80025ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	4013      	ands	r3, r2
 80025b8:	68ba      	ldr	r2, [r7, #8]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	bf0c      	ite	eq
 80025be:	2301      	moveq	r3, #1
 80025c0:	2300      	movne	r3, #0
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	461a      	mov	r2, r3
 80025c6:	79fb      	ldrb	r3, [r7, #7]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d19b      	bne.n	8002504 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3720      	adds	r7, #32
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	20000000 	.word	0x20000000

080025dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b088      	sub	sp, #32
 80025e0:	af02      	add	r7, sp, #8
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80025e8:	4b1b      	ldr	r3, [pc, #108]	; (8002658 <SPI_EndRxTxTransaction+0x7c>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a1b      	ldr	r2, [pc, #108]	; (800265c <SPI_EndRxTxTransaction+0x80>)
 80025ee:	fba2 2303 	umull	r2, r3, r2, r3
 80025f2:	0d5b      	lsrs	r3, r3, #21
 80025f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025f8:	fb02 f303 	mul.w	r3, r2, r3
 80025fc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002606:	d112      	bne.n	800262e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	2200      	movs	r2, #0
 8002610:	2180      	movs	r1, #128	; 0x80
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f7ff ff5a 	bl	80024cc <SPI_WaitFlagStateUntilTimeout>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d016      	beq.n	800264c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002622:	f043 0220 	orr.w	r2, r3, #32
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e00f      	b.n	800264e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00a      	beq.n	800264a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	3b01      	subs	r3, #1
 8002638:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002644:	2b80      	cmp	r3, #128	; 0x80
 8002646:	d0f2      	beq.n	800262e <SPI_EndRxTxTransaction+0x52>
 8002648:	e000      	b.n	800264c <SPI_EndRxTxTransaction+0x70>
        break;
 800264a:	bf00      	nop
  }

  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3718      	adds	r7, #24
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	20000000 	.word	0x20000000
 800265c:	165e9f81 	.word	0x165e9f81

08002660 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8002668:	4b35      	ldr	r3, [pc, #212]	; (8002740 <SPI_CloseRxTx_ISR+0xe0>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a35      	ldr	r2, [pc, #212]	; (8002744 <SPI_CloseRxTx_ISR+0xe4>)
 800266e:	fba2 2303 	umull	r2, r3, r2, r3
 8002672:	0a5b      	lsrs	r3, r3, #9
 8002674:	2264      	movs	r2, #100	; 0x64
 8002676:	fb02 f303 	mul.w	r3, r2, r3
 800267a:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800267c:	f7fe fc0e 	bl	8000e9c <HAL_GetTick>
 8002680:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 0220 	bic.w	r2, r2, #32
 8002690:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d106      	bne.n	80026a6 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269c:	f043 0220 	orr.w	r2, r3, #32
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80026a4:	e009      	b.n	80026ba <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	3b01      	subs	r3, #1
 80026aa:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0eb      	beq.n	8002692 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	2164      	movs	r1, #100	; 0x64
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7ff ff8c 	bl	80025dc <SPI_EndRxTxTransaction>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d005      	beq.n	80026d6 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ce:	f043 0220 	orr.w	r2, r3, #32
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10a      	bne.n	80026f4 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026de:	2300      	movs	r3, #0
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d115      	bne.n	8002728 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b04      	cmp	r3, #4
 8002706:	d107      	bne.n	8002718 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f7ff fdf1 	bl	80022f8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002716:	e00e      	b.n	8002736 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f7fe f91d 	bl	8000960 <HAL_SPI_TxRxCpltCallback>
}
 8002726:	e006      	b.n	8002736 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f7ff fdeb 	bl	800230c <HAL_SPI_ErrorCallback>
}
 8002736:	bf00      	nop
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	20000000 	.word	0x20000000
 8002744:	057619f1 	.word	0x057619f1

08002748 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e03f      	b.n	80027da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d106      	bne.n	8002774 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f7fe f9b4 	bl	8000adc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2224      	movs	r2, #36	; 0x24
 8002778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800278a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 fd19 	bl	80031c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	691a      	ldr	r2, [r3, #16]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	695a      	ldr	r2, [r3, #20]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68da      	ldr	r2, [r3, #12]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2220      	movs	r2, #32
 80027cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2220      	movs	r2, #32
 80027d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b085      	sub	sp, #20
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	60f8      	str	r0, [r7, #12]
 80027ea:	60b9      	str	r1, [r7, #8]
 80027ec:	4613      	mov	r3, r2
 80027ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b20      	cmp	r3, #32
 80027fa:	d130      	bne.n	800285e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d002      	beq.n	8002808 <HAL_UART_Transmit_IT+0x26>
 8002802:	88fb      	ldrh	r3, [r7, #6]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e029      	b.n	8002860 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002812:	2b01      	cmp	r3, #1
 8002814:	d101      	bne.n	800281a <HAL_UART_Transmit_IT+0x38>
 8002816:	2302      	movs	r3, #2
 8002818:	e022      	b.n	8002860 <HAL_UART_Transmit_IT+0x7e>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	68ba      	ldr	r2, [r7, #8]
 8002826:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	88fa      	ldrh	r2, [r7, #6]
 800282c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	88fa      	ldrh	r2, [r7, #6]
 8002832:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2221      	movs	r2, #33	; 0x21
 800283e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68da      	ldr	r2, [r3, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002858:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800285a:	2300      	movs	r3, #0
 800285c:	e000      	b.n	8002860 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800285e:	2302      	movs	r3, #2
  }
}
 8002860:	4618      	mov	r0, r3
 8002862:	3714      	adds	r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	4613      	mov	r3, r2
 8002878:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b20      	cmp	r3, #32
 8002884:	d11d      	bne.n	80028c2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d002      	beq.n	8002892 <HAL_UART_Receive_IT+0x26>
 800288c:	88fb      	ldrh	r3, [r7, #6]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e016      	b.n	80028c4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800289c:	2b01      	cmp	r3, #1
 800289e:	d101      	bne.n	80028a4 <HAL_UART_Receive_IT+0x38>
 80028a0:	2302      	movs	r3, #2
 80028a2:	e00f      	b.n	80028c4 <HAL_UART_Receive_IT+0x58>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80028b2:	88fb      	ldrh	r3, [r7, #6]
 80028b4:	461a      	mov	r2, r3
 80028b6:	68b9      	ldr	r1, [r7, #8]
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 faab 	bl	8002e14 <UART_Start_Receive_IT>
 80028be:	4603      	mov	r3, r0
 80028c0:	e000      	b.n	80028c4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80028c2:	2302      	movs	r3, #2
  }
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b0ba      	sub	sp, #232	; 0xe8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80028f2:	2300      	movs	r3, #0
 80028f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80028f8:	2300      	movs	r3, #0
 80028fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80028fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002902:	f003 030f 	and.w	r3, r3, #15
 8002906:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800290a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10f      	bne.n	8002932 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002916:	f003 0320 	and.w	r3, r3, #32
 800291a:	2b00      	cmp	r3, #0
 800291c:	d009      	beq.n	8002932 <HAL_UART_IRQHandler+0x66>
 800291e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002922:	f003 0320 	and.w	r3, r3, #32
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 fb8f 	bl	800304e <UART_Receive_IT>
      return;
 8002930:	e256      	b.n	8002de0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002932:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002936:	2b00      	cmp	r3, #0
 8002938:	f000 80de 	beq.w	8002af8 <HAL_UART_IRQHandler+0x22c>
 800293c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b00      	cmp	r3, #0
 8002946:	d106      	bne.n	8002956 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800294c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 80d1 	beq.w	8002af8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00b      	beq.n	800297a <HAL_UART_IRQHandler+0xae>
 8002962:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296a:	2b00      	cmp	r3, #0
 800296c:	d005      	beq.n	800297a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	f043 0201 	orr.w	r2, r3, #1
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800297a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800297e:	f003 0304 	and.w	r3, r3, #4
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00b      	beq.n	800299e <HAL_UART_IRQHandler+0xd2>
 8002986:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d005      	beq.n	800299e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	f043 0202 	orr.w	r2, r3, #2
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800299e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00b      	beq.n	80029c2 <HAL_UART_IRQHandler+0xf6>
 80029aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d005      	beq.n	80029c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	f043 0204 	orr.w	r2, r3, #4
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80029c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029c6:	f003 0308 	and.w	r3, r3, #8
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d011      	beq.n	80029f2 <HAL_UART_IRQHandler+0x126>
 80029ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029d2:	f003 0320 	and.w	r3, r3, #32
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d105      	bne.n	80029e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80029da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d005      	beq.n	80029f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	f043 0208 	orr.w	r2, r3, #8
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 81ed 	beq.w	8002dd6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a00:	f003 0320 	and.w	r3, r3, #32
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d008      	beq.n	8002a1a <HAL_UART_IRQHandler+0x14e>
 8002a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a0c:	f003 0320 	and.w	r3, r3, #32
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d002      	beq.n	8002a1a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 fb1a 	bl	800304e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a24:	2b40      	cmp	r3, #64	; 0x40
 8002a26:	bf0c      	ite	eq
 8002a28:	2301      	moveq	r3, #1
 8002a2a:	2300      	movne	r3, #0
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d103      	bne.n	8002a46 <HAL_UART_IRQHandler+0x17a>
 8002a3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d04f      	beq.n	8002ae6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 fa22 	bl	8002e90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a56:	2b40      	cmp	r3, #64	; 0x40
 8002a58:	d141      	bne.n	8002ade <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	3314      	adds	r3, #20
 8002a60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a68:	e853 3f00 	ldrex	r3, [r3]
 8002a6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002a70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	3314      	adds	r3, #20
 8002a82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002a86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002a8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002a92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002a96:	e841 2300 	strex	r3, r2, [r1]
 8002a9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002a9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1d9      	bne.n	8002a5a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d013      	beq.n	8002ad6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab2:	4a7d      	ldr	r2, [pc, #500]	; (8002ca8 <HAL_UART_IRQHandler+0x3dc>)
 8002ab4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fe fb7b 	bl	80011b6 <HAL_DMA_Abort_IT>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d016      	beq.n	8002af4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ad0:	4610      	mov	r0, r2
 8002ad2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ad4:	e00e      	b.n	8002af4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f986 	bl	8002de8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002adc:	e00a      	b.n	8002af4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f982 	bl	8002de8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ae4:	e006      	b.n	8002af4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f97e 	bl	8002de8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002af2:	e170      	b.n	8002dd6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002af4:	bf00      	nop
    return;
 8002af6:	e16e      	b.n	8002dd6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	f040 814a 	bne.w	8002d96 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b06:	f003 0310 	and.w	r3, r3, #16
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 8143 	beq.w	8002d96 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b14:	f003 0310 	and.w	r3, r3, #16
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 813c 	beq.w	8002d96 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60bb      	str	r3, [r7, #8]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	60bb      	str	r3, [r7, #8]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	60bb      	str	r3, [r7, #8]
 8002b32:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b3e:	2b40      	cmp	r3, #64	; 0x40
 8002b40:	f040 80b4 	bne.w	8002cac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002b50:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 8140 	beq.w	8002dda <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b62:	429a      	cmp	r2, r3
 8002b64:	f080 8139 	bcs.w	8002dda <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b6e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b7a:	f000 8088 	beq.w	8002c8e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	330c      	adds	r3, #12
 8002b84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b8c:	e853 3f00 	ldrex	r3, [r3]
 8002b90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002b94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	330c      	adds	r3, #12
 8002ba6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002baa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002bae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bb2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002bb6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002bba:	e841 2300 	strex	r3, r2, [r1]
 8002bbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002bc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1d9      	bne.n	8002b7e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	3314      	adds	r3, #20
 8002bd0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bd4:	e853 3f00 	ldrex	r3, [r3]
 8002bd8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002bda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bdc:	f023 0301 	bic.w	r3, r3, #1
 8002be0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	3314      	adds	r3, #20
 8002bea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002bee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002bf2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002bf6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002bfa:	e841 2300 	strex	r3, r2, [r1]
 8002bfe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002c00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1e1      	bne.n	8002bca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	3314      	adds	r3, #20
 8002c0c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c10:	e853 3f00 	ldrex	r3, [r3]
 8002c14:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002c16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	3314      	adds	r3, #20
 8002c26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002c2a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002c2c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c2e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002c30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c32:	e841 2300 	strex	r3, r2, [r1]
 8002c36:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002c38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1e3      	bne.n	8002c06 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2220      	movs	r2, #32
 8002c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	330c      	adds	r3, #12
 8002c52:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c56:	e853 3f00 	ldrex	r3, [r3]
 8002c5a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002c5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c5e:	f023 0310 	bic.w	r3, r3, #16
 8002c62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	330c      	adds	r3, #12
 8002c6c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002c70:	65ba      	str	r2, [r7, #88]	; 0x58
 8002c72:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c76:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c78:	e841 2300 	strex	r3, r2, [r1]
 8002c7c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002c7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1e3      	bne.n	8002c4c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7fe fa24 	bl	80010d6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f8ac 	bl	8002dfc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ca4:	e099      	b.n	8002dda <HAL_UART_IRQHandler+0x50e>
 8002ca6:	bf00      	nop
 8002ca8:	08002f57 	.word	0x08002f57
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 808b 	beq.w	8002dde <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002cc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f000 8086 	beq.w	8002dde <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	330c      	adds	r3, #12
 8002cd8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cdc:	e853 3f00 	ldrex	r3, [r3]
 8002ce0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ce8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	330c      	adds	r3, #12
 8002cf2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002cf6:	647a      	str	r2, [r7, #68]	; 0x44
 8002cf8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cfa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002cfc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cfe:	e841 2300 	strex	r3, r2, [r1]
 8002d02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1e3      	bne.n	8002cd2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	3314      	adds	r3, #20
 8002d10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d14:	e853 3f00 	ldrex	r3, [r3]
 8002d18:	623b      	str	r3, [r7, #32]
   return(result);
 8002d1a:	6a3b      	ldr	r3, [r7, #32]
 8002d1c:	f023 0301 	bic.w	r3, r3, #1
 8002d20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	3314      	adds	r3, #20
 8002d2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002d2e:	633a      	str	r2, [r7, #48]	; 0x30
 8002d30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d36:	e841 2300 	strex	r3, r2, [r1]
 8002d3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1e3      	bne.n	8002d0a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2220      	movs	r2, #32
 8002d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	330c      	adds	r3, #12
 8002d56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	e853 3f00 	ldrex	r3, [r3]
 8002d5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f023 0310 	bic.w	r3, r3, #16
 8002d66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	330c      	adds	r3, #12
 8002d70:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002d74:	61fa      	str	r2, [r7, #28]
 8002d76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d78:	69b9      	ldr	r1, [r7, #24]
 8002d7a:	69fa      	ldr	r2, [r7, #28]
 8002d7c:	e841 2300 	strex	r3, r2, [r1]
 8002d80:	617b      	str	r3, [r7, #20]
   return(result);
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1e3      	bne.n	8002d50 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f834 	bl	8002dfc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d94:	e023      	b.n	8002dde <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d009      	beq.n	8002db6 <HAL_UART_IRQHandler+0x4ea>
 8002da2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f8e5 	bl	8002f7e <UART_Transmit_IT>
    return;
 8002db4:	e014      	b.n	8002de0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00e      	beq.n	8002de0 <HAL_UART_IRQHandler+0x514>
 8002dc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d008      	beq.n	8002de0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f925 	bl	800301e <UART_EndTransmit_IT>
    return;
 8002dd4:	e004      	b.n	8002de0 <HAL_UART_IRQHandler+0x514>
    return;
 8002dd6:	bf00      	nop
 8002dd8:	e002      	b.n	8002de0 <HAL_UART_IRQHandler+0x514>
      return;
 8002dda:	bf00      	nop
 8002ddc:	e000      	b.n	8002de0 <HAL_UART_IRQHandler+0x514>
      return;
 8002dde:	bf00      	nop
  }
}
 8002de0:	37e8      	adds	r7, #232	; 0xe8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop

08002de8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	460b      	mov	r3, r1
 8002e06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	68ba      	ldr	r2, [r7, #8]
 8002e26:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	88fa      	ldrh	r2, [r7, #6]
 8002e2c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	88fa      	ldrh	r2, [r7, #6]
 8002e32:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2222      	movs	r2, #34	; 0x22
 8002e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d007      	beq.n	8002e62 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68da      	ldr	r2, [r3, #12]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e60:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	695a      	ldr	r2, [r3, #20]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f042 0201 	orr.w	r2, r2, #1
 8002e70:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68da      	ldr	r2, [r3, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f042 0220 	orr.w	r2, r2, #32
 8002e80:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3714      	adds	r7, #20
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b095      	sub	sp, #84	; 0x54
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	330c      	adds	r3, #12
 8002e9e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ea2:	e853 3f00 	ldrex	r3, [r3]
 8002ea6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eaa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002eae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	330c      	adds	r3, #12
 8002eb6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002eb8:	643a      	str	r2, [r7, #64]	; 0x40
 8002eba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ebc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002ebe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ec0:	e841 2300 	strex	r3, r2, [r1]
 8002ec4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1e5      	bne.n	8002e98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	3314      	adds	r3, #20
 8002ed2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed4:	6a3b      	ldr	r3, [r7, #32]
 8002ed6:	e853 3f00 	ldrex	r3, [r3]
 8002eda:	61fb      	str	r3, [r7, #28]
   return(result);
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	f023 0301 	bic.w	r3, r3, #1
 8002ee2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	3314      	adds	r3, #20
 8002eea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002eec:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002eee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ef2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ef4:	e841 2300 	strex	r3, r2, [r1]
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1e5      	bne.n	8002ecc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d119      	bne.n	8002f3c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	330c      	adds	r3, #12
 8002f0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	e853 3f00 	ldrex	r3, [r3]
 8002f16:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	f023 0310 	bic.w	r3, r3, #16
 8002f1e:	647b      	str	r3, [r7, #68]	; 0x44
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	330c      	adds	r3, #12
 8002f26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f28:	61ba      	str	r2, [r7, #24]
 8002f2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f2c:	6979      	ldr	r1, [r7, #20]
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	e841 2300 	strex	r3, r2, [r1]
 8002f34:	613b      	str	r3, [r7, #16]
   return(result);
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1e5      	bne.n	8002f08 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002f4a:	bf00      	nop
 8002f4c:	3754      	adds	r7, #84	; 0x54
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b084      	sub	sp, #16
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f62:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f7ff ff39 	bl	8002de8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f76:	bf00      	nop
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b085      	sub	sp, #20
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b21      	cmp	r3, #33	; 0x21
 8002f90:	d13e      	bne.n	8003010 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f9a:	d114      	bne.n	8002fc6 <UART_Transmit_IT+0x48>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d110      	bne.n	8002fc6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	881b      	ldrh	r3, [r3, #0]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fb8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	1c9a      	adds	r2, r3, #2
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	621a      	str	r2, [r3, #32]
 8002fc4:	e008      	b.n	8002fd8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	1c59      	adds	r1, r3, #1
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6211      	str	r1, [r2, #32]
 8002fd0:	781a      	ldrb	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d10f      	bne.n	800300c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68da      	ldr	r2, [r3, #12]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ffa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68da      	ldr	r2, [r3, #12]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800300a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800300c:	2300      	movs	r3, #0
 800300e:	e000      	b.n	8003012 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003010:	2302      	movs	r3, #2
  }
}
 8003012:	4618      	mov	r0, r3
 8003014:	3714      	adds	r7, #20
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b082      	sub	sp, #8
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68da      	ldr	r2, [r3, #12]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003034:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2220      	movs	r2, #32
 800303a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7fd fe80 	bl	8000d44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b08c      	sub	sp, #48	; 0x30
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b22      	cmp	r3, #34	; 0x22
 8003060:	f040 80ab 	bne.w	80031ba <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800306c:	d117      	bne.n	800309e <UART_Receive_IT+0x50>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d113      	bne.n	800309e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003076:	2300      	movs	r3, #0
 8003078:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	b29b      	uxth	r3, r3
 8003088:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800308c:	b29a      	uxth	r2, r3
 800308e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003090:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003096:	1c9a      	adds	r2, r3, #2
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	629a      	str	r2, [r3, #40]	; 0x28
 800309c:	e026      	b.n	80030ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80030a4:	2300      	movs	r3, #0
 80030a6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030b0:	d007      	beq.n	80030c2 <UART_Receive_IT+0x74>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10a      	bne.n	80030d0 <UART_Receive_IT+0x82>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d106      	bne.n	80030d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030cc:	701a      	strb	r2, [r3, #0]
 80030ce:	e008      	b.n	80030e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e6:	1c5a      	adds	r2, r3, #1
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	3b01      	subs	r3, #1
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	4619      	mov	r1, r3
 80030fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d15a      	bne.n	80031b6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68da      	ldr	r2, [r3, #12]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 0220 	bic.w	r2, r2, #32
 800310e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68da      	ldr	r2, [r3, #12]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800311e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	695a      	ldr	r2, [r3, #20]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 0201 	bic.w	r2, r2, #1
 800312e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2220      	movs	r2, #32
 8003134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313c:	2b01      	cmp	r3, #1
 800313e:	d135      	bne.n	80031ac <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	330c      	adds	r3, #12
 800314c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	e853 3f00 	ldrex	r3, [r3]
 8003154:	613b      	str	r3, [r7, #16]
   return(result);
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	f023 0310 	bic.w	r3, r3, #16
 800315c:	627b      	str	r3, [r7, #36]	; 0x24
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	330c      	adds	r3, #12
 8003164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003166:	623a      	str	r2, [r7, #32]
 8003168:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800316a:	69f9      	ldr	r1, [r7, #28]
 800316c:	6a3a      	ldr	r2, [r7, #32]
 800316e:	e841 2300 	strex	r3, r2, [r1]
 8003172:	61bb      	str	r3, [r7, #24]
   return(result);
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1e5      	bne.n	8003146 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0310 	and.w	r3, r3, #16
 8003184:	2b10      	cmp	r3, #16
 8003186:	d10a      	bne.n	800319e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003188:	2300      	movs	r3, #0
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	60fb      	str	r3, [r7, #12]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	60fb      	str	r3, [r7, #12]
 800319c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031a2:	4619      	mov	r1, r3
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f7ff fe29 	bl	8002dfc <HAL_UARTEx_RxEventCallback>
 80031aa:	e002      	b.n	80031b2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f7fd fdab 	bl	8000d08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80031b2:	2300      	movs	r3, #0
 80031b4:	e002      	b.n	80031bc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80031b6:	2300      	movs	r3, #0
 80031b8:	e000      	b.n	80031bc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80031ba:	2302      	movs	r3, #2
  }
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3730      	adds	r7, #48	; 0x30
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031c8:	b0c0      	sub	sp, #256	; 0x100
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80031dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031e0:	68d9      	ldr	r1, [r3, #12]
 80031e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	ea40 0301 	orr.w	r3, r0, r1
 80031ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	431a      	orrs	r2, r3
 80031fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	431a      	orrs	r2, r3
 8003204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	4313      	orrs	r3, r2
 800320c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800321c:	f021 010c 	bic.w	r1, r1, #12
 8003220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800322a:	430b      	orrs	r3, r1
 800322c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800322e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800323a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800323e:	6999      	ldr	r1, [r3, #24]
 8003240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	ea40 0301 	orr.w	r3, r0, r1
 800324a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800324c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	4b8f      	ldr	r3, [pc, #572]	; (8003490 <UART_SetConfig+0x2cc>)
 8003254:	429a      	cmp	r2, r3
 8003256:	d005      	beq.n	8003264 <UART_SetConfig+0xa0>
 8003258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	4b8d      	ldr	r3, [pc, #564]	; (8003494 <UART_SetConfig+0x2d0>)
 8003260:	429a      	cmp	r2, r3
 8003262:	d104      	bne.n	800326e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003264:	f7fe fe16 	bl	8001e94 <HAL_RCC_GetPCLK2Freq>
 8003268:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800326c:	e003      	b.n	8003276 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800326e:	f7fe fdfd 	bl	8001e6c <HAL_RCC_GetPCLK1Freq>
 8003272:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003280:	f040 810c 	bne.w	800349c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003284:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003288:	2200      	movs	r2, #0
 800328a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800328e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003292:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003296:	4622      	mov	r2, r4
 8003298:	462b      	mov	r3, r5
 800329a:	1891      	adds	r1, r2, r2
 800329c:	65b9      	str	r1, [r7, #88]	; 0x58
 800329e:	415b      	adcs	r3, r3
 80032a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80032a6:	4621      	mov	r1, r4
 80032a8:	eb12 0801 	adds.w	r8, r2, r1
 80032ac:	4629      	mov	r1, r5
 80032ae:	eb43 0901 	adc.w	r9, r3, r1
 80032b2:	f04f 0200 	mov.w	r2, #0
 80032b6:	f04f 0300 	mov.w	r3, #0
 80032ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032c6:	4690      	mov	r8, r2
 80032c8:	4699      	mov	r9, r3
 80032ca:	4623      	mov	r3, r4
 80032cc:	eb18 0303 	adds.w	r3, r8, r3
 80032d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80032d4:	462b      	mov	r3, r5
 80032d6:	eb49 0303 	adc.w	r3, r9, r3
 80032da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80032de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80032ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80032ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80032f2:	460b      	mov	r3, r1
 80032f4:	18db      	adds	r3, r3, r3
 80032f6:	653b      	str	r3, [r7, #80]	; 0x50
 80032f8:	4613      	mov	r3, r2
 80032fa:	eb42 0303 	adc.w	r3, r2, r3
 80032fe:	657b      	str	r3, [r7, #84]	; 0x54
 8003300:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003304:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003308:	f7fc ff62 	bl	80001d0 <__aeabi_uldivmod>
 800330c:	4602      	mov	r2, r0
 800330e:	460b      	mov	r3, r1
 8003310:	4b61      	ldr	r3, [pc, #388]	; (8003498 <UART_SetConfig+0x2d4>)
 8003312:	fba3 2302 	umull	r2, r3, r3, r2
 8003316:	095b      	lsrs	r3, r3, #5
 8003318:	011c      	lsls	r4, r3, #4
 800331a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800331e:	2200      	movs	r2, #0
 8003320:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003324:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003328:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800332c:	4642      	mov	r2, r8
 800332e:	464b      	mov	r3, r9
 8003330:	1891      	adds	r1, r2, r2
 8003332:	64b9      	str	r1, [r7, #72]	; 0x48
 8003334:	415b      	adcs	r3, r3
 8003336:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003338:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800333c:	4641      	mov	r1, r8
 800333e:	eb12 0a01 	adds.w	sl, r2, r1
 8003342:	4649      	mov	r1, r9
 8003344:	eb43 0b01 	adc.w	fp, r3, r1
 8003348:	f04f 0200 	mov.w	r2, #0
 800334c:	f04f 0300 	mov.w	r3, #0
 8003350:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003354:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003358:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800335c:	4692      	mov	sl, r2
 800335e:	469b      	mov	fp, r3
 8003360:	4643      	mov	r3, r8
 8003362:	eb1a 0303 	adds.w	r3, sl, r3
 8003366:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800336a:	464b      	mov	r3, r9
 800336c:	eb4b 0303 	adc.w	r3, fp, r3
 8003370:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003380:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003384:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003388:	460b      	mov	r3, r1
 800338a:	18db      	adds	r3, r3, r3
 800338c:	643b      	str	r3, [r7, #64]	; 0x40
 800338e:	4613      	mov	r3, r2
 8003390:	eb42 0303 	adc.w	r3, r2, r3
 8003394:	647b      	str	r3, [r7, #68]	; 0x44
 8003396:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800339a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800339e:	f7fc ff17 	bl	80001d0 <__aeabi_uldivmod>
 80033a2:	4602      	mov	r2, r0
 80033a4:	460b      	mov	r3, r1
 80033a6:	4611      	mov	r1, r2
 80033a8:	4b3b      	ldr	r3, [pc, #236]	; (8003498 <UART_SetConfig+0x2d4>)
 80033aa:	fba3 2301 	umull	r2, r3, r3, r1
 80033ae:	095b      	lsrs	r3, r3, #5
 80033b0:	2264      	movs	r2, #100	; 0x64
 80033b2:	fb02 f303 	mul.w	r3, r2, r3
 80033b6:	1acb      	subs	r3, r1, r3
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80033be:	4b36      	ldr	r3, [pc, #216]	; (8003498 <UART_SetConfig+0x2d4>)
 80033c0:	fba3 2302 	umull	r2, r3, r3, r2
 80033c4:	095b      	lsrs	r3, r3, #5
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033cc:	441c      	add	r4, r3
 80033ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033d2:	2200      	movs	r2, #0
 80033d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80033d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80033dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80033e0:	4642      	mov	r2, r8
 80033e2:	464b      	mov	r3, r9
 80033e4:	1891      	adds	r1, r2, r2
 80033e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80033e8:	415b      	adcs	r3, r3
 80033ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80033f0:	4641      	mov	r1, r8
 80033f2:	1851      	adds	r1, r2, r1
 80033f4:	6339      	str	r1, [r7, #48]	; 0x30
 80033f6:	4649      	mov	r1, r9
 80033f8:	414b      	adcs	r3, r1
 80033fa:	637b      	str	r3, [r7, #52]	; 0x34
 80033fc:	f04f 0200 	mov.w	r2, #0
 8003400:	f04f 0300 	mov.w	r3, #0
 8003404:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003408:	4659      	mov	r1, fp
 800340a:	00cb      	lsls	r3, r1, #3
 800340c:	4651      	mov	r1, sl
 800340e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003412:	4651      	mov	r1, sl
 8003414:	00ca      	lsls	r2, r1, #3
 8003416:	4610      	mov	r0, r2
 8003418:	4619      	mov	r1, r3
 800341a:	4603      	mov	r3, r0
 800341c:	4642      	mov	r2, r8
 800341e:	189b      	adds	r3, r3, r2
 8003420:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003424:	464b      	mov	r3, r9
 8003426:	460a      	mov	r2, r1
 8003428:	eb42 0303 	adc.w	r3, r2, r3
 800342c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800343c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003440:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003444:	460b      	mov	r3, r1
 8003446:	18db      	adds	r3, r3, r3
 8003448:	62bb      	str	r3, [r7, #40]	; 0x28
 800344a:	4613      	mov	r3, r2
 800344c:	eb42 0303 	adc.w	r3, r2, r3
 8003450:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003452:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003456:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800345a:	f7fc feb9 	bl	80001d0 <__aeabi_uldivmod>
 800345e:	4602      	mov	r2, r0
 8003460:	460b      	mov	r3, r1
 8003462:	4b0d      	ldr	r3, [pc, #52]	; (8003498 <UART_SetConfig+0x2d4>)
 8003464:	fba3 1302 	umull	r1, r3, r3, r2
 8003468:	095b      	lsrs	r3, r3, #5
 800346a:	2164      	movs	r1, #100	; 0x64
 800346c:	fb01 f303 	mul.w	r3, r1, r3
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	3332      	adds	r3, #50	; 0x32
 8003476:	4a08      	ldr	r2, [pc, #32]	; (8003498 <UART_SetConfig+0x2d4>)
 8003478:	fba2 2303 	umull	r2, r3, r2, r3
 800347c:	095b      	lsrs	r3, r3, #5
 800347e:	f003 0207 	and.w	r2, r3, #7
 8003482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4422      	add	r2, r4
 800348a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800348c:	e105      	b.n	800369a <UART_SetConfig+0x4d6>
 800348e:	bf00      	nop
 8003490:	40011000 	.word	0x40011000
 8003494:	40011400 	.word	0x40011400
 8003498:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800349c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034a0:	2200      	movs	r2, #0
 80034a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80034a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80034aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80034ae:	4642      	mov	r2, r8
 80034b0:	464b      	mov	r3, r9
 80034b2:	1891      	adds	r1, r2, r2
 80034b4:	6239      	str	r1, [r7, #32]
 80034b6:	415b      	adcs	r3, r3
 80034b8:	627b      	str	r3, [r7, #36]	; 0x24
 80034ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034be:	4641      	mov	r1, r8
 80034c0:	1854      	adds	r4, r2, r1
 80034c2:	4649      	mov	r1, r9
 80034c4:	eb43 0501 	adc.w	r5, r3, r1
 80034c8:	f04f 0200 	mov.w	r2, #0
 80034cc:	f04f 0300 	mov.w	r3, #0
 80034d0:	00eb      	lsls	r3, r5, #3
 80034d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034d6:	00e2      	lsls	r2, r4, #3
 80034d8:	4614      	mov	r4, r2
 80034da:	461d      	mov	r5, r3
 80034dc:	4643      	mov	r3, r8
 80034de:	18e3      	adds	r3, r4, r3
 80034e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80034e4:	464b      	mov	r3, r9
 80034e6:	eb45 0303 	adc.w	r3, r5, r3
 80034ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80034ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80034fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80034fe:	f04f 0200 	mov.w	r2, #0
 8003502:	f04f 0300 	mov.w	r3, #0
 8003506:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800350a:	4629      	mov	r1, r5
 800350c:	008b      	lsls	r3, r1, #2
 800350e:	4621      	mov	r1, r4
 8003510:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003514:	4621      	mov	r1, r4
 8003516:	008a      	lsls	r2, r1, #2
 8003518:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800351c:	f7fc fe58 	bl	80001d0 <__aeabi_uldivmod>
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	4b60      	ldr	r3, [pc, #384]	; (80036a8 <UART_SetConfig+0x4e4>)
 8003526:	fba3 2302 	umull	r2, r3, r3, r2
 800352a:	095b      	lsrs	r3, r3, #5
 800352c:	011c      	lsls	r4, r3, #4
 800352e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003532:	2200      	movs	r2, #0
 8003534:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003538:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800353c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003540:	4642      	mov	r2, r8
 8003542:	464b      	mov	r3, r9
 8003544:	1891      	adds	r1, r2, r2
 8003546:	61b9      	str	r1, [r7, #24]
 8003548:	415b      	adcs	r3, r3
 800354a:	61fb      	str	r3, [r7, #28]
 800354c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003550:	4641      	mov	r1, r8
 8003552:	1851      	adds	r1, r2, r1
 8003554:	6139      	str	r1, [r7, #16]
 8003556:	4649      	mov	r1, r9
 8003558:	414b      	adcs	r3, r1
 800355a:	617b      	str	r3, [r7, #20]
 800355c:	f04f 0200 	mov.w	r2, #0
 8003560:	f04f 0300 	mov.w	r3, #0
 8003564:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003568:	4659      	mov	r1, fp
 800356a:	00cb      	lsls	r3, r1, #3
 800356c:	4651      	mov	r1, sl
 800356e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003572:	4651      	mov	r1, sl
 8003574:	00ca      	lsls	r2, r1, #3
 8003576:	4610      	mov	r0, r2
 8003578:	4619      	mov	r1, r3
 800357a:	4603      	mov	r3, r0
 800357c:	4642      	mov	r2, r8
 800357e:	189b      	adds	r3, r3, r2
 8003580:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003584:	464b      	mov	r3, r9
 8003586:	460a      	mov	r2, r1
 8003588:	eb42 0303 	adc.w	r3, r2, r3
 800358c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	67bb      	str	r3, [r7, #120]	; 0x78
 800359a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800359c:	f04f 0200 	mov.w	r2, #0
 80035a0:	f04f 0300 	mov.w	r3, #0
 80035a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80035a8:	4649      	mov	r1, r9
 80035aa:	008b      	lsls	r3, r1, #2
 80035ac:	4641      	mov	r1, r8
 80035ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035b2:	4641      	mov	r1, r8
 80035b4:	008a      	lsls	r2, r1, #2
 80035b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80035ba:	f7fc fe09 	bl	80001d0 <__aeabi_uldivmod>
 80035be:	4602      	mov	r2, r0
 80035c0:	460b      	mov	r3, r1
 80035c2:	4b39      	ldr	r3, [pc, #228]	; (80036a8 <UART_SetConfig+0x4e4>)
 80035c4:	fba3 1302 	umull	r1, r3, r3, r2
 80035c8:	095b      	lsrs	r3, r3, #5
 80035ca:	2164      	movs	r1, #100	; 0x64
 80035cc:	fb01 f303 	mul.w	r3, r1, r3
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	011b      	lsls	r3, r3, #4
 80035d4:	3332      	adds	r3, #50	; 0x32
 80035d6:	4a34      	ldr	r2, [pc, #208]	; (80036a8 <UART_SetConfig+0x4e4>)
 80035d8:	fba2 2303 	umull	r2, r3, r2, r3
 80035dc:	095b      	lsrs	r3, r3, #5
 80035de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035e2:	441c      	add	r4, r3
 80035e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035e8:	2200      	movs	r2, #0
 80035ea:	673b      	str	r3, [r7, #112]	; 0x70
 80035ec:	677a      	str	r2, [r7, #116]	; 0x74
 80035ee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80035f2:	4642      	mov	r2, r8
 80035f4:	464b      	mov	r3, r9
 80035f6:	1891      	adds	r1, r2, r2
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	415b      	adcs	r3, r3
 80035fc:	60fb      	str	r3, [r7, #12]
 80035fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003602:	4641      	mov	r1, r8
 8003604:	1851      	adds	r1, r2, r1
 8003606:	6039      	str	r1, [r7, #0]
 8003608:	4649      	mov	r1, r9
 800360a:	414b      	adcs	r3, r1
 800360c:	607b      	str	r3, [r7, #4]
 800360e:	f04f 0200 	mov.w	r2, #0
 8003612:	f04f 0300 	mov.w	r3, #0
 8003616:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800361a:	4659      	mov	r1, fp
 800361c:	00cb      	lsls	r3, r1, #3
 800361e:	4651      	mov	r1, sl
 8003620:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003624:	4651      	mov	r1, sl
 8003626:	00ca      	lsls	r2, r1, #3
 8003628:	4610      	mov	r0, r2
 800362a:	4619      	mov	r1, r3
 800362c:	4603      	mov	r3, r0
 800362e:	4642      	mov	r2, r8
 8003630:	189b      	adds	r3, r3, r2
 8003632:	66bb      	str	r3, [r7, #104]	; 0x68
 8003634:	464b      	mov	r3, r9
 8003636:	460a      	mov	r2, r1
 8003638:	eb42 0303 	adc.w	r3, r2, r3
 800363c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800363e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	663b      	str	r3, [r7, #96]	; 0x60
 8003648:	667a      	str	r2, [r7, #100]	; 0x64
 800364a:	f04f 0200 	mov.w	r2, #0
 800364e:	f04f 0300 	mov.w	r3, #0
 8003652:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003656:	4649      	mov	r1, r9
 8003658:	008b      	lsls	r3, r1, #2
 800365a:	4641      	mov	r1, r8
 800365c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003660:	4641      	mov	r1, r8
 8003662:	008a      	lsls	r2, r1, #2
 8003664:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003668:	f7fc fdb2 	bl	80001d0 <__aeabi_uldivmod>
 800366c:	4602      	mov	r2, r0
 800366e:	460b      	mov	r3, r1
 8003670:	4b0d      	ldr	r3, [pc, #52]	; (80036a8 <UART_SetConfig+0x4e4>)
 8003672:	fba3 1302 	umull	r1, r3, r3, r2
 8003676:	095b      	lsrs	r3, r3, #5
 8003678:	2164      	movs	r1, #100	; 0x64
 800367a:	fb01 f303 	mul.w	r3, r1, r3
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	011b      	lsls	r3, r3, #4
 8003682:	3332      	adds	r3, #50	; 0x32
 8003684:	4a08      	ldr	r2, [pc, #32]	; (80036a8 <UART_SetConfig+0x4e4>)
 8003686:	fba2 2303 	umull	r2, r3, r2, r3
 800368a:	095b      	lsrs	r3, r3, #5
 800368c:	f003 020f 	and.w	r2, r3, #15
 8003690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4422      	add	r2, r4
 8003698:	609a      	str	r2, [r3, #8]
}
 800369a:	bf00      	nop
 800369c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80036a0:	46bd      	mov	sp, r7
 80036a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036a6:	bf00      	nop
 80036a8:	51eb851f 	.word	0x51eb851f

080036ac <__NVIC_SetPriority>:
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	4603      	mov	r3, r0
 80036b4:	6039      	str	r1, [r7, #0]
 80036b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	db0a      	blt.n	80036d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	b2da      	uxtb	r2, r3
 80036c4:	490c      	ldr	r1, [pc, #48]	; (80036f8 <__NVIC_SetPriority+0x4c>)
 80036c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ca:	0112      	lsls	r2, r2, #4
 80036cc:	b2d2      	uxtb	r2, r2
 80036ce:	440b      	add	r3, r1
 80036d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80036d4:	e00a      	b.n	80036ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	4908      	ldr	r1, [pc, #32]	; (80036fc <__NVIC_SetPriority+0x50>)
 80036dc:	79fb      	ldrb	r3, [r7, #7]
 80036de:	f003 030f 	and.w	r3, r3, #15
 80036e2:	3b04      	subs	r3, #4
 80036e4:	0112      	lsls	r2, r2, #4
 80036e6:	b2d2      	uxtb	r2, r2
 80036e8:	440b      	add	r3, r1
 80036ea:	761a      	strb	r2, [r3, #24]
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr
 80036f8:	e000e100 	.word	0xe000e100
 80036fc:	e000ed00 	.word	0xe000ed00

08003700 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003704:	2100      	movs	r1, #0
 8003706:	f06f 0004 	mvn.w	r0, #4
 800370a:	f7ff ffcf 	bl	80036ac <__NVIC_SetPriority>
#endif
}
 800370e:	bf00      	nop
 8003710:	bd80      	pop	{r7, pc}
	...

08003714 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800371a:	f3ef 8305 	mrs	r3, IPSR
 800371e:	603b      	str	r3, [r7, #0]
  return(result);
 8003720:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003726:	f06f 0305 	mvn.w	r3, #5
 800372a:	607b      	str	r3, [r7, #4]
 800372c:	e00c      	b.n	8003748 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800372e:	4b0a      	ldr	r3, [pc, #40]	; (8003758 <osKernelInitialize+0x44>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d105      	bne.n	8003742 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003736:	4b08      	ldr	r3, [pc, #32]	; (8003758 <osKernelInitialize+0x44>)
 8003738:	2201      	movs	r2, #1
 800373a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800373c:	2300      	movs	r3, #0
 800373e:	607b      	str	r3, [r7, #4]
 8003740:	e002      	b.n	8003748 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003742:	f04f 33ff 	mov.w	r3, #4294967295
 8003746:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003748:	687b      	ldr	r3, [r7, #4]
}
 800374a:	4618      	mov	r0, r3
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	20000134 	.word	0x20000134

0800375c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003762:	f3ef 8305 	mrs	r3, IPSR
 8003766:	603b      	str	r3, [r7, #0]
  return(result);
 8003768:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800376a:	2b00      	cmp	r3, #0
 800376c:	d003      	beq.n	8003776 <osKernelStart+0x1a>
    stat = osErrorISR;
 800376e:	f06f 0305 	mvn.w	r3, #5
 8003772:	607b      	str	r3, [r7, #4]
 8003774:	e010      	b.n	8003798 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003776:	4b0b      	ldr	r3, [pc, #44]	; (80037a4 <osKernelStart+0x48>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d109      	bne.n	8003792 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800377e:	f7ff ffbf 	bl	8003700 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003782:	4b08      	ldr	r3, [pc, #32]	; (80037a4 <osKernelStart+0x48>)
 8003784:	2202      	movs	r2, #2
 8003786:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003788:	f001 fd8a 	bl	80052a0 <vTaskStartScheduler>
      stat = osOK;
 800378c:	2300      	movs	r3, #0
 800378e:	607b      	str	r3, [r7, #4]
 8003790:	e002      	b.n	8003798 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003792:	f04f 33ff 	mov.w	r3, #4294967295
 8003796:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003798:	687b      	ldr	r3, [r7, #4]
}
 800379a:	4618      	mov	r0, r3
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	20000134 	.word	0x20000134

080037a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b08e      	sub	sp, #56	; 0x38
 80037ac:	af04      	add	r7, sp, #16
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80037b4:	2300      	movs	r3, #0
 80037b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037b8:	f3ef 8305 	mrs	r3, IPSR
 80037bc:	617b      	str	r3, [r7, #20]
  return(result);
 80037be:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d17e      	bne.n	80038c2 <osThreadNew+0x11a>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d07b      	beq.n	80038c2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80037ca:	2380      	movs	r3, #128	; 0x80
 80037cc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80037ce:	2318      	movs	r3, #24
 80037d0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80037d2:	2300      	movs	r3, #0
 80037d4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80037d6:	f04f 33ff 	mov.w	r3, #4294967295
 80037da:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d045      	beq.n	800386e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d002      	beq.n	80037f0 <osThreadNew+0x48>
        name = attr->name;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d002      	beq.n	80037fe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d008      	beq.n	8003816 <osThreadNew+0x6e>
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	2b38      	cmp	r3, #56	; 0x38
 8003808:	d805      	bhi.n	8003816 <osThreadNew+0x6e>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <osThreadNew+0x72>
        return (NULL);
 8003816:	2300      	movs	r3, #0
 8003818:	e054      	b.n	80038c4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d003      	beq.n	800382a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	089b      	lsrs	r3, r3, #2
 8003828:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00e      	beq.n	8003850 <osThreadNew+0xa8>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	2b5b      	cmp	r3, #91	; 0x5b
 8003838:	d90a      	bls.n	8003850 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800383e:	2b00      	cmp	r3, #0
 8003840:	d006      	beq.n	8003850 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d002      	beq.n	8003850 <osThreadNew+0xa8>
        mem = 1;
 800384a:	2301      	movs	r3, #1
 800384c:	61bb      	str	r3, [r7, #24]
 800384e:	e010      	b.n	8003872 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10c      	bne.n	8003872 <osThreadNew+0xca>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d108      	bne.n	8003872 <osThreadNew+0xca>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d104      	bne.n	8003872 <osThreadNew+0xca>
          mem = 0;
 8003868:	2300      	movs	r3, #0
 800386a:	61bb      	str	r3, [r7, #24]
 800386c:	e001      	b.n	8003872 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800386e:	2300      	movs	r3, #0
 8003870:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d110      	bne.n	800389a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003880:	9202      	str	r2, [sp, #8]
 8003882:	9301      	str	r3, [sp, #4]
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	9300      	str	r3, [sp, #0]
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	6a3a      	ldr	r2, [r7, #32]
 800388c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f001 fb64 	bl	8004f5c <xTaskCreateStatic>
 8003894:	4603      	mov	r3, r0
 8003896:	613b      	str	r3, [r7, #16]
 8003898:	e013      	b.n	80038c2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d110      	bne.n	80038c2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80038a0:	6a3b      	ldr	r3, [r7, #32]
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	f107 0310 	add.w	r3, r7, #16
 80038a8:	9301      	str	r3, [sp, #4]
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f001 fbaf 	bl	8005016 <xTaskCreate>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d001      	beq.n	80038c2 <osThreadNew+0x11a>
            hTask = NULL;
 80038be:	2300      	movs	r3, #0
 80038c0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80038c2:	693b      	ldr	r3, [r7, #16]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3728      	adds	r7, #40	; 0x28
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b08a      	sub	sp, #40	; 0x28
 80038d0:	af02      	add	r7, sp, #8
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80038d8:	2300      	movs	r3, #0
 80038da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038dc:	f3ef 8305 	mrs	r3, IPSR
 80038e0:	613b      	str	r3, [r7, #16]
  return(result);
 80038e2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d175      	bne.n	80039d4 <osSemaphoreNew+0x108>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d072      	beq.n	80039d4 <osSemaphoreNew+0x108>
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d86e      	bhi.n	80039d4 <osSemaphoreNew+0x108>
    mem = -1;
 80038f6:	f04f 33ff 	mov.w	r3, #4294967295
 80038fa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d015      	beq.n	800392e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d006      	beq.n	8003918 <osSemaphoreNew+0x4c>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	2b4f      	cmp	r3, #79	; 0x4f
 8003910:	d902      	bls.n	8003918 <osSemaphoreNew+0x4c>
        mem = 1;
 8003912:	2301      	movs	r3, #1
 8003914:	61bb      	str	r3, [r7, #24]
 8003916:	e00c      	b.n	8003932 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d108      	bne.n	8003932 <osSemaphoreNew+0x66>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d104      	bne.n	8003932 <osSemaphoreNew+0x66>
          mem = 0;
 8003928:	2300      	movs	r3, #0
 800392a:	61bb      	str	r3, [r7, #24]
 800392c:	e001      	b.n	8003932 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800392e:	2300      	movs	r3, #0
 8003930:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003938:	d04c      	beq.n	80039d4 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d128      	bne.n	8003992 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d10a      	bne.n	800395c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	2203      	movs	r2, #3
 800394c:	9200      	str	r2, [sp, #0]
 800394e:	2200      	movs	r2, #0
 8003950:	2100      	movs	r1, #0
 8003952:	2001      	movs	r0, #1
 8003954:	f000 fb5c 	bl	8004010 <xQueueGenericCreateStatic>
 8003958:	61f8      	str	r0, [r7, #28]
 800395a:	e005      	b.n	8003968 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800395c:	2203      	movs	r2, #3
 800395e:	2100      	movs	r1, #0
 8003960:	2001      	movs	r0, #1
 8003962:	f000 fbcd 	bl	8004100 <xQueueGenericCreate>
 8003966:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d022      	beq.n	80039b4 <osSemaphoreNew+0xe8>
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d01f      	beq.n	80039b4 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003974:	2300      	movs	r3, #0
 8003976:	2200      	movs	r2, #0
 8003978:	2100      	movs	r1, #0
 800397a:	69f8      	ldr	r0, [r7, #28]
 800397c:	f000 fc88 	bl	8004290 <xQueueGenericSend>
 8003980:	4603      	mov	r3, r0
 8003982:	2b01      	cmp	r3, #1
 8003984:	d016      	beq.n	80039b4 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8003986:	69f8      	ldr	r0, [r7, #28]
 8003988:	f001 f914 	bl	8004bb4 <vQueueDelete>
            hSemaphore = NULL;
 800398c:	2300      	movs	r3, #0
 800398e:	61fb      	str	r3, [r7, #28]
 8003990:	e010      	b.n	80039b4 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d108      	bne.n	80039aa <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	461a      	mov	r2, r3
 800399e:	68b9      	ldr	r1, [r7, #8]
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f000 fc0a 	bl	80041ba <xQueueCreateCountingSemaphoreStatic>
 80039a6:	61f8      	str	r0, [r7, #28]
 80039a8:	e004      	b.n	80039b4 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80039aa:	68b9      	ldr	r1, [r7, #8]
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f000 fc3b 	bl	8004228 <xQueueCreateCountingSemaphore>
 80039b2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00c      	beq.n	80039d4 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d003      	beq.n	80039c8 <osSemaphoreNew+0xfc>
          name = attr->name;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	617b      	str	r3, [r7, #20]
 80039c6:	e001      	b.n	80039cc <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80039c8:	2300      	movs	r3, #0
 80039ca:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80039cc:	6979      	ldr	r1, [r7, #20]
 80039ce:	69f8      	ldr	r0, [r7, #28]
 80039d0:	f001 fa3c 	bl	8004e4c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80039d4:	69fb      	ldr	r3, [r7, #28]
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3720      	adds	r7, #32
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
	...

080039e0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80039ee:	2300      	movs	r3, #0
 80039f0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d103      	bne.n	8003a00 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80039f8:	f06f 0303 	mvn.w	r3, #3
 80039fc:	617b      	str	r3, [r7, #20]
 80039fe:	e039      	b.n	8003a74 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a00:	f3ef 8305 	mrs	r3, IPSR
 8003a04:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a06:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d022      	beq.n	8003a52 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8003a12:	f06f 0303 	mvn.w	r3, #3
 8003a16:	617b      	str	r3, [r7, #20]
 8003a18:	e02c      	b.n	8003a74 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8003a1e:	f107 0308 	add.w	r3, r7, #8
 8003a22:	461a      	mov	r2, r3
 8003a24:	2100      	movs	r1, #0
 8003a26:	6938      	ldr	r0, [r7, #16]
 8003a28:	f001 f844 	bl	8004ab4 <xQueueReceiveFromISR>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d003      	beq.n	8003a3a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8003a32:	f06f 0302 	mvn.w	r3, #2
 8003a36:	617b      	str	r3, [r7, #20]
 8003a38:	e01c      	b.n	8003a74 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d019      	beq.n	8003a74 <osSemaphoreAcquire+0x94>
 8003a40:	4b0f      	ldr	r3, [pc, #60]	; (8003a80 <osSemaphoreAcquire+0xa0>)
 8003a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a46:	601a      	str	r2, [r3, #0]
 8003a48:	f3bf 8f4f 	dsb	sy
 8003a4c:	f3bf 8f6f 	isb	sy
 8003a50:	e010      	b.n	8003a74 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8003a52:	6839      	ldr	r1, [r7, #0]
 8003a54:	6938      	ldr	r0, [r7, #16]
 8003a56:	f000 ff21 	bl	800489c <xQueueSemaphoreTake>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d009      	beq.n	8003a74 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d003      	beq.n	8003a6e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8003a66:	f06f 0301 	mvn.w	r3, #1
 8003a6a:	617b      	str	r3, [r7, #20]
 8003a6c:	e002      	b.n	8003a74 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8003a6e:	f06f 0302 	mvn.w	r3, #2
 8003a72:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8003a74:	697b      	ldr	r3, [r7, #20]
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3718      	adds	r7, #24
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	e000ed04 	.word	0xe000ed04

08003a84 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003a90:	2300      	movs	r3, #0
 8003a92:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d103      	bne.n	8003aa2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8003a9a:	f06f 0303 	mvn.w	r3, #3
 8003a9e:	617b      	str	r3, [r7, #20]
 8003aa0:	e02c      	b.n	8003afc <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003aa2:	f3ef 8305 	mrs	r3, IPSR
 8003aa6:	60fb      	str	r3, [r7, #12]
  return(result);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d01a      	beq.n	8003ae4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003ab2:	f107 0308 	add.w	r3, r7, #8
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	6938      	ldr	r0, [r7, #16]
 8003aba:	f000 fd82 	bl	80045c2 <xQueueGiveFromISR>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d003      	beq.n	8003acc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8003ac4:	f06f 0302 	mvn.w	r3, #2
 8003ac8:	617b      	str	r3, [r7, #20]
 8003aca:	e017      	b.n	8003afc <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d014      	beq.n	8003afc <osSemaphoreRelease+0x78>
 8003ad2:	4b0d      	ldr	r3, [pc, #52]	; (8003b08 <osSemaphoreRelease+0x84>)
 8003ad4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	f3bf 8f4f 	dsb	sy
 8003ade:	f3bf 8f6f 	isb	sy
 8003ae2:	e00b      	b.n	8003afc <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	2100      	movs	r1, #0
 8003aea:	6938      	ldr	r0, [r7, #16]
 8003aec:	f000 fbd0 	bl	8004290 <xQueueGenericSend>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d002      	beq.n	8003afc <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8003af6:	f06f 0302 	mvn.w	r3, #2
 8003afa:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8003afc:	697b      	ldr	r3, [r7, #20]
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3718      	adds	r7, #24
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	e000ed04 	.word	0xe000ed04

08003b0c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b08a      	sub	sp, #40	; 0x28
 8003b10:	af02      	add	r7, sp, #8
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b1c:	f3ef 8305 	mrs	r3, IPSR
 8003b20:	613b      	str	r3, [r7, #16]
  return(result);
 8003b22:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d15f      	bne.n	8003be8 <osMessageQueueNew+0xdc>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d05c      	beq.n	8003be8 <osMessageQueueNew+0xdc>
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d059      	beq.n	8003be8 <osMessageQueueNew+0xdc>
    mem = -1;
 8003b34:	f04f 33ff 	mov.w	r3, #4294967295
 8003b38:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d029      	beq.n	8003b94 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d012      	beq.n	8003b6e <osMessageQueueNew+0x62>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	2b4f      	cmp	r3, #79	; 0x4f
 8003b4e:	d90e      	bls.n	8003b6e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00a      	beq.n	8003b6e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	695a      	ldr	r2, [r3, #20]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	68b9      	ldr	r1, [r7, #8]
 8003b60:	fb01 f303 	mul.w	r3, r1, r3
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d302      	bcc.n	8003b6e <osMessageQueueNew+0x62>
        mem = 1;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	61bb      	str	r3, [r7, #24]
 8003b6c:	e014      	b.n	8003b98 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d110      	bne.n	8003b98 <osMessageQueueNew+0x8c>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10c      	bne.n	8003b98 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d108      	bne.n	8003b98 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d104      	bne.n	8003b98 <osMessageQueueNew+0x8c>
          mem = 0;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	61bb      	str	r3, [r7, #24]
 8003b92:	e001      	b.n	8003b98 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8003b94:	2300      	movs	r3, #0
 8003b96:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d10b      	bne.n	8003bb6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	691a      	ldr	r2, [r3, #16]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	9100      	str	r1, [sp, #0]
 8003baa:	68b9      	ldr	r1, [r7, #8]
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f000 fa2f 	bl	8004010 <xQueueGenericCreateStatic>
 8003bb2:	61f8      	str	r0, [r7, #28]
 8003bb4:	e008      	b.n	8003bc8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d105      	bne.n	8003bc8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	68b9      	ldr	r1, [r7, #8]
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f000 fa9d 	bl	8004100 <xQueueGenericCreate>
 8003bc6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00c      	beq.n	8003be8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <osMessageQueueNew+0xd0>
        name = attr->name;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	617b      	str	r3, [r7, #20]
 8003bda:	e001      	b.n	8003be0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8003be0:	6979      	ldr	r1, [r7, #20]
 8003be2:	69f8      	ldr	r0, [r7, #28]
 8003be4:	f001 f932 	bl	8004e4c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003be8:	69fb      	ldr	r3, [r7, #28]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3720      	adds	r7, #32
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
	...

08003bf4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b088      	sub	sp, #32
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	603b      	str	r3, [r7, #0]
 8003c00:	4613      	mov	r3, r2
 8003c02:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c0c:	f3ef 8305 	mrs	r3, IPSR
 8003c10:	617b      	str	r3, [r7, #20]
  return(result);
 8003c12:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d028      	beq.n	8003c6a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d005      	beq.n	8003c2a <osMessageQueuePut+0x36>
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d002      	beq.n	8003c2a <osMessageQueuePut+0x36>
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8003c2a:	f06f 0303 	mvn.w	r3, #3
 8003c2e:	61fb      	str	r3, [r7, #28]
 8003c30:	e038      	b.n	8003ca4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8003c32:	2300      	movs	r3, #0
 8003c34:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003c36:	f107 0210 	add.w	r2, r7, #16
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	68b9      	ldr	r1, [r7, #8]
 8003c3e:	69b8      	ldr	r0, [r7, #24]
 8003c40:	f000 fc24 	bl	800448c <xQueueGenericSendFromISR>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d003      	beq.n	8003c52 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8003c4a:	f06f 0302 	mvn.w	r3, #2
 8003c4e:	61fb      	str	r3, [r7, #28]
 8003c50:	e028      	b.n	8003ca4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d025      	beq.n	8003ca4 <osMessageQueuePut+0xb0>
 8003c58:	4b15      	ldr	r3, [pc, #84]	; (8003cb0 <osMessageQueuePut+0xbc>)
 8003c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	f3bf 8f4f 	dsb	sy
 8003c64:	f3bf 8f6f 	isb	sy
 8003c68:	e01c      	b.n	8003ca4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d002      	beq.n	8003c76 <osMessageQueuePut+0x82>
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d103      	bne.n	8003c7e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8003c76:	f06f 0303 	mvn.w	r3, #3
 8003c7a:	61fb      	str	r3, [r7, #28]
 8003c7c:	e012      	b.n	8003ca4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003c7e:	2300      	movs	r3, #0
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	68b9      	ldr	r1, [r7, #8]
 8003c84:	69b8      	ldr	r0, [r7, #24]
 8003c86:	f000 fb03 	bl	8004290 <xQueueGenericSend>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d009      	beq.n	8003ca4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d003      	beq.n	8003c9e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8003c96:	f06f 0301 	mvn.w	r3, #1
 8003c9a:	61fb      	str	r3, [r7, #28]
 8003c9c:	e002      	b.n	8003ca4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8003c9e:	f06f 0302 	mvn.w	r3, #2
 8003ca2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003ca4:	69fb      	ldr	r3, [r7, #28]
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3720      	adds	r7, #32
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	e000ed04 	.word	0xe000ed04

08003cb4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b088      	sub	sp, #32
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
 8003cc0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cca:	f3ef 8305 	mrs	r3, IPSR
 8003cce:	617b      	str	r3, [r7, #20]
  return(result);
 8003cd0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d028      	beq.n	8003d28 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d005      	beq.n	8003ce8 <osMessageQueueGet+0x34>
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d002      	beq.n	8003ce8 <osMessageQueueGet+0x34>
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d003      	beq.n	8003cf0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8003ce8:	f06f 0303 	mvn.w	r3, #3
 8003cec:	61fb      	str	r3, [r7, #28]
 8003cee:	e037      	b.n	8003d60 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003cf4:	f107 0310 	add.w	r3, r7, #16
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	68b9      	ldr	r1, [r7, #8]
 8003cfc:	69b8      	ldr	r0, [r7, #24]
 8003cfe:	f000 fed9 	bl	8004ab4 <xQueueReceiveFromISR>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d003      	beq.n	8003d10 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8003d08:	f06f 0302 	mvn.w	r3, #2
 8003d0c:	61fb      	str	r3, [r7, #28]
 8003d0e:	e027      	b.n	8003d60 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d024      	beq.n	8003d60 <osMessageQueueGet+0xac>
 8003d16:	4b15      	ldr	r3, [pc, #84]	; (8003d6c <osMessageQueueGet+0xb8>)
 8003d18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d1c:	601a      	str	r2, [r3, #0]
 8003d1e:	f3bf 8f4f 	dsb	sy
 8003d22:	f3bf 8f6f 	isb	sy
 8003d26:	e01b      	b.n	8003d60 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d002      	beq.n	8003d34 <osMessageQueueGet+0x80>
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d103      	bne.n	8003d3c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8003d34:	f06f 0303 	mvn.w	r3, #3
 8003d38:	61fb      	str	r3, [r7, #28]
 8003d3a:	e011      	b.n	8003d60 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	68b9      	ldr	r1, [r7, #8]
 8003d40:	69b8      	ldr	r0, [r7, #24]
 8003d42:	f000 fccb 	bl	80046dc <xQueueReceive>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d009      	beq.n	8003d60 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8003d52:	f06f 0301 	mvn.w	r3, #1
 8003d56:	61fb      	str	r3, [r7, #28]
 8003d58:	e002      	b.n	8003d60 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8003d5a:	f06f 0302 	mvn.w	r3, #2
 8003d5e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003d60:	69fb      	ldr	r3, [r7, #28]
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3720      	adds	r7, #32
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	e000ed04 	.word	0xe000ed04

08003d70 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	4a07      	ldr	r2, [pc, #28]	; (8003d9c <vApplicationGetIdleTaskMemory+0x2c>)
 8003d80:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	4a06      	ldr	r2, [pc, #24]	; (8003da0 <vApplicationGetIdleTaskMemory+0x30>)
 8003d86:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2280      	movs	r2, #128	; 0x80
 8003d8c:	601a      	str	r2, [r3, #0]
}
 8003d8e:	bf00      	nop
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	20000138 	.word	0x20000138
 8003da0:	20000194 	.word	0x20000194

08003da4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	4a07      	ldr	r2, [pc, #28]	; (8003dd0 <vApplicationGetTimerTaskMemory+0x2c>)
 8003db4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	4a06      	ldr	r2, [pc, #24]	; (8003dd4 <vApplicationGetTimerTaskMemory+0x30>)
 8003dba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dc2:	601a      	str	r2, [r3, #0]
}
 8003dc4:	bf00      	nop
 8003dc6:	3714      	adds	r7, #20
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	20000394 	.word	0x20000394
 8003dd4:	200003f0 	.word	0x200003f0

08003dd8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f103 0208 	add.w	r2, r3, #8
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f04f 32ff 	mov.w	r2, #4294967295
 8003df0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f103 0208 	add.w	r2, r3, #8
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f103 0208 	add.w	r2, r3, #8
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e32:	b480      	push	{r7}
 8003e34:	b085      	sub	sp, #20
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
 8003e3a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	689a      	ldr	r2, [r3, #8]
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	601a      	str	r2, [r3, #0]
}
 8003e6e:	bf00      	nop
 8003e70:	3714      	adds	r7, #20
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b085      	sub	sp, #20
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
 8003e82:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e90:	d103      	bne.n	8003e9a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	e00c      	b.n	8003eb4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	3308      	adds	r3, #8
 8003e9e:	60fb      	str	r3, [r7, #12]
 8003ea0:	e002      	b.n	8003ea8 <vListInsert+0x2e>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	60fb      	str	r3, [r7, #12]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d2f6      	bcs.n	8003ea2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	1c5a      	adds	r2, r3, #1
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	601a      	str	r2, [r3, #0]
}
 8003ee0:	bf00      	nop
 8003ee2:	3714      	adds	r7, #20
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	6892      	ldr	r2, [r2, #8]
 8003f02:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	6852      	ldr	r2, [r2, #4]
 8003f0c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d103      	bne.n	8003f20 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	1e5a      	subs	r2, r3, #1
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3714      	adds	r7, #20
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10a      	bne.n	8003f6a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f58:	f383 8811 	msr	BASEPRI, r3
 8003f5c:	f3bf 8f6f 	isb	sy
 8003f60:	f3bf 8f4f 	dsb	sy
 8003f64:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003f66:	bf00      	nop
 8003f68:	e7fe      	b.n	8003f68 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003f6a:	f002 fc3b 	bl	80067e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f76:	68f9      	ldr	r1, [r7, #12]
 8003f78:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f7a:	fb01 f303 	mul.w	r3, r1, r3
 8003f7e:	441a      	add	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	68f9      	ldr	r1, [r7, #12]
 8003f9e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003fa0:	fb01 f303 	mul.w	r3, r1, r3
 8003fa4:	441a      	add	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	22ff      	movs	r2, #255	; 0xff
 8003fae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	22ff      	movs	r2, #255	; 0xff
 8003fb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d114      	bne.n	8003fea <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d01a      	beq.n	8003ffe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	3310      	adds	r3, #16
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f001 fbf1 	bl	80057b4 <xTaskRemoveFromEventList>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d012      	beq.n	8003ffe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003fd8:	4b0c      	ldr	r3, [pc, #48]	; (800400c <xQueueGenericReset+0xcc>)
 8003fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	f3bf 8f4f 	dsb	sy
 8003fe4:	f3bf 8f6f 	isb	sy
 8003fe8:	e009      	b.n	8003ffe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	3310      	adds	r3, #16
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7ff fef2 	bl	8003dd8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	3324      	adds	r3, #36	; 0x24
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7ff feed 	bl	8003dd8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003ffe:	f002 fc21 	bl	8006844 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004002:	2301      	movs	r3, #1
}
 8004004:	4618      	mov	r0, r3
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	e000ed04 	.word	0xe000ed04

08004010 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004010:	b580      	push	{r7, lr}
 8004012:	b08e      	sub	sp, #56	; 0x38
 8004014:	af02      	add	r7, sp, #8
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
 800401c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10a      	bne.n	800403a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004028:	f383 8811 	msr	BASEPRI, r3
 800402c:	f3bf 8f6f 	isb	sy
 8004030:	f3bf 8f4f 	dsb	sy
 8004034:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004036:	bf00      	nop
 8004038:	e7fe      	b.n	8004038 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10a      	bne.n	8004056 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004044:	f383 8811 	msr	BASEPRI, r3
 8004048:	f3bf 8f6f 	isb	sy
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004052:	bf00      	nop
 8004054:	e7fe      	b.n	8004054 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d002      	beq.n	8004062 <xQueueGenericCreateStatic+0x52>
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <xQueueGenericCreateStatic+0x56>
 8004062:	2301      	movs	r3, #1
 8004064:	e000      	b.n	8004068 <xQueueGenericCreateStatic+0x58>
 8004066:	2300      	movs	r3, #0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d10a      	bne.n	8004082 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800406c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004070:	f383 8811 	msr	BASEPRI, r3
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	623b      	str	r3, [r7, #32]
}
 800407e:	bf00      	nop
 8004080:	e7fe      	b.n	8004080 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d102      	bne.n	800408e <xQueueGenericCreateStatic+0x7e>
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <xQueueGenericCreateStatic+0x82>
 800408e:	2301      	movs	r3, #1
 8004090:	e000      	b.n	8004094 <xQueueGenericCreateStatic+0x84>
 8004092:	2300      	movs	r3, #0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10a      	bne.n	80040ae <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409c:	f383 8811 	msr	BASEPRI, r3
 80040a0:	f3bf 8f6f 	isb	sy
 80040a4:	f3bf 8f4f 	dsb	sy
 80040a8:	61fb      	str	r3, [r7, #28]
}
 80040aa:	bf00      	nop
 80040ac:	e7fe      	b.n	80040ac <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80040ae:	2350      	movs	r3, #80	; 0x50
 80040b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	2b50      	cmp	r3, #80	; 0x50
 80040b6:	d00a      	beq.n	80040ce <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80040b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040bc:	f383 8811 	msr	BASEPRI, r3
 80040c0:	f3bf 8f6f 	isb	sy
 80040c4:	f3bf 8f4f 	dsb	sy
 80040c8:	61bb      	str	r3, [r7, #24]
}
 80040ca:	bf00      	nop
 80040cc:	e7fe      	b.n	80040cc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80040ce:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80040d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00d      	beq.n	80040f6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80040da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80040e2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80040e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	4613      	mov	r3, r2
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	68b9      	ldr	r1, [r7, #8]
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f000 f83f 	bl	8004174 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80040f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3730      	adds	r7, #48	; 0x30
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004100:	b580      	push	{r7, lr}
 8004102:	b08a      	sub	sp, #40	; 0x28
 8004104:	af02      	add	r7, sp, #8
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	4613      	mov	r3, r2
 800410c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10a      	bne.n	800412a <xQueueGenericCreate+0x2a>
	__asm volatile
 8004114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004118:	f383 8811 	msr	BASEPRI, r3
 800411c:	f3bf 8f6f 	isb	sy
 8004120:	f3bf 8f4f 	dsb	sy
 8004124:	613b      	str	r3, [r7, #16]
}
 8004126:	bf00      	nop
 8004128:	e7fe      	b.n	8004128 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	68ba      	ldr	r2, [r7, #8]
 800412e:	fb02 f303 	mul.w	r3, r2, r3
 8004132:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	3350      	adds	r3, #80	; 0x50
 8004138:	4618      	mov	r0, r3
 800413a:	f002 fc75 	bl	8006a28 <pvPortMalloc>
 800413e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d011      	beq.n	800416a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	3350      	adds	r3, #80	; 0x50
 800414e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004158:	79fa      	ldrb	r2, [r7, #7]
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	4613      	mov	r3, r2
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	68b9      	ldr	r1, [r7, #8]
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f000 f805 	bl	8004174 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800416a:	69bb      	ldr	r3, [r7, #24]
	}
 800416c:	4618      	mov	r0, r3
 800416e:	3720      	adds	r7, #32
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
 8004180:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d103      	bne.n	8004190 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	69ba      	ldr	r2, [r7, #24]
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	e002      	b.n	8004196 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80041a2:	2101      	movs	r1, #1
 80041a4:	69b8      	ldr	r0, [r7, #24]
 80041a6:	f7ff fecb 	bl	8003f40 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	78fa      	ldrb	r2, [r7, #3]
 80041ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80041b2:	bf00      	nop
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b08a      	sub	sp, #40	; 0x28
 80041be:	af02      	add	r7, sp, #8
 80041c0:	60f8      	str	r0, [r7, #12]
 80041c2:	60b9      	str	r1, [r7, #8]
 80041c4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d10a      	bne.n	80041e2 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80041cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d0:	f383 8811 	msr	BASEPRI, r3
 80041d4:	f3bf 8f6f 	isb	sy
 80041d8:	f3bf 8f4f 	dsb	sy
 80041dc:	61bb      	str	r3, [r7, #24]
}
 80041de:	bf00      	nop
 80041e0:	e7fe      	b.n	80041e0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d90a      	bls.n	8004200 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80041ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ee:	f383 8811 	msr	BASEPRI, r3
 80041f2:	f3bf 8f6f 	isb	sy
 80041f6:	f3bf 8f4f 	dsb	sy
 80041fa:	617b      	str	r3, [r7, #20]
}
 80041fc:	bf00      	nop
 80041fe:	e7fe      	b.n	80041fe <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004200:	2302      	movs	r3, #2
 8004202:	9300      	str	r3, [sp, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	2100      	movs	r1, #0
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f7ff ff00 	bl	8004010 <xQueueGenericCreateStatic>
 8004210:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d002      	beq.n	800421e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800421e:	69fb      	ldr	r3, [r7, #28]
	}
 8004220:	4618      	mov	r0, r3
 8004222:	3720      	adds	r7, #32
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10a      	bne.n	800424e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8004238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423c:	f383 8811 	msr	BASEPRI, r3
 8004240:	f3bf 8f6f 	isb	sy
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	613b      	str	r3, [r7, #16]
}
 800424a:	bf00      	nop
 800424c:	e7fe      	b.n	800424c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800424e:	683a      	ldr	r2, [r7, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	429a      	cmp	r2, r3
 8004254:	d90a      	bls.n	800426c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8004256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425a:	f383 8811 	msr	BASEPRI, r3
 800425e:	f3bf 8f6f 	isb	sy
 8004262:	f3bf 8f4f 	dsb	sy
 8004266:	60fb      	str	r3, [r7, #12]
}
 8004268:	bf00      	nop
 800426a:	e7fe      	b.n	800426a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800426c:	2202      	movs	r2, #2
 800426e:	2100      	movs	r1, #0
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7ff ff45 	bl	8004100 <xQueueGenericCreate>
 8004276:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d002      	beq.n	8004284 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004284:	697b      	ldr	r3, [r7, #20]
	}
 8004286:	4618      	mov	r0, r3
 8004288:	3718      	adds	r7, #24
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
	...

08004290 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b08e      	sub	sp, #56	; 0x38
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
 800429c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800429e:	2300      	movs	r3, #0
 80042a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80042a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d10a      	bne.n	80042c2 <xQueueGenericSend+0x32>
	__asm volatile
 80042ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b0:	f383 8811 	msr	BASEPRI, r3
 80042b4:	f3bf 8f6f 	isb	sy
 80042b8:	f3bf 8f4f 	dsb	sy
 80042bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80042be:	bf00      	nop
 80042c0:	e7fe      	b.n	80042c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d103      	bne.n	80042d0 <xQueueGenericSend+0x40>
 80042c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d101      	bne.n	80042d4 <xQueueGenericSend+0x44>
 80042d0:	2301      	movs	r3, #1
 80042d2:	e000      	b.n	80042d6 <xQueueGenericSend+0x46>
 80042d4:	2300      	movs	r3, #0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10a      	bne.n	80042f0 <xQueueGenericSend+0x60>
	__asm volatile
 80042da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042de:	f383 8811 	msr	BASEPRI, r3
 80042e2:	f3bf 8f6f 	isb	sy
 80042e6:	f3bf 8f4f 	dsb	sy
 80042ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80042ec:	bf00      	nop
 80042ee:	e7fe      	b.n	80042ee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d103      	bne.n	80042fe <xQueueGenericSend+0x6e>
 80042f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d101      	bne.n	8004302 <xQueueGenericSend+0x72>
 80042fe:	2301      	movs	r3, #1
 8004300:	e000      	b.n	8004304 <xQueueGenericSend+0x74>
 8004302:	2300      	movs	r3, #0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10a      	bne.n	800431e <xQueueGenericSend+0x8e>
	__asm volatile
 8004308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430c:	f383 8811 	msr	BASEPRI, r3
 8004310:	f3bf 8f6f 	isb	sy
 8004314:	f3bf 8f4f 	dsb	sy
 8004318:	623b      	str	r3, [r7, #32]
}
 800431a:	bf00      	nop
 800431c:	e7fe      	b.n	800431c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800431e:	f001 fc07 	bl	8005b30 <xTaskGetSchedulerState>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d102      	bne.n	800432e <xQueueGenericSend+0x9e>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <xQueueGenericSend+0xa2>
 800432e:	2301      	movs	r3, #1
 8004330:	e000      	b.n	8004334 <xQueueGenericSend+0xa4>
 8004332:	2300      	movs	r3, #0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10a      	bne.n	800434e <xQueueGenericSend+0xbe>
	__asm volatile
 8004338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433c:	f383 8811 	msr	BASEPRI, r3
 8004340:	f3bf 8f6f 	isb	sy
 8004344:	f3bf 8f4f 	dsb	sy
 8004348:	61fb      	str	r3, [r7, #28]
}
 800434a:	bf00      	nop
 800434c:	e7fe      	b.n	800434c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800434e:	f002 fa49 	bl	80067e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004354:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435a:	429a      	cmp	r2, r3
 800435c:	d302      	bcc.n	8004364 <xQueueGenericSend+0xd4>
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	2b02      	cmp	r3, #2
 8004362:	d129      	bne.n	80043b8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004364:	683a      	ldr	r2, [r7, #0]
 8004366:	68b9      	ldr	r1, [r7, #8]
 8004368:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800436a:	f000 fc5e 	bl	8004c2a <prvCopyDataToQueue>
 800436e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004374:	2b00      	cmp	r3, #0
 8004376:	d010      	beq.n	800439a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437a:	3324      	adds	r3, #36	; 0x24
 800437c:	4618      	mov	r0, r3
 800437e:	f001 fa19 	bl	80057b4 <xTaskRemoveFromEventList>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d013      	beq.n	80043b0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004388:	4b3f      	ldr	r3, [pc, #252]	; (8004488 <xQueueGenericSend+0x1f8>)
 800438a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800438e:	601a      	str	r2, [r3, #0]
 8004390:	f3bf 8f4f 	dsb	sy
 8004394:	f3bf 8f6f 	isb	sy
 8004398:	e00a      	b.n	80043b0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800439a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800439c:	2b00      	cmp	r3, #0
 800439e:	d007      	beq.n	80043b0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80043a0:	4b39      	ldr	r3, [pc, #228]	; (8004488 <xQueueGenericSend+0x1f8>)
 80043a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043a6:	601a      	str	r2, [r3, #0]
 80043a8:	f3bf 8f4f 	dsb	sy
 80043ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80043b0:	f002 fa48 	bl	8006844 <vPortExitCritical>
				return pdPASS;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e063      	b.n	8004480 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d103      	bne.n	80043c6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80043be:	f002 fa41 	bl	8006844 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80043c2:	2300      	movs	r3, #0
 80043c4:	e05c      	b.n	8004480 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80043c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d106      	bne.n	80043da <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043cc:	f107 0314 	add.w	r3, r7, #20
 80043d0:	4618      	mov	r0, r3
 80043d2:	f001 fa53 	bl	800587c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80043d6:	2301      	movs	r3, #1
 80043d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80043da:	f002 fa33 	bl	8006844 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043de:	f000 ffc5 	bl	800536c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043e2:	f002 f9ff 	bl	80067e4 <vPortEnterCritical>
 80043e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043ec:	b25b      	sxtb	r3, r3
 80043ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f2:	d103      	bne.n	80043fc <xQueueGenericSend+0x16c>
 80043f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004402:	b25b      	sxtb	r3, r3
 8004404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004408:	d103      	bne.n	8004412 <xQueueGenericSend+0x182>
 800440a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440c:	2200      	movs	r2, #0
 800440e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004412:	f002 fa17 	bl	8006844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004416:	1d3a      	adds	r2, r7, #4
 8004418:	f107 0314 	add.w	r3, r7, #20
 800441c:	4611      	mov	r1, r2
 800441e:	4618      	mov	r0, r3
 8004420:	f001 fa42 	bl	80058a8 <xTaskCheckForTimeOut>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d124      	bne.n	8004474 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800442a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800442c:	f000 fcf5 	bl	8004e1a <prvIsQueueFull>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d018      	beq.n	8004468 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004438:	3310      	adds	r3, #16
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	4611      	mov	r1, r2
 800443e:	4618      	mov	r0, r3
 8004440:	f001 f968 	bl	8005714 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004444:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004446:	f000 fc80 	bl	8004d4a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800444a:	f000 ff9d 	bl	8005388 <xTaskResumeAll>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	f47f af7c 	bne.w	800434e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004456:	4b0c      	ldr	r3, [pc, #48]	; (8004488 <xQueueGenericSend+0x1f8>)
 8004458:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	f3bf 8f4f 	dsb	sy
 8004462:	f3bf 8f6f 	isb	sy
 8004466:	e772      	b.n	800434e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004468:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800446a:	f000 fc6e 	bl	8004d4a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800446e:	f000 ff8b 	bl	8005388 <xTaskResumeAll>
 8004472:	e76c      	b.n	800434e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004474:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004476:	f000 fc68 	bl	8004d4a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800447a:	f000 ff85 	bl	8005388 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800447e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004480:	4618      	mov	r0, r3
 8004482:	3738      	adds	r7, #56	; 0x38
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	e000ed04 	.word	0xe000ed04

0800448c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b090      	sub	sp, #64	; 0x40
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
 8004498:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800449e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10a      	bne.n	80044ba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80044a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a8:	f383 8811 	msr	BASEPRI, r3
 80044ac:	f3bf 8f6f 	isb	sy
 80044b0:	f3bf 8f4f 	dsb	sy
 80044b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80044b6:	bf00      	nop
 80044b8:	e7fe      	b.n	80044b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d103      	bne.n	80044c8 <xQueueGenericSendFromISR+0x3c>
 80044c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <xQueueGenericSendFromISR+0x40>
 80044c8:	2301      	movs	r3, #1
 80044ca:	e000      	b.n	80044ce <xQueueGenericSendFromISR+0x42>
 80044cc:	2300      	movs	r3, #0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10a      	bne.n	80044e8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80044d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d6:	f383 8811 	msr	BASEPRI, r3
 80044da:	f3bf 8f6f 	isb	sy
 80044de:	f3bf 8f4f 	dsb	sy
 80044e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80044e4:	bf00      	nop
 80044e6:	e7fe      	b.n	80044e6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d103      	bne.n	80044f6 <xQueueGenericSendFromISR+0x6a>
 80044ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d101      	bne.n	80044fa <xQueueGenericSendFromISR+0x6e>
 80044f6:	2301      	movs	r3, #1
 80044f8:	e000      	b.n	80044fc <xQueueGenericSendFromISR+0x70>
 80044fa:	2300      	movs	r3, #0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10a      	bne.n	8004516 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004504:	f383 8811 	msr	BASEPRI, r3
 8004508:	f3bf 8f6f 	isb	sy
 800450c:	f3bf 8f4f 	dsb	sy
 8004510:	623b      	str	r3, [r7, #32]
}
 8004512:	bf00      	nop
 8004514:	e7fe      	b.n	8004514 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004516:	f002 fa47 	bl	80069a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800451a:	f3ef 8211 	mrs	r2, BASEPRI
 800451e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004522:	f383 8811 	msr	BASEPRI, r3
 8004526:	f3bf 8f6f 	isb	sy
 800452a:	f3bf 8f4f 	dsb	sy
 800452e:	61fa      	str	r2, [r7, #28]
 8004530:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004532:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004534:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004538:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800453a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800453c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453e:	429a      	cmp	r2, r3
 8004540:	d302      	bcc.n	8004548 <xQueueGenericSendFromISR+0xbc>
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	2b02      	cmp	r3, #2
 8004546:	d12f      	bne.n	80045a8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800454a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800454e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004556:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004558:	683a      	ldr	r2, [r7, #0]
 800455a:	68b9      	ldr	r1, [r7, #8]
 800455c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800455e:	f000 fb64 	bl	8004c2a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004562:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456a:	d112      	bne.n	8004592 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800456c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	2b00      	cmp	r3, #0
 8004572:	d016      	beq.n	80045a2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004576:	3324      	adds	r3, #36	; 0x24
 8004578:	4618      	mov	r0, r3
 800457a:	f001 f91b 	bl	80057b4 <xTaskRemoveFromEventList>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00e      	beq.n	80045a2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00b      	beq.n	80045a2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	601a      	str	r2, [r3, #0]
 8004590:	e007      	b.n	80045a2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004592:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004596:	3301      	adds	r3, #1
 8004598:	b2db      	uxtb	r3, r3
 800459a:	b25a      	sxtb	r2, r3
 800459c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800459e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80045a2:	2301      	movs	r3, #1
 80045a4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80045a6:	e001      	b.n	80045ac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80045a8:	2300      	movs	r3, #0
 80045aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ae:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80045b6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80045b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3740      	adds	r7, #64	; 0x40
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b08e      	sub	sp, #56	; 0x38
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
 80045ca:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80045d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10a      	bne.n	80045ec <xQueueGiveFromISR+0x2a>
	__asm volatile
 80045d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045da:	f383 8811 	msr	BASEPRI, r3
 80045de:	f3bf 8f6f 	isb	sy
 80045e2:	f3bf 8f4f 	dsb	sy
 80045e6:	623b      	str	r3, [r7, #32]
}
 80045e8:	bf00      	nop
 80045ea:	e7fe      	b.n	80045ea <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80045ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00a      	beq.n	800460a <xQueueGiveFromISR+0x48>
	__asm volatile
 80045f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f8:	f383 8811 	msr	BASEPRI, r3
 80045fc:	f3bf 8f6f 	isb	sy
 8004600:	f3bf 8f4f 	dsb	sy
 8004604:	61fb      	str	r3, [r7, #28]
}
 8004606:	bf00      	nop
 8004608:	e7fe      	b.n	8004608 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800460a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d103      	bne.n	800461a <xQueueGiveFromISR+0x58>
 8004612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <xQueueGiveFromISR+0x5c>
 800461a:	2301      	movs	r3, #1
 800461c:	e000      	b.n	8004620 <xQueueGiveFromISR+0x5e>
 800461e:	2300      	movs	r3, #0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10a      	bne.n	800463a <xQueueGiveFromISR+0x78>
	__asm volatile
 8004624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004628:	f383 8811 	msr	BASEPRI, r3
 800462c:	f3bf 8f6f 	isb	sy
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	61bb      	str	r3, [r7, #24]
}
 8004636:	bf00      	nop
 8004638:	e7fe      	b.n	8004638 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800463a:	f002 f9b5 	bl	80069a8 <vPortValidateInterruptPriority>
	__asm volatile
 800463e:	f3ef 8211 	mrs	r2, BASEPRI
 8004642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004646:	f383 8811 	msr	BASEPRI, r3
 800464a:	f3bf 8f6f 	isb	sy
 800464e:	f3bf 8f4f 	dsb	sy
 8004652:	617a      	str	r2, [r7, #20]
 8004654:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004656:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004658:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800465a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004664:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004666:	429a      	cmp	r2, r3
 8004668:	d22b      	bcs.n	80046c2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800466a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004670:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004676:	1c5a      	adds	r2, r3, #1
 8004678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800467c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004684:	d112      	bne.n	80046ac <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	2b00      	cmp	r3, #0
 800468c:	d016      	beq.n	80046bc <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800468e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004690:	3324      	adds	r3, #36	; 0x24
 8004692:	4618      	mov	r0, r3
 8004694:	f001 f88e 	bl	80057b4 <xTaskRemoveFromEventList>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00e      	beq.n	80046bc <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00b      	beq.n	80046bc <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	2201      	movs	r2, #1
 80046a8:	601a      	str	r2, [r3, #0]
 80046aa:	e007      	b.n	80046bc <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80046ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046b0:	3301      	adds	r3, #1
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	b25a      	sxtb	r2, r3
 80046b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80046bc:	2301      	movs	r3, #1
 80046be:	637b      	str	r3, [r7, #52]	; 0x34
 80046c0:	e001      	b.n	80046c6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80046c2:	2300      	movs	r3, #0
 80046c4:	637b      	str	r3, [r7, #52]	; 0x34
 80046c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f383 8811 	msr	BASEPRI, r3
}
 80046d0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80046d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3738      	adds	r7, #56	; 0x38
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b08c      	sub	sp, #48	; 0x30
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80046e8:	2300      	movs	r3, #0
 80046ea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80046f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10a      	bne.n	800470c <xQueueReceive+0x30>
	__asm volatile
 80046f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fa:	f383 8811 	msr	BASEPRI, r3
 80046fe:	f3bf 8f6f 	isb	sy
 8004702:	f3bf 8f4f 	dsb	sy
 8004706:	623b      	str	r3, [r7, #32]
}
 8004708:	bf00      	nop
 800470a:	e7fe      	b.n	800470a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d103      	bne.n	800471a <xQueueReceive+0x3e>
 8004712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	2b00      	cmp	r3, #0
 8004718:	d101      	bne.n	800471e <xQueueReceive+0x42>
 800471a:	2301      	movs	r3, #1
 800471c:	e000      	b.n	8004720 <xQueueReceive+0x44>
 800471e:	2300      	movs	r3, #0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10a      	bne.n	800473a <xQueueReceive+0x5e>
	__asm volatile
 8004724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004728:	f383 8811 	msr	BASEPRI, r3
 800472c:	f3bf 8f6f 	isb	sy
 8004730:	f3bf 8f4f 	dsb	sy
 8004734:	61fb      	str	r3, [r7, #28]
}
 8004736:	bf00      	nop
 8004738:	e7fe      	b.n	8004738 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800473a:	f001 f9f9 	bl	8005b30 <xTaskGetSchedulerState>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d102      	bne.n	800474a <xQueueReceive+0x6e>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <xQueueReceive+0x72>
 800474a:	2301      	movs	r3, #1
 800474c:	e000      	b.n	8004750 <xQueueReceive+0x74>
 800474e:	2300      	movs	r3, #0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10a      	bne.n	800476a <xQueueReceive+0x8e>
	__asm volatile
 8004754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004758:	f383 8811 	msr	BASEPRI, r3
 800475c:	f3bf 8f6f 	isb	sy
 8004760:	f3bf 8f4f 	dsb	sy
 8004764:	61bb      	str	r3, [r7, #24]
}
 8004766:	bf00      	nop
 8004768:	e7fe      	b.n	8004768 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800476a:	f002 f83b 	bl	80067e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800476e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004772:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	2b00      	cmp	r3, #0
 8004778:	d01f      	beq.n	80047ba <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800477a:	68b9      	ldr	r1, [r7, #8]
 800477c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800477e:	f000 fabe 	bl	8004cfe <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004784:	1e5a      	subs	r2, r3, #1
 8004786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004788:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800478a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00f      	beq.n	80047b2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004794:	3310      	adds	r3, #16
 8004796:	4618      	mov	r0, r3
 8004798:	f001 f80c 	bl	80057b4 <xTaskRemoveFromEventList>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d007      	beq.n	80047b2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80047a2:	4b3d      	ldr	r3, [pc, #244]	; (8004898 <xQueueReceive+0x1bc>)
 80047a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047a8:	601a      	str	r2, [r3, #0]
 80047aa:	f3bf 8f4f 	dsb	sy
 80047ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80047b2:	f002 f847 	bl	8006844 <vPortExitCritical>
				return pdPASS;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e069      	b.n	800488e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d103      	bne.n	80047c8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80047c0:	f002 f840 	bl	8006844 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80047c4:	2300      	movs	r3, #0
 80047c6:	e062      	b.n	800488e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d106      	bne.n	80047dc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047ce:	f107 0310 	add.w	r3, r7, #16
 80047d2:	4618      	mov	r0, r3
 80047d4:	f001 f852 	bl	800587c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047d8:	2301      	movs	r3, #1
 80047da:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047dc:	f002 f832 	bl	8006844 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047e0:	f000 fdc4 	bl	800536c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047e4:	f001 fffe 	bl	80067e4 <vPortEnterCritical>
 80047e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047ee:	b25b      	sxtb	r3, r3
 80047f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f4:	d103      	bne.n	80047fe <xQueueReceive+0x122>
 80047f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004800:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004804:	b25b      	sxtb	r3, r3
 8004806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480a:	d103      	bne.n	8004814 <xQueueReceive+0x138>
 800480c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480e:	2200      	movs	r2, #0
 8004810:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004814:	f002 f816 	bl	8006844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004818:	1d3a      	adds	r2, r7, #4
 800481a:	f107 0310 	add.w	r3, r7, #16
 800481e:	4611      	mov	r1, r2
 8004820:	4618      	mov	r0, r3
 8004822:	f001 f841 	bl	80058a8 <xTaskCheckForTimeOut>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d123      	bne.n	8004874 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800482c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800482e:	f000 fade 	bl	8004dee <prvIsQueueEmpty>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d017      	beq.n	8004868 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483a:	3324      	adds	r3, #36	; 0x24
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	4611      	mov	r1, r2
 8004840:	4618      	mov	r0, r3
 8004842:	f000 ff67 	bl	8005714 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004846:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004848:	f000 fa7f 	bl	8004d4a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800484c:	f000 fd9c 	bl	8005388 <xTaskResumeAll>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d189      	bne.n	800476a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004856:	4b10      	ldr	r3, [pc, #64]	; (8004898 <xQueueReceive+0x1bc>)
 8004858:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800485c:	601a      	str	r2, [r3, #0]
 800485e:	f3bf 8f4f 	dsb	sy
 8004862:	f3bf 8f6f 	isb	sy
 8004866:	e780      	b.n	800476a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004868:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800486a:	f000 fa6e 	bl	8004d4a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800486e:	f000 fd8b 	bl	8005388 <xTaskResumeAll>
 8004872:	e77a      	b.n	800476a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004874:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004876:	f000 fa68 	bl	8004d4a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800487a:	f000 fd85 	bl	8005388 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800487e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004880:	f000 fab5 	bl	8004dee <prvIsQueueEmpty>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	f43f af6f 	beq.w	800476a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800488c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800488e:	4618      	mov	r0, r3
 8004890:	3730      	adds	r7, #48	; 0x30
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	e000ed04 	.word	0xe000ed04

0800489c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b08e      	sub	sp, #56	; 0x38
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80048a6:	2300      	movs	r3, #0
 80048a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80048ae:	2300      	movs	r3, #0
 80048b0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80048b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d10a      	bne.n	80048ce <xQueueSemaphoreTake+0x32>
	__asm volatile
 80048b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048bc:	f383 8811 	msr	BASEPRI, r3
 80048c0:	f3bf 8f6f 	isb	sy
 80048c4:	f3bf 8f4f 	dsb	sy
 80048c8:	623b      	str	r3, [r7, #32]
}
 80048ca:	bf00      	nop
 80048cc:	e7fe      	b.n	80048cc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80048ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00a      	beq.n	80048ec <xQueueSemaphoreTake+0x50>
	__asm volatile
 80048d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048da:	f383 8811 	msr	BASEPRI, r3
 80048de:	f3bf 8f6f 	isb	sy
 80048e2:	f3bf 8f4f 	dsb	sy
 80048e6:	61fb      	str	r3, [r7, #28]
}
 80048e8:	bf00      	nop
 80048ea:	e7fe      	b.n	80048ea <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048ec:	f001 f920 	bl	8005b30 <xTaskGetSchedulerState>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d102      	bne.n	80048fc <xQueueSemaphoreTake+0x60>
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d101      	bne.n	8004900 <xQueueSemaphoreTake+0x64>
 80048fc:	2301      	movs	r3, #1
 80048fe:	e000      	b.n	8004902 <xQueueSemaphoreTake+0x66>
 8004900:	2300      	movs	r3, #0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10a      	bne.n	800491c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490a:	f383 8811 	msr	BASEPRI, r3
 800490e:	f3bf 8f6f 	isb	sy
 8004912:	f3bf 8f4f 	dsb	sy
 8004916:	61bb      	str	r3, [r7, #24]
}
 8004918:	bf00      	nop
 800491a:	e7fe      	b.n	800491a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800491c:	f001 ff62 	bl	80067e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004924:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004928:	2b00      	cmp	r3, #0
 800492a:	d024      	beq.n	8004976 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800492c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492e:	1e5a      	subs	r2, r3, #1
 8004930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004932:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d104      	bne.n	8004946 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800493c:	f001 fa6e 	bl	8005e1c <pvTaskIncrementMutexHeldCount>
 8004940:	4602      	mov	r2, r0
 8004942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004944:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00f      	beq.n	800496e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800494e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004950:	3310      	adds	r3, #16
 8004952:	4618      	mov	r0, r3
 8004954:	f000 ff2e 	bl	80057b4 <xTaskRemoveFromEventList>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d007      	beq.n	800496e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800495e:	4b54      	ldr	r3, [pc, #336]	; (8004ab0 <xQueueSemaphoreTake+0x214>)
 8004960:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004964:	601a      	str	r2, [r3, #0]
 8004966:	f3bf 8f4f 	dsb	sy
 800496a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800496e:	f001 ff69 	bl	8006844 <vPortExitCritical>
				return pdPASS;
 8004972:	2301      	movs	r3, #1
 8004974:	e097      	b.n	8004aa6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d111      	bne.n	80049a0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800497c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00a      	beq.n	8004998 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004986:	f383 8811 	msr	BASEPRI, r3
 800498a:	f3bf 8f6f 	isb	sy
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	617b      	str	r3, [r7, #20]
}
 8004994:	bf00      	nop
 8004996:	e7fe      	b.n	8004996 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004998:	f001 ff54 	bl	8006844 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800499c:	2300      	movs	r3, #0
 800499e:	e082      	b.n	8004aa6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80049a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d106      	bne.n	80049b4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80049a6:	f107 030c 	add.w	r3, r7, #12
 80049aa:	4618      	mov	r0, r3
 80049ac:	f000 ff66 	bl	800587c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80049b0:	2301      	movs	r3, #1
 80049b2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80049b4:	f001 ff46 	bl	8006844 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80049b8:	f000 fcd8 	bl	800536c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80049bc:	f001 ff12 	bl	80067e4 <vPortEnterCritical>
 80049c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049c6:	b25b      	sxtb	r3, r3
 80049c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049cc:	d103      	bne.n	80049d6 <xQueueSemaphoreTake+0x13a>
 80049ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049dc:	b25b      	sxtb	r3, r3
 80049de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e2:	d103      	bne.n	80049ec <xQueueSemaphoreTake+0x150>
 80049e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049ec:	f001 ff2a 	bl	8006844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80049f0:	463a      	mov	r2, r7
 80049f2:	f107 030c 	add.w	r3, r7, #12
 80049f6:	4611      	mov	r1, r2
 80049f8:	4618      	mov	r0, r3
 80049fa:	f000 ff55 	bl	80058a8 <xTaskCheckForTimeOut>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d132      	bne.n	8004a6a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a06:	f000 f9f2 	bl	8004dee <prvIsQueueEmpty>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d026      	beq.n	8004a5e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d109      	bne.n	8004a2c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004a18:	f001 fee4 	bl	80067e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	4618      	mov	r0, r3
 8004a22:	f001 f8a3 	bl	8005b6c <xTaskPriorityInherit>
 8004a26:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004a28:	f001 ff0c 	bl	8006844 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a2e:	3324      	adds	r3, #36	; 0x24
 8004a30:	683a      	ldr	r2, [r7, #0]
 8004a32:	4611      	mov	r1, r2
 8004a34:	4618      	mov	r0, r3
 8004a36:	f000 fe6d 	bl	8005714 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004a3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a3c:	f000 f985 	bl	8004d4a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004a40:	f000 fca2 	bl	8005388 <xTaskResumeAll>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f47f af68 	bne.w	800491c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004a4c:	4b18      	ldr	r3, [pc, #96]	; (8004ab0 <xQueueSemaphoreTake+0x214>)
 8004a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a52:	601a      	str	r2, [r3, #0]
 8004a54:	f3bf 8f4f 	dsb	sy
 8004a58:	f3bf 8f6f 	isb	sy
 8004a5c:	e75e      	b.n	800491c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004a5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a60:	f000 f973 	bl	8004d4a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a64:	f000 fc90 	bl	8005388 <xTaskResumeAll>
 8004a68:	e758      	b.n	800491c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004a6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a6c:	f000 f96d 	bl	8004d4a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a70:	f000 fc8a 	bl	8005388 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a76:	f000 f9ba 	bl	8004dee <prvIsQueueEmpty>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f43f af4d 	beq.w	800491c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00d      	beq.n	8004aa4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004a88:	f001 feac 	bl	80067e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004a8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a8e:	f000 f8b4 	bl	8004bfa <prvGetDisinheritPriorityAfterTimeout>
 8004a92:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f001 f93c 	bl	8005d18 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004aa0:	f001 fed0 	bl	8006844 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004aa4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3738      	adds	r7, #56	; 0x38
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	e000ed04 	.word	0xe000ed04

08004ab4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b08e      	sub	sp, #56	; 0x38
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10a      	bne.n	8004ae0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ace:	f383 8811 	msr	BASEPRI, r3
 8004ad2:	f3bf 8f6f 	isb	sy
 8004ad6:	f3bf 8f4f 	dsb	sy
 8004ada:	623b      	str	r3, [r7, #32]
}
 8004adc:	bf00      	nop
 8004ade:	e7fe      	b.n	8004ade <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d103      	bne.n	8004aee <xQueueReceiveFromISR+0x3a>
 8004ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <xQueueReceiveFromISR+0x3e>
 8004aee:	2301      	movs	r3, #1
 8004af0:	e000      	b.n	8004af4 <xQueueReceiveFromISR+0x40>
 8004af2:	2300      	movs	r3, #0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10a      	bne.n	8004b0e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afc:	f383 8811 	msr	BASEPRI, r3
 8004b00:	f3bf 8f6f 	isb	sy
 8004b04:	f3bf 8f4f 	dsb	sy
 8004b08:	61fb      	str	r3, [r7, #28]
}
 8004b0a:	bf00      	nop
 8004b0c:	e7fe      	b.n	8004b0c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b0e:	f001 ff4b 	bl	80069a8 <vPortValidateInterruptPriority>
	__asm volatile
 8004b12:	f3ef 8211 	mrs	r2, BASEPRI
 8004b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1a:	f383 8811 	msr	BASEPRI, r3
 8004b1e:	f3bf 8f6f 	isb	sy
 8004b22:	f3bf 8f4f 	dsb	sy
 8004b26:	61ba      	str	r2, [r7, #24]
 8004b28:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004b2a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b32:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d02f      	beq.n	8004b9a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004b44:	68b9      	ldr	r1, [r7, #8]
 8004b46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b48:	f000 f8d9 	bl	8004cfe <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4e:	1e5a      	subs	r2, r3, #1
 8004b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b52:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004b54:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b5c:	d112      	bne.n	8004b84 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d016      	beq.n	8004b94 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b68:	3310      	adds	r3, #16
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f000 fe22 	bl	80057b4 <xTaskRemoveFromEventList>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00e      	beq.n	8004b94 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00b      	beq.n	8004b94 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	601a      	str	r2, [r3, #0]
 8004b82:	e007      	b.n	8004b94 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004b84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b88:	3301      	adds	r3, #1
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	b25a      	sxtb	r2, r3
 8004b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004b94:	2301      	movs	r3, #1
 8004b96:	637b      	str	r3, [r7, #52]	; 0x34
 8004b98:	e001      	b.n	8004b9e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	637b      	str	r3, [r7, #52]	; 0x34
 8004b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	f383 8811 	msr	BASEPRI, r3
}
 8004ba8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3738      	adds	r7, #56	; 0x38
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d10a      	bne.n	8004bdc <vQueueDelete+0x28>
	__asm volatile
 8004bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bca:	f383 8811 	msr	BASEPRI, r3
 8004bce:	f3bf 8f6f 	isb	sy
 8004bd2:	f3bf 8f4f 	dsb	sy
 8004bd6:	60bb      	str	r3, [r7, #8]
}
 8004bd8:	bf00      	nop
 8004bda:	e7fe      	b.n	8004bda <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f000 f95f 	bl	8004ea0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d102      	bne.n	8004bf2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f001 ffe7 	bl	8006bc0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004bf2:	bf00      	nop
 8004bf4:	3710      	adds	r7, #16
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b085      	sub	sp, #20
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d006      	beq.n	8004c18 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004c14:	60fb      	str	r3, [r7, #12]
 8004c16:	e001      	b.n	8004c1c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
	}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3714      	adds	r7, #20
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b086      	sub	sp, #24
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	60f8      	str	r0, [r7, #12]
 8004c32:	60b9      	str	r1, [r7, #8]
 8004c34:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004c36:	2300      	movs	r3, #0
 8004c38:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10d      	bne.n	8004c64 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d14d      	bne.n	8004cec <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	4618      	mov	r0, r3
 8004c56:	f000 fff1 	bl	8005c3c <xTaskPriorityDisinherit>
 8004c5a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	609a      	str	r2, [r3, #8]
 8004c62:	e043      	b.n	8004cec <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d119      	bne.n	8004c9e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6858      	ldr	r0, [r3, #4]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c72:	461a      	mov	r2, r3
 8004c74:	68b9      	ldr	r1, [r7, #8]
 8004c76:	f002 f8e5 	bl	8006e44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	685a      	ldr	r2, [r3, #4]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c82:	441a      	add	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d32b      	bcc.n	8004cec <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	605a      	str	r2, [r3, #4]
 8004c9c:	e026      	b.n	8004cec <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	68d8      	ldr	r0, [r3, #12]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	68b9      	ldr	r1, [r7, #8]
 8004caa:	f002 f8cb 	bl	8006e44 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	68da      	ldr	r2, [r3, #12]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb6:	425b      	negs	r3, r3
 8004cb8:	441a      	add	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	68da      	ldr	r2, [r3, #12]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d207      	bcs.n	8004cda <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	689a      	ldr	r2, [r3, #8]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd2:	425b      	negs	r3, r3
 8004cd4:	441a      	add	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d105      	bne.n	8004cec <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d002      	beq.n	8004cec <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	1c5a      	adds	r2, r3, #1
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004cf4:	697b      	ldr	r3, [r7, #20]
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3718      	adds	r7, #24
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b082      	sub	sp, #8
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
 8004d06:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d018      	beq.n	8004d42 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	68da      	ldr	r2, [r3, #12]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d18:	441a      	add	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68da      	ldr	r2, [r3, #12]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d303      	bcc.n	8004d32 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68d9      	ldr	r1, [r3, #12]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	6838      	ldr	r0, [r7, #0]
 8004d3e:	f002 f881 	bl	8006e44 <memcpy>
	}
}
 8004d42:	bf00      	nop
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b084      	sub	sp, #16
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004d52:	f001 fd47 	bl	80067e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d5c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d5e:	e011      	b.n	8004d84 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d012      	beq.n	8004d8e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	3324      	adds	r3, #36	; 0x24
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f000 fd21 	bl	80057b4 <xTaskRemoveFromEventList>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d001      	beq.n	8004d7c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004d78:	f000 fdf8 	bl	800596c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004d7c:	7bfb      	ldrb	r3, [r7, #15]
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	dce9      	bgt.n	8004d60 <prvUnlockQueue+0x16>
 8004d8c:	e000      	b.n	8004d90 <prvUnlockQueue+0x46>
					break;
 8004d8e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	22ff      	movs	r2, #255	; 0xff
 8004d94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004d98:	f001 fd54 	bl	8006844 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004d9c:	f001 fd22 	bl	80067e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004da6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004da8:	e011      	b.n	8004dce <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d012      	beq.n	8004dd8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	3310      	adds	r3, #16
 8004db6:	4618      	mov	r0, r3
 8004db8:	f000 fcfc 	bl	80057b4 <xTaskRemoveFromEventList>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d001      	beq.n	8004dc6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004dc2:	f000 fdd3 	bl	800596c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004dc6:	7bbb      	ldrb	r3, [r7, #14]
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004dce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	dce9      	bgt.n	8004daa <prvUnlockQueue+0x60>
 8004dd6:	e000      	b.n	8004dda <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004dd8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	22ff      	movs	r2, #255	; 0xff
 8004dde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004de2:	f001 fd2f 	bl	8006844 <vPortExitCritical>
}
 8004de6:	bf00      	nop
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}

08004dee <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b084      	sub	sp, #16
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004df6:	f001 fcf5 	bl	80067e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d102      	bne.n	8004e08 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004e02:	2301      	movs	r3, #1
 8004e04:	60fb      	str	r3, [r7, #12]
 8004e06:	e001      	b.n	8004e0c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e0c:	f001 fd1a 	bl	8006844 <vPortExitCritical>

	return xReturn;
 8004e10:	68fb      	ldr	r3, [r7, #12]
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b084      	sub	sp, #16
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e22:	f001 fcdf 	bl	80067e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d102      	bne.n	8004e38 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004e32:	2301      	movs	r3, #1
 8004e34:	60fb      	str	r3, [r7, #12]
 8004e36:	e001      	b.n	8004e3c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e3c:	f001 fd02 	bl	8006844 <vPortExitCritical>

	return xReturn;
 8004e40:	68fb      	ldr	r3, [r7, #12]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
	...

08004e4c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e56:	2300      	movs	r3, #0
 8004e58:	60fb      	str	r3, [r7, #12]
 8004e5a:	e014      	b.n	8004e86 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004e5c:	4a0f      	ldr	r2, [pc, #60]	; (8004e9c <vQueueAddToRegistry+0x50>)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d10b      	bne.n	8004e80 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004e68:	490c      	ldr	r1, [pc, #48]	; (8004e9c <vQueueAddToRegistry+0x50>)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	683a      	ldr	r2, [r7, #0]
 8004e6e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004e72:	4a0a      	ldr	r2, [pc, #40]	; (8004e9c <vQueueAddToRegistry+0x50>)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	00db      	lsls	r3, r3, #3
 8004e78:	4413      	add	r3, r2
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004e7e:	e006      	b.n	8004e8e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	3301      	adds	r3, #1
 8004e84:	60fb      	str	r3, [r7, #12]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2b07      	cmp	r3, #7
 8004e8a:	d9e7      	bls.n	8004e5c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004e8c:	bf00      	nop
 8004e8e:	bf00      	nop
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	200007f0 	.word	0x200007f0

08004ea0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	60fb      	str	r3, [r7, #12]
 8004eac:	e016      	b.n	8004edc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004eae:	4a10      	ldr	r2, [pc, #64]	; (8004ef0 <vQueueUnregisterQueue+0x50>)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	00db      	lsls	r3, r3, #3
 8004eb4:	4413      	add	r3, r2
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d10b      	bne.n	8004ed6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004ebe:	4a0c      	ldr	r2, [pc, #48]	; (8004ef0 <vQueueUnregisterQueue+0x50>)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004ec8:	4a09      	ldr	r2, [pc, #36]	; (8004ef0 <vQueueUnregisterQueue+0x50>)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	00db      	lsls	r3, r3, #3
 8004ece:	4413      	add	r3, r2
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	605a      	str	r2, [r3, #4]
				break;
 8004ed4:	e006      	b.n	8004ee4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	60fb      	str	r3, [r7, #12]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2b07      	cmp	r3, #7
 8004ee0:	d9e5      	bls.n	8004eae <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004ee2:	bf00      	nop
 8004ee4:	bf00      	nop
 8004ee6:	3714      	adds	r7, #20
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr
 8004ef0:	200007f0 	.word	0x200007f0

08004ef4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004f04:	f001 fc6e 	bl	80067e4 <vPortEnterCritical>
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f0e:	b25b      	sxtb	r3, r3
 8004f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f14:	d103      	bne.n	8004f1e <vQueueWaitForMessageRestricted+0x2a>
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f24:	b25b      	sxtb	r3, r3
 8004f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f2a:	d103      	bne.n	8004f34 <vQueueWaitForMessageRestricted+0x40>
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f34:	f001 fc86 	bl	8006844 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d106      	bne.n	8004f4e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	3324      	adds	r3, #36	; 0x24
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	68b9      	ldr	r1, [r7, #8]
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f000 fc07 	bl	800575c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004f4e:	6978      	ldr	r0, [r7, #20]
 8004f50:	f7ff fefb 	bl	8004d4a <prvUnlockQueue>
	}
 8004f54:	bf00      	nop
 8004f56:	3718      	adds	r7, #24
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b08e      	sub	sp, #56	; 0x38
 8004f60:	af04      	add	r7, sp, #16
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
 8004f68:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d10a      	bne.n	8004f86 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f74:	f383 8811 	msr	BASEPRI, r3
 8004f78:	f3bf 8f6f 	isb	sy
 8004f7c:	f3bf 8f4f 	dsb	sy
 8004f80:	623b      	str	r3, [r7, #32]
}
 8004f82:	bf00      	nop
 8004f84:	e7fe      	b.n	8004f84 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d10a      	bne.n	8004fa2 <xTaskCreateStatic+0x46>
	__asm volatile
 8004f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f90:	f383 8811 	msr	BASEPRI, r3
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	61fb      	str	r3, [r7, #28]
}
 8004f9e:	bf00      	nop
 8004fa0:	e7fe      	b.n	8004fa0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004fa2:	235c      	movs	r3, #92	; 0x5c
 8004fa4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	2b5c      	cmp	r3, #92	; 0x5c
 8004faa:	d00a      	beq.n	8004fc2 <xTaskCreateStatic+0x66>
	__asm volatile
 8004fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb0:	f383 8811 	msr	BASEPRI, r3
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	61bb      	str	r3, [r7, #24]
}
 8004fbe:	bf00      	nop
 8004fc0:	e7fe      	b.n	8004fc0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004fc2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d01e      	beq.n	8005008 <xTaskCreateStatic+0xac>
 8004fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d01b      	beq.n	8005008 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fd8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fdc:	2202      	movs	r2, #2
 8004fde:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	9303      	str	r3, [sp, #12]
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe8:	9302      	str	r3, [sp, #8]
 8004fea:	f107 0314 	add.w	r3, r7, #20
 8004fee:	9301      	str	r3, [sp, #4]
 8004ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	68b9      	ldr	r1, [r7, #8]
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f000 f850 	bl	80050a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005000:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005002:	f000 f8dd 	bl	80051c0 <prvAddNewTaskToReadyList>
 8005006:	e001      	b.n	800500c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005008:	2300      	movs	r3, #0
 800500a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800500c:	697b      	ldr	r3, [r7, #20]
	}
 800500e:	4618      	mov	r0, r3
 8005010:	3728      	adds	r7, #40	; 0x28
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005016:	b580      	push	{r7, lr}
 8005018:	b08c      	sub	sp, #48	; 0x30
 800501a:	af04      	add	r7, sp, #16
 800501c:	60f8      	str	r0, [r7, #12]
 800501e:	60b9      	str	r1, [r7, #8]
 8005020:	603b      	str	r3, [r7, #0]
 8005022:	4613      	mov	r3, r2
 8005024:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005026:	88fb      	ldrh	r3, [r7, #6]
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	4618      	mov	r0, r3
 800502c:	f001 fcfc 	bl	8006a28 <pvPortMalloc>
 8005030:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00e      	beq.n	8005056 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005038:	205c      	movs	r0, #92	; 0x5c
 800503a:	f001 fcf5 	bl	8006a28 <pvPortMalloc>
 800503e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d003      	beq.n	800504e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	631a      	str	r2, [r3, #48]	; 0x30
 800504c:	e005      	b.n	800505a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800504e:	6978      	ldr	r0, [r7, #20]
 8005050:	f001 fdb6 	bl	8006bc0 <vPortFree>
 8005054:	e001      	b.n	800505a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005056:	2300      	movs	r3, #0
 8005058:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d017      	beq.n	8005090 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005068:	88fa      	ldrh	r2, [r7, #6]
 800506a:	2300      	movs	r3, #0
 800506c:	9303      	str	r3, [sp, #12]
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	9302      	str	r3, [sp, #8]
 8005072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005074:	9301      	str	r3, [sp, #4]
 8005076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005078:	9300      	str	r3, [sp, #0]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	68b9      	ldr	r1, [r7, #8]
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f000 f80e 	bl	80050a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005084:	69f8      	ldr	r0, [r7, #28]
 8005086:	f000 f89b 	bl	80051c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800508a:	2301      	movs	r3, #1
 800508c:	61bb      	str	r3, [r7, #24]
 800508e:	e002      	b.n	8005096 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005090:	f04f 33ff 	mov.w	r3, #4294967295
 8005094:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005096:	69bb      	ldr	r3, [r7, #24]
	}
 8005098:	4618      	mov	r0, r3
 800509a:	3720      	adds	r7, #32
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b088      	sub	sp, #32
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
 80050ac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80050ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	461a      	mov	r2, r3
 80050b8:	21a5      	movs	r1, #165	; 0xa5
 80050ba:	f001 fed1 	bl	8006e60 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80050be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80050c8:	3b01      	subs	r3, #1
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	4413      	add	r3, r2
 80050ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	f023 0307 	bic.w	r3, r3, #7
 80050d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	f003 0307 	and.w	r3, r3, #7
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00a      	beq.n	80050f8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80050e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e6:	f383 8811 	msr	BASEPRI, r3
 80050ea:	f3bf 8f6f 	isb	sy
 80050ee:	f3bf 8f4f 	dsb	sy
 80050f2:	617b      	str	r3, [r7, #20]
}
 80050f4:	bf00      	nop
 80050f6:	e7fe      	b.n	80050f6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d01f      	beq.n	800513e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050fe:	2300      	movs	r3, #0
 8005100:	61fb      	str	r3, [r7, #28]
 8005102:	e012      	b.n	800512a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005104:	68ba      	ldr	r2, [r7, #8]
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	4413      	add	r3, r2
 800510a:	7819      	ldrb	r1, [r3, #0]
 800510c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	4413      	add	r3, r2
 8005112:	3334      	adds	r3, #52	; 0x34
 8005114:	460a      	mov	r2, r1
 8005116:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	4413      	add	r3, r2
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d006      	beq.n	8005132 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	3301      	adds	r3, #1
 8005128:	61fb      	str	r3, [r7, #28]
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	2b0f      	cmp	r3, #15
 800512e:	d9e9      	bls.n	8005104 <prvInitialiseNewTask+0x64>
 8005130:	e000      	b.n	8005134 <prvInitialiseNewTask+0x94>
			{
				break;
 8005132:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005136:	2200      	movs	r2, #0
 8005138:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800513c:	e003      	b.n	8005146 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800513e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005140:	2200      	movs	r2, #0
 8005142:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005148:	2b37      	cmp	r3, #55	; 0x37
 800514a:	d901      	bls.n	8005150 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800514c:	2337      	movs	r3, #55	; 0x37
 800514e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005152:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005154:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005158:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800515a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800515c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515e:	2200      	movs	r2, #0
 8005160:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005164:	3304      	adds	r3, #4
 8005166:	4618      	mov	r0, r3
 8005168:	f7fe fe56 	bl	8003e18 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800516c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516e:	3318      	adds	r3, #24
 8005170:	4618      	mov	r0, r3
 8005172:	f7fe fe51 	bl	8003e18 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800517a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800517c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005184:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800518a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800518c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518e:	2200      	movs	r2, #0
 8005190:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005194:	2200      	movs	r2, #0
 8005196:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800519a:	683a      	ldr	r2, [r7, #0]
 800519c:	68f9      	ldr	r1, [r7, #12]
 800519e:	69b8      	ldr	r0, [r7, #24]
 80051a0:	f001 f9f2 	bl	8006588 <pxPortInitialiseStack>
 80051a4:	4602      	mov	r2, r0
 80051a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80051aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d002      	beq.n	80051b6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80051b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051b6:	bf00      	nop
 80051b8:	3720      	adds	r7, #32
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
	...

080051c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80051c8:	f001 fb0c 	bl	80067e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80051cc:	4b2d      	ldr	r3, [pc, #180]	; (8005284 <prvAddNewTaskToReadyList+0xc4>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	3301      	adds	r3, #1
 80051d2:	4a2c      	ldr	r2, [pc, #176]	; (8005284 <prvAddNewTaskToReadyList+0xc4>)
 80051d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80051d6:	4b2c      	ldr	r3, [pc, #176]	; (8005288 <prvAddNewTaskToReadyList+0xc8>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d109      	bne.n	80051f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80051de:	4a2a      	ldr	r2, [pc, #168]	; (8005288 <prvAddNewTaskToReadyList+0xc8>)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80051e4:	4b27      	ldr	r3, [pc, #156]	; (8005284 <prvAddNewTaskToReadyList+0xc4>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d110      	bne.n	800520e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80051ec:	f000 fbe2 	bl	80059b4 <prvInitialiseTaskLists>
 80051f0:	e00d      	b.n	800520e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80051f2:	4b26      	ldr	r3, [pc, #152]	; (800528c <prvAddNewTaskToReadyList+0xcc>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d109      	bne.n	800520e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80051fa:	4b23      	ldr	r3, [pc, #140]	; (8005288 <prvAddNewTaskToReadyList+0xc8>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005204:	429a      	cmp	r2, r3
 8005206:	d802      	bhi.n	800520e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005208:	4a1f      	ldr	r2, [pc, #124]	; (8005288 <prvAddNewTaskToReadyList+0xc8>)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800520e:	4b20      	ldr	r3, [pc, #128]	; (8005290 <prvAddNewTaskToReadyList+0xd0>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	3301      	adds	r3, #1
 8005214:	4a1e      	ldr	r2, [pc, #120]	; (8005290 <prvAddNewTaskToReadyList+0xd0>)
 8005216:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005218:	4b1d      	ldr	r3, [pc, #116]	; (8005290 <prvAddNewTaskToReadyList+0xd0>)
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005224:	4b1b      	ldr	r3, [pc, #108]	; (8005294 <prvAddNewTaskToReadyList+0xd4>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	429a      	cmp	r2, r3
 800522a:	d903      	bls.n	8005234 <prvAddNewTaskToReadyList+0x74>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005230:	4a18      	ldr	r2, [pc, #96]	; (8005294 <prvAddNewTaskToReadyList+0xd4>)
 8005232:	6013      	str	r3, [r2, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005238:	4613      	mov	r3, r2
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	4413      	add	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4a15      	ldr	r2, [pc, #84]	; (8005298 <prvAddNewTaskToReadyList+0xd8>)
 8005242:	441a      	add	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	3304      	adds	r3, #4
 8005248:	4619      	mov	r1, r3
 800524a:	4610      	mov	r0, r2
 800524c:	f7fe fdf1 	bl	8003e32 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005250:	f001 faf8 	bl	8006844 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005254:	4b0d      	ldr	r3, [pc, #52]	; (800528c <prvAddNewTaskToReadyList+0xcc>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00e      	beq.n	800527a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800525c:	4b0a      	ldr	r3, [pc, #40]	; (8005288 <prvAddNewTaskToReadyList+0xc8>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005266:	429a      	cmp	r2, r3
 8005268:	d207      	bcs.n	800527a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800526a:	4b0c      	ldr	r3, [pc, #48]	; (800529c <prvAddNewTaskToReadyList+0xdc>)
 800526c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005270:	601a      	str	r2, [r3, #0]
 8005272:	f3bf 8f4f 	dsb	sy
 8005276:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800527a:	bf00      	nop
 800527c:	3708      	adds	r7, #8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	20000d04 	.word	0x20000d04
 8005288:	20000830 	.word	0x20000830
 800528c:	20000d10 	.word	0x20000d10
 8005290:	20000d20 	.word	0x20000d20
 8005294:	20000d0c 	.word	0x20000d0c
 8005298:	20000834 	.word	0x20000834
 800529c:	e000ed04 	.word	0xe000ed04

080052a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b08a      	sub	sp, #40	; 0x28
 80052a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80052a6:	2300      	movs	r3, #0
 80052a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80052aa:	2300      	movs	r3, #0
 80052ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80052ae:	463a      	mov	r2, r7
 80052b0:	1d39      	adds	r1, r7, #4
 80052b2:	f107 0308 	add.w	r3, r7, #8
 80052b6:	4618      	mov	r0, r3
 80052b8:	f7fe fd5a 	bl	8003d70 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80052bc:	6839      	ldr	r1, [r7, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	9202      	str	r2, [sp, #8]
 80052c4:	9301      	str	r3, [sp, #4]
 80052c6:	2300      	movs	r3, #0
 80052c8:	9300      	str	r3, [sp, #0]
 80052ca:	2300      	movs	r3, #0
 80052cc:	460a      	mov	r2, r1
 80052ce:	4921      	ldr	r1, [pc, #132]	; (8005354 <vTaskStartScheduler+0xb4>)
 80052d0:	4821      	ldr	r0, [pc, #132]	; (8005358 <vTaskStartScheduler+0xb8>)
 80052d2:	f7ff fe43 	bl	8004f5c <xTaskCreateStatic>
 80052d6:	4603      	mov	r3, r0
 80052d8:	4a20      	ldr	r2, [pc, #128]	; (800535c <vTaskStartScheduler+0xbc>)
 80052da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80052dc:	4b1f      	ldr	r3, [pc, #124]	; (800535c <vTaskStartScheduler+0xbc>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d002      	beq.n	80052ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80052e4:	2301      	movs	r3, #1
 80052e6:	617b      	str	r3, [r7, #20]
 80052e8:	e001      	b.n	80052ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80052ea:	2300      	movs	r3, #0
 80052ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d102      	bne.n	80052fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80052f4:	f000 fdfa 	bl	8005eec <xTimerCreateTimerTask>
 80052f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d116      	bne.n	800532e <vTaskStartScheduler+0x8e>
	__asm volatile
 8005300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005304:	f383 8811 	msr	BASEPRI, r3
 8005308:	f3bf 8f6f 	isb	sy
 800530c:	f3bf 8f4f 	dsb	sy
 8005310:	613b      	str	r3, [r7, #16]
}
 8005312:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005314:	4b12      	ldr	r3, [pc, #72]	; (8005360 <vTaskStartScheduler+0xc0>)
 8005316:	f04f 32ff 	mov.w	r2, #4294967295
 800531a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800531c:	4b11      	ldr	r3, [pc, #68]	; (8005364 <vTaskStartScheduler+0xc4>)
 800531e:	2201      	movs	r2, #1
 8005320:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005322:	4b11      	ldr	r3, [pc, #68]	; (8005368 <vTaskStartScheduler+0xc8>)
 8005324:	2200      	movs	r2, #0
 8005326:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005328:	f001 f9ba 	bl	80066a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800532c:	e00e      	b.n	800534c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005334:	d10a      	bne.n	800534c <vTaskStartScheduler+0xac>
	__asm volatile
 8005336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533a:	f383 8811 	msr	BASEPRI, r3
 800533e:	f3bf 8f6f 	isb	sy
 8005342:	f3bf 8f4f 	dsb	sy
 8005346:	60fb      	str	r3, [r7, #12]
}
 8005348:	bf00      	nop
 800534a:	e7fe      	b.n	800534a <vTaskStartScheduler+0xaa>
}
 800534c:	bf00      	nop
 800534e:	3718      	adds	r7, #24
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	08006ed4 	.word	0x08006ed4
 8005358:	08005985 	.word	0x08005985
 800535c:	20000d28 	.word	0x20000d28
 8005360:	20000d24 	.word	0x20000d24
 8005364:	20000d10 	.word	0x20000d10
 8005368:	20000d08 	.word	0x20000d08

0800536c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800536c:	b480      	push	{r7}
 800536e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005370:	4b04      	ldr	r3, [pc, #16]	; (8005384 <vTaskSuspendAll+0x18>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	3301      	adds	r3, #1
 8005376:	4a03      	ldr	r2, [pc, #12]	; (8005384 <vTaskSuspendAll+0x18>)
 8005378:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800537a:	bf00      	nop
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr
 8005384:	20000d2c 	.word	0x20000d2c

08005388 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800538e:	2300      	movs	r3, #0
 8005390:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005392:	2300      	movs	r3, #0
 8005394:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005396:	4b42      	ldr	r3, [pc, #264]	; (80054a0 <xTaskResumeAll+0x118>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d10a      	bne.n	80053b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800539e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a2:	f383 8811 	msr	BASEPRI, r3
 80053a6:	f3bf 8f6f 	isb	sy
 80053aa:	f3bf 8f4f 	dsb	sy
 80053ae:	603b      	str	r3, [r7, #0]
}
 80053b0:	bf00      	nop
 80053b2:	e7fe      	b.n	80053b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80053b4:	f001 fa16 	bl	80067e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80053b8:	4b39      	ldr	r3, [pc, #228]	; (80054a0 <xTaskResumeAll+0x118>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	3b01      	subs	r3, #1
 80053be:	4a38      	ldr	r2, [pc, #224]	; (80054a0 <xTaskResumeAll+0x118>)
 80053c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053c2:	4b37      	ldr	r3, [pc, #220]	; (80054a0 <xTaskResumeAll+0x118>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d162      	bne.n	8005490 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80053ca:	4b36      	ldr	r3, [pc, #216]	; (80054a4 <xTaskResumeAll+0x11c>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d05e      	beq.n	8005490 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80053d2:	e02f      	b.n	8005434 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053d4:	4b34      	ldr	r3, [pc, #208]	; (80054a8 <xTaskResumeAll+0x120>)
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	3318      	adds	r3, #24
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7fe fd83 	bl	8003eec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	3304      	adds	r3, #4
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7fe fd7e 	bl	8003eec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f4:	4b2d      	ldr	r3, [pc, #180]	; (80054ac <xTaskResumeAll+0x124>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d903      	bls.n	8005404 <xTaskResumeAll+0x7c>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005400:	4a2a      	ldr	r2, [pc, #168]	; (80054ac <xTaskResumeAll+0x124>)
 8005402:	6013      	str	r3, [r2, #0]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005408:	4613      	mov	r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	4413      	add	r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	4a27      	ldr	r2, [pc, #156]	; (80054b0 <xTaskResumeAll+0x128>)
 8005412:	441a      	add	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	3304      	adds	r3, #4
 8005418:	4619      	mov	r1, r3
 800541a:	4610      	mov	r0, r2
 800541c:	f7fe fd09 	bl	8003e32 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005424:	4b23      	ldr	r3, [pc, #140]	; (80054b4 <xTaskResumeAll+0x12c>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542a:	429a      	cmp	r2, r3
 800542c:	d302      	bcc.n	8005434 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800542e:	4b22      	ldr	r3, [pc, #136]	; (80054b8 <xTaskResumeAll+0x130>)
 8005430:	2201      	movs	r2, #1
 8005432:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005434:	4b1c      	ldr	r3, [pc, #112]	; (80054a8 <xTaskResumeAll+0x120>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1cb      	bne.n	80053d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d001      	beq.n	8005446 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005442:	f000 fb55 	bl	8005af0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005446:	4b1d      	ldr	r3, [pc, #116]	; (80054bc <xTaskResumeAll+0x134>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d010      	beq.n	8005474 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005452:	f000 f847 	bl	80054e4 <xTaskIncrementTick>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d002      	beq.n	8005462 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800545c:	4b16      	ldr	r3, [pc, #88]	; (80054b8 <xTaskResumeAll+0x130>)
 800545e:	2201      	movs	r2, #1
 8005460:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	3b01      	subs	r3, #1
 8005466:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1f1      	bne.n	8005452 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800546e:	4b13      	ldr	r3, [pc, #76]	; (80054bc <xTaskResumeAll+0x134>)
 8005470:	2200      	movs	r2, #0
 8005472:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005474:	4b10      	ldr	r3, [pc, #64]	; (80054b8 <xTaskResumeAll+0x130>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d009      	beq.n	8005490 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800547c:	2301      	movs	r3, #1
 800547e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005480:	4b0f      	ldr	r3, [pc, #60]	; (80054c0 <xTaskResumeAll+0x138>)
 8005482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005486:	601a      	str	r2, [r3, #0]
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005490:	f001 f9d8 	bl	8006844 <vPortExitCritical>

	return xAlreadyYielded;
 8005494:	68bb      	ldr	r3, [r7, #8]
}
 8005496:	4618      	mov	r0, r3
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	20000d2c 	.word	0x20000d2c
 80054a4:	20000d04 	.word	0x20000d04
 80054a8:	20000cc4 	.word	0x20000cc4
 80054ac:	20000d0c 	.word	0x20000d0c
 80054b0:	20000834 	.word	0x20000834
 80054b4:	20000830 	.word	0x20000830
 80054b8:	20000d18 	.word	0x20000d18
 80054bc:	20000d14 	.word	0x20000d14
 80054c0:	e000ed04 	.word	0xe000ed04

080054c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80054ca:	4b05      	ldr	r3, [pc, #20]	; (80054e0 <xTaskGetTickCount+0x1c>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80054d0:	687b      	ldr	r3, [r7, #4]
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	370c      	adds	r7, #12
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	20000d08 	.word	0x20000d08

080054e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b086      	sub	sp, #24
 80054e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80054ea:	2300      	movs	r3, #0
 80054ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054ee:	4b4f      	ldr	r3, [pc, #316]	; (800562c <xTaskIncrementTick+0x148>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f040 808f 	bne.w	8005616 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80054f8:	4b4d      	ldr	r3, [pc, #308]	; (8005630 <xTaskIncrementTick+0x14c>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	3301      	adds	r3, #1
 80054fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005500:	4a4b      	ldr	r2, [pc, #300]	; (8005630 <xTaskIncrementTick+0x14c>)
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d120      	bne.n	800554e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800550c:	4b49      	ldr	r3, [pc, #292]	; (8005634 <xTaskIncrementTick+0x150>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00a      	beq.n	800552c <xTaskIncrementTick+0x48>
	__asm volatile
 8005516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551a:	f383 8811 	msr	BASEPRI, r3
 800551e:	f3bf 8f6f 	isb	sy
 8005522:	f3bf 8f4f 	dsb	sy
 8005526:	603b      	str	r3, [r7, #0]
}
 8005528:	bf00      	nop
 800552a:	e7fe      	b.n	800552a <xTaskIncrementTick+0x46>
 800552c:	4b41      	ldr	r3, [pc, #260]	; (8005634 <xTaskIncrementTick+0x150>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	60fb      	str	r3, [r7, #12]
 8005532:	4b41      	ldr	r3, [pc, #260]	; (8005638 <xTaskIncrementTick+0x154>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a3f      	ldr	r2, [pc, #252]	; (8005634 <xTaskIncrementTick+0x150>)
 8005538:	6013      	str	r3, [r2, #0]
 800553a:	4a3f      	ldr	r2, [pc, #252]	; (8005638 <xTaskIncrementTick+0x154>)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6013      	str	r3, [r2, #0]
 8005540:	4b3e      	ldr	r3, [pc, #248]	; (800563c <xTaskIncrementTick+0x158>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	3301      	adds	r3, #1
 8005546:	4a3d      	ldr	r2, [pc, #244]	; (800563c <xTaskIncrementTick+0x158>)
 8005548:	6013      	str	r3, [r2, #0]
 800554a:	f000 fad1 	bl	8005af0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800554e:	4b3c      	ldr	r3, [pc, #240]	; (8005640 <xTaskIncrementTick+0x15c>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	429a      	cmp	r2, r3
 8005556:	d349      	bcc.n	80055ec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005558:	4b36      	ldr	r3, [pc, #216]	; (8005634 <xTaskIncrementTick+0x150>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d104      	bne.n	800556c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005562:	4b37      	ldr	r3, [pc, #220]	; (8005640 <xTaskIncrementTick+0x15c>)
 8005564:	f04f 32ff 	mov.w	r2, #4294967295
 8005568:	601a      	str	r2, [r3, #0]
					break;
 800556a:	e03f      	b.n	80055ec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800556c:	4b31      	ldr	r3, [pc, #196]	; (8005634 <xTaskIncrementTick+0x150>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	429a      	cmp	r2, r3
 8005582:	d203      	bcs.n	800558c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005584:	4a2e      	ldr	r2, [pc, #184]	; (8005640 <xTaskIncrementTick+0x15c>)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800558a:	e02f      	b.n	80055ec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	3304      	adds	r3, #4
 8005590:	4618      	mov	r0, r3
 8005592:	f7fe fcab 	bl	8003eec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559a:	2b00      	cmp	r3, #0
 800559c:	d004      	beq.n	80055a8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	3318      	adds	r3, #24
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7fe fca2 	bl	8003eec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ac:	4b25      	ldr	r3, [pc, #148]	; (8005644 <xTaskIncrementTick+0x160>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d903      	bls.n	80055bc <xTaskIncrementTick+0xd8>
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b8:	4a22      	ldr	r2, [pc, #136]	; (8005644 <xTaskIncrementTick+0x160>)
 80055ba:	6013      	str	r3, [r2, #0]
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055c0:	4613      	mov	r3, r2
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	4413      	add	r3, r2
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	4a1f      	ldr	r2, [pc, #124]	; (8005648 <xTaskIncrementTick+0x164>)
 80055ca:	441a      	add	r2, r3
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	3304      	adds	r3, #4
 80055d0:	4619      	mov	r1, r3
 80055d2:	4610      	mov	r0, r2
 80055d4:	f7fe fc2d 	bl	8003e32 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055dc:	4b1b      	ldr	r3, [pc, #108]	; (800564c <xTaskIncrementTick+0x168>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d3b8      	bcc.n	8005558 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80055e6:	2301      	movs	r3, #1
 80055e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055ea:	e7b5      	b.n	8005558 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80055ec:	4b17      	ldr	r3, [pc, #92]	; (800564c <xTaskIncrementTick+0x168>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055f2:	4915      	ldr	r1, [pc, #84]	; (8005648 <xTaskIncrementTick+0x164>)
 80055f4:	4613      	mov	r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	4413      	add	r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	440b      	add	r3, r1
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2b01      	cmp	r3, #1
 8005602:	d901      	bls.n	8005608 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005604:	2301      	movs	r3, #1
 8005606:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005608:	4b11      	ldr	r3, [pc, #68]	; (8005650 <xTaskIncrementTick+0x16c>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d007      	beq.n	8005620 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005610:	2301      	movs	r3, #1
 8005612:	617b      	str	r3, [r7, #20]
 8005614:	e004      	b.n	8005620 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005616:	4b0f      	ldr	r3, [pc, #60]	; (8005654 <xTaskIncrementTick+0x170>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	3301      	adds	r3, #1
 800561c:	4a0d      	ldr	r2, [pc, #52]	; (8005654 <xTaskIncrementTick+0x170>)
 800561e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005620:	697b      	ldr	r3, [r7, #20]
}
 8005622:	4618      	mov	r0, r3
 8005624:	3718      	adds	r7, #24
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	20000d2c 	.word	0x20000d2c
 8005630:	20000d08 	.word	0x20000d08
 8005634:	20000cbc 	.word	0x20000cbc
 8005638:	20000cc0 	.word	0x20000cc0
 800563c:	20000d1c 	.word	0x20000d1c
 8005640:	20000d24 	.word	0x20000d24
 8005644:	20000d0c 	.word	0x20000d0c
 8005648:	20000834 	.word	0x20000834
 800564c:	20000830 	.word	0x20000830
 8005650:	20000d18 	.word	0x20000d18
 8005654:	20000d14 	.word	0x20000d14

08005658 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800565e:	4b28      	ldr	r3, [pc, #160]	; (8005700 <vTaskSwitchContext+0xa8>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d003      	beq.n	800566e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005666:	4b27      	ldr	r3, [pc, #156]	; (8005704 <vTaskSwitchContext+0xac>)
 8005668:	2201      	movs	r2, #1
 800566a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800566c:	e041      	b.n	80056f2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800566e:	4b25      	ldr	r3, [pc, #148]	; (8005704 <vTaskSwitchContext+0xac>)
 8005670:	2200      	movs	r2, #0
 8005672:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005674:	4b24      	ldr	r3, [pc, #144]	; (8005708 <vTaskSwitchContext+0xb0>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	60fb      	str	r3, [r7, #12]
 800567a:	e010      	b.n	800569e <vTaskSwitchContext+0x46>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10a      	bne.n	8005698 <vTaskSwitchContext+0x40>
	__asm volatile
 8005682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005686:	f383 8811 	msr	BASEPRI, r3
 800568a:	f3bf 8f6f 	isb	sy
 800568e:	f3bf 8f4f 	dsb	sy
 8005692:	607b      	str	r3, [r7, #4]
}
 8005694:	bf00      	nop
 8005696:	e7fe      	b.n	8005696 <vTaskSwitchContext+0x3e>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	3b01      	subs	r3, #1
 800569c:	60fb      	str	r3, [r7, #12]
 800569e:	491b      	ldr	r1, [pc, #108]	; (800570c <vTaskSwitchContext+0xb4>)
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	4613      	mov	r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4413      	add	r3, r2
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	440b      	add	r3, r1
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d0e4      	beq.n	800567c <vTaskSwitchContext+0x24>
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	4613      	mov	r3, r2
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	4413      	add	r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	4a13      	ldr	r2, [pc, #76]	; (800570c <vTaskSwitchContext+0xb4>)
 80056be:	4413      	add	r3, r2
 80056c0:	60bb      	str	r3, [r7, #8]
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	685a      	ldr	r2, [r3, #4]
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	605a      	str	r2, [r3, #4]
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	3308      	adds	r3, #8
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d104      	bne.n	80056e2 <vTaskSwitchContext+0x8a>
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	685a      	ldr	r2, [r3, #4]
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	605a      	str	r2, [r3, #4]
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	4a09      	ldr	r2, [pc, #36]	; (8005710 <vTaskSwitchContext+0xb8>)
 80056ea:	6013      	str	r3, [r2, #0]
 80056ec:	4a06      	ldr	r2, [pc, #24]	; (8005708 <vTaskSwitchContext+0xb0>)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6013      	str	r3, [r2, #0]
}
 80056f2:	bf00      	nop
 80056f4:	3714      	adds	r7, #20
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop
 8005700:	20000d2c 	.word	0x20000d2c
 8005704:	20000d18 	.word	0x20000d18
 8005708:	20000d0c 	.word	0x20000d0c
 800570c:	20000834 	.word	0x20000834
 8005710:	20000830 	.word	0x20000830

08005714 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d10a      	bne.n	800573a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005728:	f383 8811 	msr	BASEPRI, r3
 800572c:	f3bf 8f6f 	isb	sy
 8005730:	f3bf 8f4f 	dsb	sy
 8005734:	60fb      	str	r3, [r7, #12]
}
 8005736:	bf00      	nop
 8005738:	e7fe      	b.n	8005738 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800573a:	4b07      	ldr	r3, [pc, #28]	; (8005758 <vTaskPlaceOnEventList+0x44>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	3318      	adds	r3, #24
 8005740:	4619      	mov	r1, r3
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f7fe fb99 	bl	8003e7a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005748:	2101      	movs	r1, #1
 800574a:	6838      	ldr	r0, [r7, #0]
 800574c:	f000 fb7a 	bl	8005e44 <prvAddCurrentTaskToDelayedList>
}
 8005750:	bf00      	nop
 8005752:	3710      	adds	r7, #16
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	20000830 	.word	0x20000830

0800575c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800575c:	b580      	push	{r7, lr}
 800575e:	b086      	sub	sp, #24
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d10a      	bne.n	8005784 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800576e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005772:	f383 8811 	msr	BASEPRI, r3
 8005776:	f3bf 8f6f 	isb	sy
 800577a:	f3bf 8f4f 	dsb	sy
 800577e:	617b      	str	r3, [r7, #20]
}
 8005780:	bf00      	nop
 8005782:	e7fe      	b.n	8005782 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005784:	4b0a      	ldr	r3, [pc, #40]	; (80057b0 <vTaskPlaceOnEventListRestricted+0x54>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	3318      	adds	r3, #24
 800578a:	4619      	mov	r1, r3
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f7fe fb50 	bl	8003e32 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d002      	beq.n	800579e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005798:	f04f 33ff 	mov.w	r3, #4294967295
 800579c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800579e:	6879      	ldr	r1, [r7, #4]
 80057a0:	68b8      	ldr	r0, [r7, #8]
 80057a2:	f000 fb4f 	bl	8005e44 <prvAddCurrentTaskToDelayedList>
	}
 80057a6:	bf00      	nop
 80057a8:	3718      	adds	r7, #24
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	20000830 	.word	0x20000830

080057b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b086      	sub	sp, #24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d10a      	bne.n	80057e0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80057ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ce:	f383 8811 	msr	BASEPRI, r3
 80057d2:	f3bf 8f6f 	isb	sy
 80057d6:	f3bf 8f4f 	dsb	sy
 80057da:	60fb      	str	r3, [r7, #12]
}
 80057dc:	bf00      	nop
 80057de:	e7fe      	b.n	80057de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	3318      	adds	r3, #24
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7fe fb81 	bl	8003eec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057ea:	4b1e      	ldr	r3, [pc, #120]	; (8005864 <xTaskRemoveFromEventList+0xb0>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d11d      	bne.n	800582e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	3304      	adds	r3, #4
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7fe fb78 	bl	8003eec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005800:	4b19      	ldr	r3, [pc, #100]	; (8005868 <xTaskRemoveFromEventList+0xb4>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	429a      	cmp	r2, r3
 8005806:	d903      	bls.n	8005810 <xTaskRemoveFromEventList+0x5c>
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580c:	4a16      	ldr	r2, [pc, #88]	; (8005868 <xTaskRemoveFromEventList+0xb4>)
 800580e:	6013      	str	r3, [r2, #0]
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005814:	4613      	mov	r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4413      	add	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4a13      	ldr	r2, [pc, #76]	; (800586c <xTaskRemoveFromEventList+0xb8>)
 800581e:	441a      	add	r2, r3
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	3304      	adds	r3, #4
 8005824:	4619      	mov	r1, r3
 8005826:	4610      	mov	r0, r2
 8005828:	f7fe fb03 	bl	8003e32 <vListInsertEnd>
 800582c:	e005      	b.n	800583a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	3318      	adds	r3, #24
 8005832:	4619      	mov	r1, r3
 8005834:	480e      	ldr	r0, [pc, #56]	; (8005870 <xTaskRemoveFromEventList+0xbc>)
 8005836:	f7fe fafc 	bl	8003e32 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800583e:	4b0d      	ldr	r3, [pc, #52]	; (8005874 <xTaskRemoveFromEventList+0xc0>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005844:	429a      	cmp	r2, r3
 8005846:	d905      	bls.n	8005854 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005848:	2301      	movs	r3, #1
 800584a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800584c:	4b0a      	ldr	r3, [pc, #40]	; (8005878 <xTaskRemoveFromEventList+0xc4>)
 800584e:	2201      	movs	r2, #1
 8005850:	601a      	str	r2, [r3, #0]
 8005852:	e001      	b.n	8005858 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005854:	2300      	movs	r3, #0
 8005856:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005858:	697b      	ldr	r3, [r7, #20]
}
 800585a:	4618      	mov	r0, r3
 800585c:	3718      	adds	r7, #24
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	20000d2c 	.word	0x20000d2c
 8005868:	20000d0c 	.word	0x20000d0c
 800586c:	20000834 	.word	0x20000834
 8005870:	20000cc4 	.word	0x20000cc4
 8005874:	20000830 	.word	0x20000830
 8005878:	20000d18 	.word	0x20000d18

0800587c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005884:	4b06      	ldr	r3, [pc, #24]	; (80058a0 <vTaskInternalSetTimeOutState+0x24>)
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800588c:	4b05      	ldr	r3, [pc, #20]	; (80058a4 <vTaskInternalSetTimeOutState+0x28>)
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	605a      	str	r2, [r3, #4]
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr
 80058a0:	20000d1c 	.word	0x20000d1c
 80058a4:	20000d08 	.word	0x20000d08

080058a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b088      	sub	sp, #32
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d10a      	bne.n	80058ce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80058b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058bc:	f383 8811 	msr	BASEPRI, r3
 80058c0:	f3bf 8f6f 	isb	sy
 80058c4:	f3bf 8f4f 	dsb	sy
 80058c8:	613b      	str	r3, [r7, #16]
}
 80058ca:	bf00      	nop
 80058cc:	e7fe      	b.n	80058cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d10a      	bne.n	80058ea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80058d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d8:	f383 8811 	msr	BASEPRI, r3
 80058dc:	f3bf 8f6f 	isb	sy
 80058e0:	f3bf 8f4f 	dsb	sy
 80058e4:	60fb      	str	r3, [r7, #12]
}
 80058e6:	bf00      	nop
 80058e8:	e7fe      	b.n	80058e8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80058ea:	f000 ff7b 	bl	80067e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80058ee:	4b1d      	ldr	r3, [pc, #116]	; (8005964 <xTaskCheckForTimeOut+0xbc>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	69ba      	ldr	r2, [r7, #24]
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005906:	d102      	bne.n	800590e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005908:	2300      	movs	r3, #0
 800590a:	61fb      	str	r3, [r7, #28]
 800590c:	e023      	b.n	8005956 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	4b15      	ldr	r3, [pc, #84]	; (8005968 <xTaskCheckForTimeOut+0xc0>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	429a      	cmp	r2, r3
 8005918:	d007      	beq.n	800592a <xTaskCheckForTimeOut+0x82>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	69ba      	ldr	r2, [r7, #24]
 8005920:	429a      	cmp	r2, r3
 8005922:	d302      	bcc.n	800592a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005924:	2301      	movs	r3, #1
 8005926:	61fb      	str	r3, [r7, #28]
 8005928:	e015      	b.n	8005956 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	429a      	cmp	r2, r3
 8005932:	d20b      	bcs.n	800594c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	1ad2      	subs	r2, r2, r3
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f7ff ff9b 	bl	800587c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005946:	2300      	movs	r3, #0
 8005948:	61fb      	str	r3, [r7, #28]
 800594a:	e004      	b.n	8005956 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	2200      	movs	r2, #0
 8005950:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005952:	2301      	movs	r3, #1
 8005954:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005956:	f000 ff75 	bl	8006844 <vPortExitCritical>

	return xReturn;
 800595a:	69fb      	ldr	r3, [r7, #28]
}
 800595c:	4618      	mov	r0, r3
 800595e:	3720      	adds	r7, #32
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	20000d08 	.word	0x20000d08
 8005968:	20000d1c 	.word	0x20000d1c

0800596c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800596c:	b480      	push	{r7}
 800596e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005970:	4b03      	ldr	r3, [pc, #12]	; (8005980 <vTaskMissedYield+0x14>)
 8005972:	2201      	movs	r2, #1
 8005974:	601a      	str	r2, [r3, #0]
}
 8005976:	bf00      	nop
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr
 8005980:	20000d18 	.word	0x20000d18

08005984 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800598c:	f000 f852 	bl	8005a34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005990:	4b06      	ldr	r3, [pc, #24]	; (80059ac <prvIdleTask+0x28>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d9f9      	bls.n	800598c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005998:	4b05      	ldr	r3, [pc, #20]	; (80059b0 <prvIdleTask+0x2c>)
 800599a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800599e:	601a      	str	r2, [r3, #0]
 80059a0:	f3bf 8f4f 	dsb	sy
 80059a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80059a8:	e7f0      	b.n	800598c <prvIdleTask+0x8>
 80059aa:	bf00      	nop
 80059ac:	20000834 	.word	0x20000834
 80059b0:	e000ed04 	.word	0xe000ed04

080059b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059ba:	2300      	movs	r3, #0
 80059bc:	607b      	str	r3, [r7, #4]
 80059be:	e00c      	b.n	80059da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	4613      	mov	r3, r2
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	4413      	add	r3, r2
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	4a12      	ldr	r2, [pc, #72]	; (8005a14 <prvInitialiseTaskLists+0x60>)
 80059cc:	4413      	add	r3, r2
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7fe fa02 	bl	8003dd8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	3301      	adds	r3, #1
 80059d8:	607b      	str	r3, [r7, #4]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2b37      	cmp	r3, #55	; 0x37
 80059de:	d9ef      	bls.n	80059c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80059e0:	480d      	ldr	r0, [pc, #52]	; (8005a18 <prvInitialiseTaskLists+0x64>)
 80059e2:	f7fe f9f9 	bl	8003dd8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80059e6:	480d      	ldr	r0, [pc, #52]	; (8005a1c <prvInitialiseTaskLists+0x68>)
 80059e8:	f7fe f9f6 	bl	8003dd8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80059ec:	480c      	ldr	r0, [pc, #48]	; (8005a20 <prvInitialiseTaskLists+0x6c>)
 80059ee:	f7fe f9f3 	bl	8003dd8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80059f2:	480c      	ldr	r0, [pc, #48]	; (8005a24 <prvInitialiseTaskLists+0x70>)
 80059f4:	f7fe f9f0 	bl	8003dd8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80059f8:	480b      	ldr	r0, [pc, #44]	; (8005a28 <prvInitialiseTaskLists+0x74>)
 80059fa:	f7fe f9ed 	bl	8003dd8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80059fe:	4b0b      	ldr	r3, [pc, #44]	; (8005a2c <prvInitialiseTaskLists+0x78>)
 8005a00:	4a05      	ldr	r2, [pc, #20]	; (8005a18 <prvInitialiseTaskLists+0x64>)
 8005a02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a04:	4b0a      	ldr	r3, [pc, #40]	; (8005a30 <prvInitialiseTaskLists+0x7c>)
 8005a06:	4a05      	ldr	r2, [pc, #20]	; (8005a1c <prvInitialiseTaskLists+0x68>)
 8005a08:	601a      	str	r2, [r3, #0]
}
 8005a0a:	bf00      	nop
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	20000834 	.word	0x20000834
 8005a18:	20000c94 	.word	0x20000c94
 8005a1c:	20000ca8 	.word	0x20000ca8
 8005a20:	20000cc4 	.word	0x20000cc4
 8005a24:	20000cd8 	.word	0x20000cd8
 8005a28:	20000cf0 	.word	0x20000cf0
 8005a2c:	20000cbc 	.word	0x20000cbc
 8005a30:	20000cc0 	.word	0x20000cc0

08005a34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a3a:	e019      	b.n	8005a70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a3c:	f000 fed2 	bl	80067e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a40:	4b10      	ldr	r3, [pc, #64]	; (8005a84 <prvCheckTasksWaitingTermination+0x50>)
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	3304      	adds	r3, #4
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7fe fa4d 	bl	8003eec <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a52:	4b0d      	ldr	r3, [pc, #52]	; (8005a88 <prvCheckTasksWaitingTermination+0x54>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	3b01      	subs	r3, #1
 8005a58:	4a0b      	ldr	r2, [pc, #44]	; (8005a88 <prvCheckTasksWaitingTermination+0x54>)
 8005a5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a5c:	4b0b      	ldr	r3, [pc, #44]	; (8005a8c <prvCheckTasksWaitingTermination+0x58>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	3b01      	subs	r3, #1
 8005a62:	4a0a      	ldr	r2, [pc, #40]	; (8005a8c <prvCheckTasksWaitingTermination+0x58>)
 8005a64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a66:	f000 feed 	bl	8006844 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 f810 	bl	8005a90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a70:	4b06      	ldr	r3, [pc, #24]	; (8005a8c <prvCheckTasksWaitingTermination+0x58>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d1e1      	bne.n	8005a3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a78:	bf00      	nop
 8005a7a:	bf00      	nop
 8005a7c:	3708      	adds	r7, #8
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	20000cd8 	.word	0x20000cd8
 8005a88:	20000d04 	.word	0x20000d04
 8005a8c:	20000cec 	.word	0x20000cec

08005a90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d108      	bne.n	8005ab4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f001 f88a 	bl	8006bc0 <vPortFree>
				vPortFree( pxTCB );
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f001 f887 	bl	8006bc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ab2:	e018      	b.n	8005ae6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d103      	bne.n	8005ac6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f001 f87e 	bl	8006bc0 <vPortFree>
	}
 8005ac4:	e00f      	b.n	8005ae6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d00a      	beq.n	8005ae6 <prvDeleteTCB+0x56>
	__asm volatile
 8005ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad4:	f383 8811 	msr	BASEPRI, r3
 8005ad8:	f3bf 8f6f 	isb	sy
 8005adc:	f3bf 8f4f 	dsb	sy
 8005ae0:	60fb      	str	r3, [r7, #12]
}
 8005ae2:	bf00      	nop
 8005ae4:	e7fe      	b.n	8005ae4 <prvDeleteTCB+0x54>
	}
 8005ae6:	bf00      	nop
 8005ae8:	3710      	adds	r7, #16
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
	...

08005af0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005af6:	4b0c      	ldr	r3, [pc, #48]	; (8005b28 <prvResetNextTaskUnblockTime+0x38>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d104      	bne.n	8005b0a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b00:	4b0a      	ldr	r3, [pc, #40]	; (8005b2c <prvResetNextTaskUnblockTime+0x3c>)
 8005b02:	f04f 32ff 	mov.w	r2, #4294967295
 8005b06:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b08:	e008      	b.n	8005b1c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b0a:	4b07      	ldr	r3, [pc, #28]	; (8005b28 <prvResetNextTaskUnblockTime+0x38>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	4a04      	ldr	r2, [pc, #16]	; (8005b2c <prvResetNextTaskUnblockTime+0x3c>)
 8005b1a:	6013      	str	r3, [r2, #0]
}
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr
 8005b28:	20000cbc 	.word	0x20000cbc
 8005b2c:	20000d24 	.word	0x20000d24

08005b30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005b36:	4b0b      	ldr	r3, [pc, #44]	; (8005b64 <xTaskGetSchedulerState+0x34>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d102      	bne.n	8005b44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	607b      	str	r3, [r7, #4]
 8005b42:	e008      	b.n	8005b56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b44:	4b08      	ldr	r3, [pc, #32]	; (8005b68 <xTaskGetSchedulerState+0x38>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d102      	bne.n	8005b52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005b4c:	2302      	movs	r3, #2
 8005b4e:	607b      	str	r3, [r7, #4]
 8005b50:	e001      	b.n	8005b56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005b52:	2300      	movs	r3, #0
 8005b54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005b56:	687b      	ldr	r3, [r7, #4]
	}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr
 8005b64:	20000d10 	.word	0x20000d10
 8005b68:	20000d2c 	.word	0x20000d2c

08005b6c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d051      	beq.n	8005c26 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b86:	4b2a      	ldr	r3, [pc, #168]	; (8005c30 <xTaskPriorityInherit+0xc4>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d241      	bcs.n	8005c14 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	699b      	ldr	r3, [r3, #24]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	db06      	blt.n	8005ba6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b98:	4b25      	ldr	r3, [pc, #148]	; (8005c30 <xTaskPriorityInherit+0xc4>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	6959      	ldr	r1, [r3, #20]
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bae:	4613      	mov	r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	4413      	add	r3, r2
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4a1f      	ldr	r2, [pc, #124]	; (8005c34 <xTaskPriorityInherit+0xc8>)
 8005bb8:	4413      	add	r3, r2
 8005bba:	4299      	cmp	r1, r3
 8005bbc:	d122      	bne.n	8005c04 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	3304      	adds	r3, #4
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f7fe f992 	bl	8003eec <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005bc8:	4b19      	ldr	r3, [pc, #100]	; (8005c30 <xTaskPriorityInherit+0xc4>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bd6:	4b18      	ldr	r3, [pc, #96]	; (8005c38 <xTaskPriorityInherit+0xcc>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d903      	bls.n	8005be6 <xTaskPriorityInherit+0x7a>
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be2:	4a15      	ldr	r2, [pc, #84]	; (8005c38 <xTaskPriorityInherit+0xcc>)
 8005be4:	6013      	str	r3, [r2, #0]
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bea:	4613      	mov	r3, r2
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4413      	add	r3, r2
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	4a10      	ldr	r2, [pc, #64]	; (8005c34 <xTaskPriorityInherit+0xc8>)
 8005bf4:	441a      	add	r2, r3
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	3304      	adds	r3, #4
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	4610      	mov	r0, r2
 8005bfe:	f7fe f918 	bl	8003e32 <vListInsertEnd>
 8005c02:	e004      	b.n	8005c0e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005c04:	4b0a      	ldr	r3, [pc, #40]	; (8005c30 <xTaskPriorityInherit+0xc4>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	60fb      	str	r3, [r7, #12]
 8005c12:	e008      	b.n	8005c26 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c18:	4b05      	ldr	r3, [pc, #20]	; (8005c30 <xTaskPriorityInherit+0xc4>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d201      	bcs.n	8005c26 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005c22:	2301      	movs	r3, #1
 8005c24:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005c26:	68fb      	ldr	r3, [r7, #12]
	}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3710      	adds	r7, #16
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	20000830 	.word	0x20000830
 8005c34:	20000834 	.word	0x20000834
 8005c38:	20000d0c 	.word	0x20000d0c

08005c3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d056      	beq.n	8005d00 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005c52:	4b2e      	ldr	r3, [pc, #184]	; (8005d0c <xTaskPriorityDisinherit+0xd0>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d00a      	beq.n	8005c72 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c60:	f383 8811 	msr	BASEPRI, r3
 8005c64:	f3bf 8f6f 	isb	sy
 8005c68:	f3bf 8f4f 	dsb	sy
 8005c6c:	60fb      	str	r3, [r7, #12]
}
 8005c6e:	bf00      	nop
 8005c70:	e7fe      	b.n	8005c70 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10a      	bne.n	8005c90 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7e:	f383 8811 	msr	BASEPRI, r3
 8005c82:	f3bf 8f6f 	isb	sy
 8005c86:	f3bf 8f4f 	dsb	sy
 8005c8a:	60bb      	str	r3, [r7, #8]
}
 8005c8c:	bf00      	nop
 8005c8e:	e7fe      	b.n	8005c8e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c94:	1e5a      	subs	r2, r3, #1
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d02c      	beq.n	8005d00 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d128      	bne.n	8005d00 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	3304      	adds	r3, #4
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7fe f91a 	bl	8003eec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd0:	4b0f      	ldr	r3, [pc, #60]	; (8005d10 <xTaskPriorityDisinherit+0xd4>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d903      	bls.n	8005ce0 <xTaskPriorityDisinherit+0xa4>
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cdc:	4a0c      	ldr	r2, [pc, #48]	; (8005d10 <xTaskPriorityDisinherit+0xd4>)
 8005cde:	6013      	str	r3, [r2, #0]
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	4413      	add	r3, r2
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	4a09      	ldr	r2, [pc, #36]	; (8005d14 <xTaskPriorityDisinherit+0xd8>)
 8005cee:	441a      	add	r2, r3
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	3304      	adds	r3, #4
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	4610      	mov	r0, r2
 8005cf8:	f7fe f89b 	bl	8003e32 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d00:	697b      	ldr	r3, [r7, #20]
	}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3718      	adds	r7, #24
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	20000830 	.word	0x20000830
 8005d10:	20000d0c 	.word	0x20000d0c
 8005d14:	20000834 	.word	0x20000834

08005d18 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b088      	sub	sp, #32
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005d26:	2301      	movs	r3, #1
 8005d28:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d06a      	beq.n	8005e06 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10a      	bne.n	8005d4e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3c:	f383 8811 	msr	BASEPRI, r3
 8005d40:	f3bf 8f6f 	isb	sy
 8005d44:	f3bf 8f4f 	dsb	sy
 8005d48:	60fb      	str	r3, [r7, #12]
}
 8005d4a:	bf00      	nop
 8005d4c:	e7fe      	b.n	8005d4c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d52:	683a      	ldr	r2, [r7, #0]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d902      	bls.n	8005d5e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	61fb      	str	r3, [r7, #28]
 8005d5c:	e002      	b.n	8005d64 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d62:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d68:	69fa      	ldr	r2, [r7, #28]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d04b      	beq.n	8005e06 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d72:	697a      	ldr	r2, [r7, #20]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d146      	bne.n	8005e06 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005d78:	4b25      	ldr	r3, [pc, #148]	; (8005e10 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d10a      	bne.n	8005d98 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d86:	f383 8811 	msr	BASEPRI, r3
 8005d8a:	f3bf 8f6f 	isb	sy
 8005d8e:	f3bf 8f4f 	dsb	sy
 8005d92:	60bb      	str	r3, [r7, #8]
}
 8005d94:	bf00      	nop
 8005d96:	e7fe      	b.n	8005d96 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	69fa      	ldr	r2, [r7, #28]
 8005da2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	db04      	blt.n	8005db6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	6959      	ldr	r1, [r3, #20]
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4413      	add	r3, r2
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	4a13      	ldr	r2, [pc, #76]	; (8005e14 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005dc6:	4413      	add	r3, r2
 8005dc8:	4299      	cmp	r1, r3
 8005dca:	d11c      	bne.n	8005e06 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	3304      	adds	r3, #4
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f7fe f88b 	bl	8003eec <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dda:	4b0f      	ldr	r3, [pc, #60]	; (8005e18 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d903      	bls.n	8005dea <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de6:	4a0c      	ldr	r2, [pc, #48]	; (8005e18 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005de8:	6013      	str	r3, [r2, #0]
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dee:	4613      	mov	r3, r2
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	4413      	add	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4a07      	ldr	r2, [pc, #28]	; (8005e14 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005df8:	441a      	add	r2, r3
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	3304      	adds	r3, #4
 8005dfe:	4619      	mov	r1, r3
 8005e00:	4610      	mov	r0, r2
 8005e02:	f7fe f816 	bl	8003e32 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e06:	bf00      	nop
 8005e08:	3720      	adds	r7, #32
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	20000830 	.word	0x20000830
 8005e14:	20000834 	.word	0x20000834
 8005e18:	20000d0c 	.word	0x20000d0c

08005e1c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005e1c:	b480      	push	{r7}
 8005e1e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005e20:	4b07      	ldr	r3, [pc, #28]	; (8005e40 <pvTaskIncrementMutexHeldCount+0x24>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d004      	beq.n	8005e32 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005e28:	4b05      	ldr	r3, [pc, #20]	; (8005e40 <pvTaskIncrementMutexHeldCount+0x24>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e2e:	3201      	adds	r2, #1
 8005e30:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005e32:	4b03      	ldr	r3, [pc, #12]	; (8005e40 <pvTaskIncrementMutexHeldCount+0x24>)
 8005e34:	681b      	ldr	r3, [r3, #0]
	}
 8005e36:	4618      	mov	r0, r3
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	20000830 	.word	0x20000830

08005e44 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e4e:	4b21      	ldr	r3, [pc, #132]	; (8005ed4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e54:	4b20      	ldr	r3, [pc, #128]	; (8005ed8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	3304      	adds	r3, #4
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f7fe f846 	bl	8003eec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e66:	d10a      	bne.n	8005e7e <prvAddCurrentTaskToDelayedList+0x3a>
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d007      	beq.n	8005e7e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e6e:	4b1a      	ldr	r3, [pc, #104]	; (8005ed8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	3304      	adds	r3, #4
 8005e74:	4619      	mov	r1, r3
 8005e76:	4819      	ldr	r0, [pc, #100]	; (8005edc <prvAddCurrentTaskToDelayedList+0x98>)
 8005e78:	f7fd ffdb 	bl	8003e32 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005e7c:	e026      	b.n	8005ecc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4413      	add	r3, r2
 8005e84:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005e86:	4b14      	ldr	r3, [pc, #80]	; (8005ed8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68ba      	ldr	r2, [r7, #8]
 8005e8c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005e8e:	68ba      	ldr	r2, [r7, #8]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d209      	bcs.n	8005eaa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e96:	4b12      	ldr	r3, [pc, #72]	; (8005ee0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	4b0f      	ldr	r3, [pc, #60]	; (8005ed8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	3304      	adds	r3, #4
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	4610      	mov	r0, r2
 8005ea4:	f7fd ffe9 	bl	8003e7a <vListInsert>
}
 8005ea8:	e010      	b.n	8005ecc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005eaa:	4b0e      	ldr	r3, [pc, #56]	; (8005ee4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	4b0a      	ldr	r3, [pc, #40]	; (8005ed8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	3304      	adds	r3, #4
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	4610      	mov	r0, r2
 8005eb8:	f7fd ffdf 	bl	8003e7a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005ebc:	4b0a      	ldr	r3, [pc, #40]	; (8005ee8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68ba      	ldr	r2, [r7, #8]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d202      	bcs.n	8005ecc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005ec6:	4a08      	ldr	r2, [pc, #32]	; (8005ee8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	6013      	str	r3, [r2, #0]
}
 8005ecc:	bf00      	nop
 8005ece:	3710      	adds	r7, #16
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	20000d08 	.word	0x20000d08
 8005ed8:	20000830 	.word	0x20000830
 8005edc:	20000cf0 	.word	0x20000cf0
 8005ee0:	20000cc0 	.word	0x20000cc0
 8005ee4:	20000cbc 	.word	0x20000cbc
 8005ee8:	20000d24 	.word	0x20000d24

08005eec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b08a      	sub	sp, #40	; 0x28
 8005ef0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005ef6:	f000 fb07 	bl	8006508 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005efa:	4b1c      	ldr	r3, [pc, #112]	; (8005f6c <xTimerCreateTimerTask+0x80>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d021      	beq.n	8005f46 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005f02:	2300      	movs	r3, #0
 8005f04:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005f06:	2300      	movs	r3, #0
 8005f08:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005f0a:	1d3a      	adds	r2, r7, #4
 8005f0c:	f107 0108 	add.w	r1, r7, #8
 8005f10:	f107 030c 	add.w	r3, r7, #12
 8005f14:	4618      	mov	r0, r3
 8005f16:	f7fd ff45 	bl	8003da4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005f1a:	6879      	ldr	r1, [r7, #4]
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	9202      	str	r2, [sp, #8]
 8005f22:	9301      	str	r3, [sp, #4]
 8005f24:	2302      	movs	r3, #2
 8005f26:	9300      	str	r3, [sp, #0]
 8005f28:	2300      	movs	r3, #0
 8005f2a:	460a      	mov	r2, r1
 8005f2c:	4910      	ldr	r1, [pc, #64]	; (8005f70 <xTimerCreateTimerTask+0x84>)
 8005f2e:	4811      	ldr	r0, [pc, #68]	; (8005f74 <xTimerCreateTimerTask+0x88>)
 8005f30:	f7ff f814 	bl	8004f5c <xTaskCreateStatic>
 8005f34:	4603      	mov	r3, r0
 8005f36:	4a10      	ldr	r2, [pc, #64]	; (8005f78 <xTimerCreateTimerTask+0x8c>)
 8005f38:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005f3a:	4b0f      	ldr	r3, [pc, #60]	; (8005f78 <xTimerCreateTimerTask+0x8c>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d001      	beq.n	8005f46 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005f42:	2301      	movs	r3, #1
 8005f44:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d10a      	bne.n	8005f62 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f50:	f383 8811 	msr	BASEPRI, r3
 8005f54:	f3bf 8f6f 	isb	sy
 8005f58:	f3bf 8f4f 	dsb	sy
 8005f5c:	613b      	str	r3, [r7, #16]
}
 8005f5e:	bf00      	nop
 8005f60:	e7fe      	b.n	8005f60 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005f62:	697b      	ldr	r3, [r7, #20]
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3718      	adds	r7, #24
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	20000d60 	.word	0x20000d60
 8005f70:	08006edc 	.word	0x08006edc
 8005f74:	080060b1 	.word	0x080060b1
 8005f78:	20000d64 	.word	0x20000d64

08005f7c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b08a      	sub	sp, #40	; 0x28
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
 8005f88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d10a      	bne.n	8005faa <xTimerGenericCommand+0x2e>
	__asm volatile
 8005f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f98:	f383 8811 	msr	BASEPRI, r3
 8005f9c:	f3bf 8f6f 	isb	sy
 8005fa0:	f3bf 8f4f 	dsb	sy
 8005fa4:	623b      	str	r3, [r7, #32]
}
 8005fa6:	bf00      	nop
 8005fa8:	e7fe      	b.n	8005fa8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005faa:	4b1a      	ldr	r3, [pc, #104]	; (8006014 <xTimerGenericCommand+0x98>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d02a      	beq.n	8006008 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	2b05      	cmp	r3, #5
 8005fc2:	dc18      	bgt.n	8005ff6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005fc4:	f7ff fdb4 	bl	8005b30 <xTaskGetSchedulerState>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d109      	bne.n	8005fe2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005fce:	4b11      	ldr	r3, [pc, #68]	; (8006014 <xTimerGenericCommand+0x98>)
 8005fd0:	6818      	ldr	r0, [r3, #0]
 8005fd2:	f107 0110 	add.w	r1, r7, #16
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fda:	f7fe f959 	bl	8004290 <xQueueGenericSend>
 8005fde:	6278      	str	r0, [r7, #36]	; 0x24
 8005fe0:	e012      	b.n	8006008 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005fe2:	4b0c      	ldr	r3, [pc, #48]	; (8006014 <xTimerGenericCommand+0x98>)
 8005fe4:	6818      	ldr	r0, [r3, #0]
 8005fe6:	f107 0110 	add.w	r1, r7, #16
 8005fea:	2300      	movs	r3, #0
 8005fec:	2200      	movs	r2, #0
 8005fee:	f7fe f94f 	bl	8004290 <xQueueGenericSend>
 8005ff2:	6278      	str	r0, [r7, #36]	; 0x24
 8005ff4:	e008      	b.n	8006008 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005ff6:	4b07      	ldr	r3, [pc, #28]	; (8006014 <xTimerGenericCommand+0x98>)
 8005ff8:	6818      	ldr	r0, [r3, #0]
 8005ffa:	f107 0110 	add.w	r1, r7, #16
 8005ffe:	2300      	movs	r3, #0
 8006000:	683a      	ldr	r2, [r7, #0]
 8006002:	f7fe fa43 	bl	800448c <xQueueGenericSendFromISR>
 8006006:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800600a:	4618      	mov	r0, r3
 800600c:	3728      	adds	r7, #40	; 0x28
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	20000d60 	.word	0x20000d60

08006018 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b088      	sub	sp, #32
 800601c:	af02      	add	r7, sp, #8
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006022:	4b22      	ldr	r3, [pc, #136]	; (80060ac <prvProcessExpiredTimer+0x94>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	3304      	adds	r3, #4
 8006030:	4618      	mov	r0, r3
 8006032:	f7fd ff5b 	bl	8003eec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800603c:	f003 0304 	and.w	r3, r3, #4
 8006040:	2b00      	cmp	r3, #0
 8006042:	d022      	beq.n	800608a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	699a      	ldr	r2, [r3, #24]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	18d1      	adds	r1, r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	683a      	ldr	r2, [r7, #0]
 8006050:	6978      	ldr	r0, [r7, #20]
 8006052:	f000 f8d1 	bl	80061f8 <prvInsertTimerInActiveList>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d01f      	beq.n	800609c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800605c:	2300      	movs	r3, #0
 800605e:	9300      	str	r3, [sp, #0]
 8006060:	2300      	movs	r3, #0
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	2100      	movs	r1, #0
 8006066:	6978      	ldr	r0, [r7, #20]
 8006068:	f7ff ff88 	bl	8005f7c <xTimerGenericCommand>
 800606c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d113      	bne.n	800609c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006078:	f383 8811 	msr	BASEPRI, r3
 800607c:	f3bf 8f6f 	isb	sy
 8006080:	f3bf 8f4f 	dsb	sy
 8006084:	60fb      	str	r3, [r7, #12]
}
 8006086:	bf00      	nop
 8006088:	e7fe      	b.n	8006088 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006090:	f023 0301 	bic.w	r3, r3, #1
 8006094:	b2da      	uxtb	r2, r3
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	6a1b      	ldr	r3, [r3, #32]
 80060a0:	6978      	ldr	r0, [r7, #20]
 80060a2:	4798      	blx	r3
}
 80060a4:	bf00      	nop
 80060a6:	3718      	adds	r7, #24
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	20000d58 	.word	0x20000d58

080060b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80060b8:	f107 0308 	add.w	r3, r7, #8
 80060bc:	4618      	mov	r0, r3
 80060be:	f000 f857 	bl	8006170 <prvGetNextExpireTime>
 80060c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	4619      	mov	r1, r3
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f000 f803 	bl	80060d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80060ce:	f000 f8d5 	bl	800627c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80060d2:	e7f1      	b.n	80060b8 <prvTimerTask+0x8>

080060d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80060de:	f7ff f945 	bl	800536c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80060e2:	f107 0308 	add.w	r3, r7, #8
 80060e6:	4618      	mov	r0, r3
 80060e8:	f000 f866 	bl	80061b8 <prvSampleTimeNow>
 80060ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d130      	bne.n	8006156 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d10a      	bne.n	8006110 <prvProcessTimerOrBlockTask+0x3c>
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d806      	bhi.n	8006110 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006102:	f7ff f941 	bl	8005388 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006106:	68f9      	ldr	r1, [r7, #12]
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f7ff ff85 	bl	8006018 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800610e:	e024      	b.n	800615a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d008      	beq.n	8006128 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006116:	4b13      	ldr	r3, [pc, #76]	; (8006164 <prvProcessTimerOrBlockTask+0x90>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d101      	bne.n	8006124 <prvProcessTimerOrBlockTask+0x50>
 8006120:	2301      	movs	r3, #1
 8006122:	e000      	b.n	8006126 <prvProcessTimerOrBlockTask+0x52>
 8006124:	2300      	movs	r3, #0
 8006126:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006128:	4b0f      	ldr	r3, [pc, #60]	; (8006168 <prvProcessTimerOrBlockTask+0x94>)
 800612a:	6818      	ldr	r0, [r3, #0]
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	683a      	ldr	r2, [r7, #0]
 8006134:	4619      	mov	r1, r3
 8006136:	f7fe fedd 	bl	8004ef4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800613a:	f7ff f925 	bl	8005388 <xTaskResumeAll>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d10a      	bne.n	800615a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006144:	4b09      	ldr	r3, [pc, #36]	; (800616c <prvProcessTimerOrBlockTask+0x98>)
 8006146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800614a:	601a      	str	r2, [r3, #0]
 800614c:	f3bf 8f4f 	dsb	sy
 8006150:	f3bf 8f6f 	isb	sy
}
 8006154:	e001      	b.n	800615a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006156:	f7ff f917 	bl	8005388 <xTaskResumeAll>
}
 800615a:	bf00      	nop
 800615c:	3710      	adds	r7, #16
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	20000d5c 	.word	0x20000d5c
 8006168:	20000d60 	.word	0x20000d60
 800616c:	e000ed04 	.word	0xe000ed04

08006170 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006170:	b480      	push	{r7}
 8006172:	b085      	sub	sp, #20
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006178:	4b0e      	ldr	r3, [pc, #56]	; (80061b4 <prvGetNextExpireTime+0x44>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d101      	bne.n	8006186 <prvGetNextExpireTime+0x16>
 8006182:	2201      	movs	r2, #1
 8006184:	e000      	b.n	8006188 <prvGetNextExpireTime+0x18>
 8006186:	2200      	movs	r2, #0
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d105      	bne.n	80061a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006194:	4b07      	ldr	r3, [pc, #28]	; (80061b4 <prvGetNextExpireTime+0x44>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	60fb      	str	r3, [r7, #12]
 800619e:	e001      	b.n	80061a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80061a0:	2300      	movs	r3, #0
 80061a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80061a4:	68fb      	ldr	r3, [r7, #12]
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3714      	adds	r7, #20
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	20000d58 	.word	0x20000d58

080061b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80061c0:	f7ff f980 	bl	80054c4 <xTaskGetTickCount>
 80061c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80061c6:	4b0b      	ldr	r3, [pc, #44]	; (80061f4 <prvSampleTimeNow+0x3c>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d205      	bcs.n	80061dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80061d0:	f000 f936 	bl	8006440 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	601a      	str	r2, [r3, #0]
 80061da:	e002      	b.n	80061e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80061e2:	4a04      	ldr	r2, [pc, #16]	; (80061f4 <prvSampleTimeNow+0x3c>)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80061e8:	68fb      	ldr	r3, [r7, #12]
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3710      	adds	r7, #16
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	20000d68 	.word	0x20000d68

080061f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b086      	sub	sp, #24
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	607a      	str	r2, [r7, #4]
 8006204:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006206:	2300      	movs	r3, #0
 8006208:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	429a      	cmp	r2, r3
 800621c:	d812      	bhi.n	8006244 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	1ad2      	subs	r2, r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	699b      	ldr	r3, [r3, #24]
 8006228:	429a      	cmp	r2, r3
 800622a:	d302      	bcc.n	8006232 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800622c:	2301      	movs	r3, #1
 800622e:	617b      	str	r3, [r7, #20]
 8006230:	e01b      	b.n	800626a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006232:	4b10      	ldr	r3, [pc, #64]	; (8006274 <prvInsertTimerInActiveList+0x7c>)
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	3304      	adds	r3, #4
 800623a:	4619      	mov	r1, r3
 800623c:	4610      	mov	r0, r2
 800623e:	f7fd fe1c 	bl	8003e7a <vListInsert>
 8006242:	e012      	b.n	800626a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	429a      	cmp	r2, r3
 800624a:	d206      	bcs.n	800625a <prvInsertTimerInActiveList+0x62>
 800624c:	68ba      	ldr	r2, [r7, #8]
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	429a      	cmp	r2, r3
 8006252:	d302      	bcc.n	800625a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006254:	2301      	movs	r3, #1
 8006256:	617b      	str	r3, [r7, #20]
 8006258:	e007      	b.n	800626a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800625a:	4b07      	ldr	r3, [pc, #28]	; (8006278 <prvInsertTimerInActiveList+0x80>)
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	3304      	adds	r3, #4
 8006262:	4619      	mov	r1, r3
 8006264:	4610      	mov	r0, r2
 8006266:	f7fd fe08 	bl	8003e7a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800626a:	697b      	ldr	r3, [r7, #20]
}
 800626c:	4618      	mov	r0, r3
 800626e:	3718      	adds	r7, #24
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	20000d5c 	.word	0x20000d5c
 8006278:	20000d58 	.word	0x20000d58

0800627c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b08e      	sub	sp, #56	; 0x38
 8006280:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006282:	e0ca      	b.n	800641a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	da18      	bge.n	80062bc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800628a:	1d3b      	adds	r3, r7, #4
 800628c:	3304      	adds	r3, #4
 800628e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10a      	bne.n	80062ac <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629a:	f383 8811 	msr	BASEPRI, r3
 800629e:	f3bf 8f6f 	isb	sy
 80062a2:	f3bf 8f4f 	dsb	sy
 80062a6:	61fb      	str	r3, [r7, #28]
}
 80062a8:	bf00      	nop
 80062aa:	e7fe      	b.n	80062aa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80062ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062b2:	6850      	ldr	r0, [r2, #4]
 80062b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062b6:	6892      	ldr	r2, [r2, #8]
 80062b8:	4611      	mov	r1, r2
 80062ba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f2c0 80aa 	blt.w	8006418 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80062c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ca:	695b      	ldr	r3, [r3, #20]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d004      	beq.n	80062da <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d2:	3304      	adds	r3, #4
 80062d4:	4618      	mov	r0, r3
 80062d6:	f7fd fe09 	bl	8003eec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80062da:	463b      	mov	r3, r7
 80062dc:	4618      	mov	r0, r3
 80062de:	f7ff ff6b 	bl	80061b8 <prvSampleTimeNow>
 80062e2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2b09      	cmp	r3, #9
 80062e8:	f200 8097 	bhi.w	800641a <prvProcessReceivedCommands+0x19e>
 80062ec:	a201      	add	r2, pc, #4	; (adr r2, 80062f4 <prvProcessReceivedCommands+0x78>)
 80062ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f2:	bf00      	nop
 80062f4:	0800631d 	.word	0x0800631d
 80062f8:	0800631d 	.word	0x0800631d
 80062fc:	0800631d 	.word	0x0800631d
 8006300:	08006391 	.word	0x08006391
 8006304:	080063a5 	.word	0x080063a5
 8006308:	080063ef 	.word	0x080063ef
 800630c:	0800631d 	.word	0x0800631d
 8006310:	0800631d 	.word	0x0800631d
 8006314:	08006391 	.word	0x08006391
 8006318:	080063a5 	.word	0x080063a5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800631c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006322:	f043 0301 	orr.w	r3, r3, #1
 8006326:	b2da      	uxtb	r2, r3
 8006328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800632e:	68ba      	ldr	r2, [r7, #8]
 8006330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006332:	699b      	ldr	r3, [r3, #24]
 8006334:	18d1      	adds	r1, r2, r3
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800633a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800633c:	f7ff ff5c 	bl	80061f8 <prvInsertTimerInActiveList>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d069      	beq.n	800641a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006348:	6a1b      	ldr	r3, [r3, #32]
 800634a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800634c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800634e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006350:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006354:	f003 0304 	and.w	r3, r3, #4
 8006358:	2b00      	cmp	r3, #0
 800635a:	d05e      	beq.n	800641a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800635c:	68ba      	ldr	r2, [r7, #8]
 800635e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	441a      	add	r2, r3
 8006364:	2300      	movs	r3, #0
 8006366:	9300      	str	r3, [sp, #0]
 8006368:	2300      	movs	r3, #0
 800636a:	2100      	movs	r1, #0
 800636c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800636e:	f7ff fe05 	bl	8005f7c <xTimerGenericCommand>
 8006372:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006374:	6a3b      	ldr	r3, [r7, #32]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d14f      	bne.n	800641a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800637a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637e:	f383 8811 	msr	BASEPRI, r3
 8006382:	f3bf 8f6f 	isb	sy
 8006386:	f3bf 8f4f 	dsb	sy
 800638a:	61bb      	str	r3, [r7, #24]
}
 800638c:	bf00      	nop
 800638e:	e7fe      	b.n	800638e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006392:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006396:	f023 0301 	bic.w	r3, r3, #1
 800639a:	b2da      	uxtb	r2, r3
 800639c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80063a2:	e03a      	b.n	800641a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80063a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063aa:	f043 0301 	orr.w	r3, r3, #1
 80063ae:	b2da      	uxtb	r2, r3
 80063b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80063bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063be:	699b      	ldr	r3, [r3, #24]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d10a      	bne.n	80063da <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80063c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c8:	f383 8811 	msr	BASEPRI, r3
 80063cc:	f3bf 8f6f 	isb	sy
 80063d0:	f3bf 8f4f 	dsb	sy
 80063d4:	617b      	str	r3, [r7, #20]
}
 80063d6:	bf00      	nop
 80063d8:	e7fe      	b.n	80063d8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80063da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063dc:	699a      	ldr	r2, [r3, #24]
 80063de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e0:	18d1      	adds	r1, r2, r3
 80063e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063e8:	f7ff ff06 	bl	80061f8 <prvInsertTimerInActiveList>
					break;
 80063ec:	e015      	b.n	800641a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80063ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063f4:	f003 0302 	and.w	r3, r3, #2
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d103      	bne.n	8006404 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80063fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063fe:	f000 fbdf 	bl	8006bc0 <vPortFree>
 8006402:	e00a      	b.n	800641a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006406:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800640a:	f023 0301 	bic.w	r3, r3, #1
 800640e:	b2da      	uxtb	r2, r3
 8006410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006412:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006416:	e000      	b.n	800641a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006418:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800641a:	4b08      	ldr	r3, [pc, #32]	; (800643c <prvProcessReceivedCommands+0x1c0>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	1d39      	adds	r1, r7, #4
 8006420:	2200      	movs	r2, #0
 8006422:	4618      	mov	r0, r3
 8006424:	f7fe f95a 	bl	80046dc <xQueueReceive>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	f47f af2a 	bne.w	8006284 <prvProcessReceivedCommands+0x8>
	}
}
 8006430:	bf00      	nop
 8006432:	bf00      	nop
 8006434:	3730      	adds	r7, #48	; 0x30
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	20000d60 	.word	0x20000d60

08006440 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b088      	sub	sp, #32
 8006444:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006446:	e048      	b.n	80064da <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006448:	4b2d      	ldr	r3, [pc, #180]	; (8006500 <prvSwitchTimerLists+0xc0>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006452:	4b2b      	ldr	r3, [pc, #172]	; (8006500 <prvSwitchTimerLists+0xc0>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	3304      	adds	r3, #4
 8006460:	4618      	mov	r0, r3
 8006462:	f7fd fd43 	bl	8003eec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006474:	f003 0304 	and.w	r3, r3, #4
 8006478:	2b00      	cmp	r3, #0
 800647a:	d02e      	beq.n	80064da <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	699b      	ldr	r3, [r3, #24]
 8006480:	693a      	ldr	r2, [r7, #16]
 8006482:	4413      	add	r3, r2
 8006484:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006486:	68ba      	ldr	r2, [r7, #8]
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	429a      	cmp	r2, r3
 800648c:	d90e      	bls.n	80064ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	68ba      	ldr	r2, [r7, #8]
 8006492:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800649a:	4b19      	ldr	r3, [pc, #100]	; (8006500 <prvSwitchTimerLists+0xc0>)
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	3304      	adds	r3, #4
 80064a2:	4619      	mov	r1, r3
 80064a4:	4610      	mov	r0, r2
 80064a6:	f7fd fce8 	bl	8003e7a <vListInsert>
 80064aa:	e016      	b.n	80064da <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80064ac:	2300      	movs	r3, #0
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	2300      	movs	r3, #0
 80064b2:	693a      	ldr	r2, [r7, #16]
 80064b4:	2100      	movs	r1, #0
 80064b6:	68f8      	ldr	r0, [r7, #12]
 80064b8:	f7ff fd60 	bl	8005f7c <xTimerGenericCommand>
 80064bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d10a      	bne.n	80064da <prvSwitchTimerLists+0x9a>
	__asm volatile
 80064c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c8:	f383 8811 	msr	BASEPRI, r3
 80064cc:	f3bf 8f6f 	isb	sy
 80064d0:	f3bf 8f4f 	dsb	sy
 80064d4:	603b      	str	r3, [r7, #0]
}
 80064d6:	bf00      	nop
 80064d8:	e7fe      	b.n	80064d8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80064da:	4b09      	ldr	r3, [pc, #36]	; (8006500 <prvSwitchTimerLists+0xc0>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d1b1      	bne.n	8006448 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80064e4:	4b06      	ldr	r3, [pc, #24]	; (8006500 <prvSwitchTimerLists+0xc0>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80064ea:	4b06      	ldr	r3, [pc, #24]	; (8006504 <prvSwitchTimerLists+0xc4>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a04      	ldr	r2, [pc, #16]	; (8006500 <prvSwitchTimerLists+0xc0>)
 80064f0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80064f2:	4a04      	ldr	r2, [pc, #16]	; (8006504 <prvSwitchTimerLists+0xc4>)
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	6013      	str	r3, [r2, #0]
}
 80064f8:	bf00      	nop
 80064fa:	3718      	adds	r7, #24
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	20000d58 	.word	0x20000d58
 8006504:	20000d5c 	.word	0x20000d5c

08006508 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800650e:	f000 f969 	bl	80067e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006512:	4b15      	ldr	r3, [pc, #84]	; (8006568 <prvCheckForValidListAndQueue+0x60>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d120      	bne.n	800655c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800651a:	4814      	ldr	r0, [pc, #80]	; (800656c <prvCheckForValidListAndQueue+0x64>)
 800651c:	f7fd fc5c 	bl	8003dd8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006520:	4813      	ldr	r0, [pc, #76]	; (8006570 <prvCheckForValidListAndQueue+0x68>)
 8006522:	f7fd fc59 	bl	8003dd8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006526:	4b13      	ldr	r3, [pc, #76]	; (8006574 <prvCheckForValidListAndQueue+0x6c>)
 8006528:	4a10      	ldr	r2, [pc, #64]	; (800656c <prvCheckForValidListAndQueue+0x64>)
 800652a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800652c:	4b12      	ldr	r3, [pc, #72]	; (8006578 <prvCheckForValidListAndQueue+0x70>)
 800652e:	4a10      	ldr	r2, [pc, #64]	; (8006570 <prvCheckForValidListAndQueue+0x68>)
 8006530:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006532:	2300      	movs	r3, #0
 8006534:	9300      	str	r3, [sp, #0]
 8006536:	4b11      	ldr	r3, [pc, #68]	; (800657c <prvCheckForValidListAndQueue+0x74>)
 8006538:	4a11      	ldr	r2, [pc, #68]	; (8006580 <prvCheckForValidListAndQueue+0x78>)
 800653a:	2110      	movs	r1, #16
 800653c:	200a      	movs	r0, #10
 800653e:	f7fd fd67 	bl	8004010 <xQueueGenericCreateStatic>
 8006542:	4603      	mov	r3, r0
 8006544:	4a08      	ldr	r2, [pc, #32]	; (8006568 <prvCheckForValidListAndQueue+0x60>)
 8006546:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006548:	4b07      	ldr	r3, [pc, #28]	; (8006568 <prvCheckForValidListAndQueue+0x60>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d005      	beq.n	800655c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006550:	4b05      	ldr	r3, [pc, #20]	; (8006568 <prvCheckForValidListAndQueue+0x60>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	490b      	ldr	r1, [pc, #44]	; (8006584 <prvCheckForValidListAndQueue+0x7c>)
 8006556:	4618      	mov	r0, r3
 8006558:	f7fe fc78 	bl	8004e4c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800655c:	f000 f972 	bl	8006844 <vPortExitCritical>
}
 8006560:	bf00      	nop
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	20000d60 	.word	0x20000d60
 800656c:	20000d30 	.word	0x20000d30
 8006570:	20000d44 	.word	0x20000d44
 8006574:	20000d58 	.word	0x20000d58
 8006578:	20000d5c 	.word	0x20000d5c
 800657c:	20000e0c 	.word	0x20000e0c
 8006580:	20000d6c 	.word	0x20000d6c
 8006584:	08006ee4 	.word	0x08006ee4

08006588 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	3b04      	subs	r3, #4
 8006598:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80065a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	3b04      	subs	r3, #4
 80065a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	f023 0201 	bic.w	r2, r3, #1
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	3b04      	subs	r3, #4
 80065b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80065b8:	4a0c      	ldr	r2, [pc, #48]	; (80065ec <pxPortInitialiseStack+0x64>)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	3b14      	subs	r3, #20
 80065c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	3b04      	subs	r3, #4
 80065ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f06f 0202 	mvn.w	r2, #2
 80065d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	3b20      	subs	r3, #32
 80065dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80065de:	68fb      	ldr	r3, [r7, #12]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3714      	adds	r7, #20
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr
 80065ec:	080065f1 	.word	0x080065f1

080065f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80065f6:	2300      	movs	r3, #0
 80065f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80065fa:	4b12      	ldr	r3, [pc, #72]	; (8006644 <prvTaskExitError+0x54>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006602:	d00a      	beq.n	800661a <prvTaskExitError+0x2a>
	__asm volatile
 8006604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006608:	f383 8811 	msr	BASEPRI, r3
 800660c:	f3bf 8f6f 	isb	sy
 8006610:	f3bf 8f4f 	dsb	sy
 8006614:	60fb      	str	r3, [r7, #12]
}
 8006616:	bf00      	nop
 8006618:	e7fe      	b.n	8006618 <prvTaskExitError+0x28>
	__asm volatile
 800661a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661e:	f383 8811 	msr	BASEPRI, r3
 8006622:	f3bf 8f6f 	isb	sy
 8006626:	f3bf 8f4f 	dsb	sy
 800662a:	60bb      	str	r3, [r7, #8]
}
 800662c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800662e:	bf00      	nop
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d0fc      	beq.n	8006630 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006636:	bf00      	nop
 8006638:	bf00      	nop
 800663a:	3714      	adds	r7, #20
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr
 8006644:	20000010 	.word	0x20000010
	...

08006650 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006650:	4b07      	ldr	r3, [pc, #28]	; (8006670 <pxCurrentTCBConst2>)
 8006652:	6819      	ldr	r1, [r3, #0]
 8006654:	6808      	ldr	r0, [r1, #0]
 8006656:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800665a:	f380 8809 	msr	PSP, r0
 800665e:	f3bf 8f6f 	isb	sy
 8006662:	f04f 0000 	mov.w	r0, #0
 8006666:	f380 8811 	msr	BASEPRI, r0
 800666a:	4770      	bx	lr
 800666c:	f3af 8000 	nop.w

08006670 <pxCurrentTCBConst2>:
 8006670:	20000830 	.word	0x20000830
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006674:	bf00      	nop
 8006676:	bf00      	nop

08006678 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006678:	4808      	ldr	r0, [pc, #32]	; (800669c <prvPortStartFirstTask+0x24>)
 800667a:	6800      	ldr	r0, [r0, #0]
 800667c:	6800      	ldr	r0, [r0, #0]
 800667e:	f380 8808 	msr	MSP, r0
 8006682:	f04f 0000 	mov.w	r0, #0
 8006686:	f380 8814 	msr	CONTROL, r0
 800668a:	b662      	cpsie	i
 800668c:	b661      	cpsie	f
 800668e:	f3bf 8f4f 	dsb	sy
 8006692:	f3bf 8f6f 	isb	sy
 8006696:	df00      	svc	0
 8006698:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800669a:	bf00      	nop
 800669c:	e000ed08 	.word	0xe000ed08

080066a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b086      	sub	sp, #24
 80066a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80066a6:	4b46      	ldr	r3, [pc, #280]	; (80067c0 <xPortStartScheduler+0x120>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a46      	ldr	r2, [pc, #280]	; (80067c4 <xPortStartScheduler+0x124>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d10a      	bne.n	80066c6 <xPortStartScheduler+0x26>
	__asm volatile
 80066b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b4:	f383 8811 	msr	BASEPRI, r3
 80066b8:	f3bf 8f6f 	isb	sy
 80066bc:	f3bf 8f4f 	dsb	sy
 80066c0:	613b      	str	r3, [r7, #16]
}
 80066c2:	bf00      	nop
 80066c4:	e7fe      	b.n	80066c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80066c6:	4b3e      	ldr	r3, [pc, #248]	; (80067c0 <xPortStartScheduler+0x120>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a3f      	ldr	r2, [pc, #252]	; (80067c8 <xPortStartScheduler+0x128>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d10a      	bne.n	80066e6 <xPortStartScheduler+0x46>
	__asm volatile
 80066d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d4:	f383 8811 	msr	BASEPRI, r3
 80066d8:	f3bf 8f6f 	isb	sy
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	60fb      	str	r3, [r7, #12]
}
 80066e2:	bf00      	nop
 80066e4:	e7fe      	b.n	80066e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80066e6:	4b39      	ldr	r3, [pc, #228]	; (80067cc <xPortStartScheduler+0x12c>)
 80066e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	22ff      	movs	r2, #255	; 0xff
 80066f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006700:	78fb      	ldrb	r3, [r7, #3]
 8006702:	b2db      	uxtb	r3, r3
 8006704:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006708:	b2da      	uxtb	r2, r3
 800670a:	4b31      	ldr	r3, [pc, #196]	; (80067d0 <xPortStartScheduler+0x130>)
 800670c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800670e:	4b31      	ldr	r3, [pc, #196]	; (80067d4 <xPortStartScheduler+0x134>)
 8006710:	2207      	movs	r2, #7
 8006712:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006714:	e009      	b.n	800672a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006716:	4b2f      	ldr	r3, [pc, #188]	; (80067d4 <xPortStartScheduler+0x134>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	3b01      	subs	r3, #1
 800671c:	4a2d      	ldr	r2, [pc, #180]	; (80067d4 <xPortStartScheduler+0x134>)
 800671e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006720:	78fb      	ldrb	r3, [r7, #3]
 8006722:	b2db      	uxtb	r3, r3
 8006724:	005b      	lsls	r3, r3, #1
 8006726:	b2db      	uxtb	r3, r3
 8006728:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800672a:	78fb      	ldrb	r3, [r7, #3]
 800672c:	b2db      	uxtb	r3, r3
 800672e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006732:	2b80      	cmp	r3, #128	; 0x80
 8006734:	d0ef      	beq.n	8006716 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006736:	4b27      	ldr	r3, [pc, #156]	; (80067d4 <xPortStartScheduler+0x134>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f1c3 0307 	rsb	r3, r3, #7
 800673e:	2b04      	cmp	r3, #4
 8006740:	d00a      	beq.n	8006758 <xPortStartScheduler+0xb8>
	__asm volatile
 8006742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006746:	f383 8811 	msr	BASEPRI, r3
 800674a:	f3bf 8f6f 	isb	sy
 800674e:	f3bf 8f4f 	dsb	sy
 8006752:	60bb      	str	r3, [r7, #8]
}
 8006754:	bf00      	nop
 8006756:	e7fe      	b.n	8006756 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006758:	4b1e      	ldr	r3, [pc, #120]	; (80067d4 <xPortStartScheduler+0x134>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	021b      	lsls	r3, r3, #8
 800675e:	4a1d      	ldr	r2, [pc, #116]	; (80067d4 <xPortStartScheduler+0x134>)
 8006760:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006762:	4b1c      	ldr	r3, [pc, #112]	; (80067d4 <xPortStartScheduler+0x134>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800676a:	4a1a      	ldr	r2, [pc, #104]	; (80067d4 <xPortStartScheduler+0x134>)
 800676c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	b2da      	uxtb	r2, r3
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006776:	4b18      	ldr	r3, [pc, #96]	; (80067d8 <xPortStartScheduler+0x138>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a17      	ldr	r2, [pc, #92]	; (80067d8 <xPortStartScheduler+0x138>)
 800677c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006780:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006782:	4b15      	ldr	r3, [pc, #84]	; (80067d8 <xPortStartScheduler+0x138>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a14      	ldr	r2, [pc, #80]	; (80067d8 <xPortStartScheduler+0x138>)
 8006788:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800678c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800678e:	f000 f8dd 	bl	800694c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006792:	4b12      	ldr	r3, [pc, #72]	; (80067dc <xPortStartScheduler+0x13c>)
 8006794:	2200      	movs	r2, #0
 8006796:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006798:	f000 f8fc 	bl	8006994 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800679c:	4b10      	ldr	r3, [pc, #64]	; (80067e0 <xPortStartScheduler+0x140>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a0f      	ldr	r2, [pc, #60]	; (80067e0 <xPortStartScheduler+0x140>)
 80067a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80067a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80067a8:	f7ff ff66 	bl	8006678 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80067ac:	f7fe ff54 	bl	8005658 <vTaskSwitchContext>
	prvTaskExitError();
 80067b0:	f7ff ff1e 	bl	80065f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80067b4:	2300      	movs	r3, #0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3718      	adds	r7, #24
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	e000ed00 	.word	0xe000ed00
 80067c4:	410fc271 	.word	0x410fc271
 80067c8:	410fc270 	.word	0x410fc270
 80067cc:	e000e400 	.word	0xe000e400
 80067d0:	20000e5c 	.word	0x20000e5c
 80067d4:	20000e60 	.word	0x20000e60
 80067d8:	e000ed20 	.word	0xe000ed20
 80067dc:	20000010 	.word	0x20000010
 80067e0:	e000ef34 	.word	0xe000ef34

080067e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
	__asm volatile
 80067ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ee:	f383 8811 	msr	BASEPRI, r3
 80067f2:	f3bf 8f6f 	isb	sy
 80067f6:	f3bf 8f4f 	dsb	sy
 80067fa:	607b      	str	r3, [r7, #4]
}
 80067fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80067fe:	4b0f      	ldr	r3, [pc, #60]	; (800683c <vPortEnterCritical+0x58>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	3301      	adds	r3, #1
 8006804:	4a0d      	ldr	r2, [pc, #52]	; (800683c <vPortEnterCritical+0x58>)
 8006806:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006808:	4b0c      	ldr	r3, [pc, #48]	; (800683c <vPortEnterCritical+0x58>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2b01      	cmp	r3, #1
 800680e:	d10f      	bne.n	8006830 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006810:	4b0b      	ldr	r3, [pc, #44]	; (8006840 <vPortEnterCritical+0x5c>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	b2db      	uxtb	r3, r3
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00a      	beq.n	8006830 <vPortEnterCritical+0x4c>
	__asm volatile
 800681a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681e:	f383 8811 	msr	BASEPRI, r3
 8006822:	f3bf 8f6f 	isb	sy
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	603b      	str	r3, [r7, #0]
}
 800682c:	bf00      	nop
 800682e:	e7fe      	b.n	800682e <vPortEnterCritical+0x4a>
	}
}
 8006830:	bf00      	nop
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr
 800683c:	20000010 	.word	0x20000010
 8006840:	e000ed04 	.word	0xe000ed04

08006844 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800684a:	4b12      	ldr	r3, [pc, #72]	; (8006894 <vPortExitCritical+0x50>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d10a      	bne.n	8006868 <vPortExitCritical+0x24>
	__asm volatile
 8006852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006856:	f383 8811 	msr	BASEPRI, r3
 800685a:	f3bf 8f6f 	isb	sy
 800685e:	f3bf 8f4f 	dsb	sy
 8006862:	607b      	str	r3, [r7, #4]
}
 8006864:	bf00      	nop
 8006866:	e7fe      	b.n	8006866 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006868:	4b0a      	ldr	r3, [pc, #40]	; (8006894 <vPortExitCritical+0x50>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	3b01      	subs	r3, #1
 800686e:	4a09      	ldr	r2, [pc, #36]	; (8006894 <vPortExitCritical+0x50>)
 8006870:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006872:	4b08      	ldr	r3, [pc, #32]	; (8006894 <vPortExitCritical+0x50>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d105      	bne.n	8006886 <vPortExitCritical+0x42>
 800687a:	2300      	movs	r3, #0
 800687c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	f383 8811 	msr	BASEPRI, r3
}
 8006884:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006886:	bf00      	nop
 8006888:	370c      	adds	r7, #12
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	20000010 	.word	0x20000010
	...

080068a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80068a0:	f3ef 8009 	mrs	r0, PSP
 80068a4:	f3bf 8f6f 	isb	sy
 80068a8:	4b15      	ldr	r3, [pc, #84]	; (8006900 <pxCurrentTCBConst>)
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	f01e 0f10 	tst.w	lr, #16
 80068b0:	bf08      	it	eq
 80068b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80068b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ba:	6010      	str	r0, [r2, #0]
 80068bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80068c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80068c4:	f380 8811 	msr	BASEPRI, r0
 80068c8:	f3bf 8f4f 	dsb	sy
 80068cc:	f3bf 8f6f 	isb	sy
 80068d0:	f7fe fec2 	bl	8005658 <vTaskSwitchContext>
 80068d4:	f04f 0000 	mov.w	r0, #0
 80068d8:	f380 8811 	msr	BASEPRI, r0
 80068dc:	bc09      	pop	{r0, r3}
 80068de:	6819      	ldr	r1, [r3, #0]
 80068e0:	6808      	ldr	r0, [r1, #0]
 80068e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068e6:	f01e 0f10 	tst.w	lr, #16
 80068ea:	bf08      	it	eq
 80068ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80068f0:	f380 8809 	msr	PSP, r0
 80068f4:	f3bf 8f6f 	isb	sy
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	f3af 8000 	nop.w

08006900 <pxCurrentTCBConst>:
 8006900:	20000830 	.word	0x20000830
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006904:	bf00      	nop
 8006906:	bf00      	nop

08006908 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
	__asm volatile
 800690e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006912:	f383 8811 	msr	BASEPRI, r3
 8006916:	f3bf 8f6f 	isb	sy
 800691a:	f3bf 8f4f 	dsb	sy
 800691e:	607b      	str	r3, [r7, #4]
}
 8006920:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006922:	f7fe fddf 	bl	80054e4 <xTaskIncrementTick>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d003      	beq.n	8006934 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800692c:	4b06      	ldr	r3, [pc, #24]	; (8006948 <xPortSysTickHandler+0x40>)
 800692e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006932:	601a      	str	r2, [r3, #0]
 8006934:	2300      	movs	r3, #0
 8006936:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	f383 8811 	msr	BASEPRI, r3
}
 800693e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006940:	bf00      	nop
 8006942:	3708      	adds	r7, #8
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	e000ed04 	.word	0xe000ed04

0800694c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800694c:	b480      	push	{r7}
 800694e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006950:	4b0b      	ldr	r3, [pc, #44]	; (8006980 <vPortSetupTimerInterrupt+0x34>)
 8006952:	2200      	movs	r2, #0
 8006954:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006956:	4b0b      	ldr	r3, [pc, #44]	; (8006984 <vPortSetupTimerInterrupt+0x38>)
 8006958:	2200      	movs	r2, #0
 800695a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800695c:	4b0a      	ldr	r3, [pc, #40]	; (8006988 <vPortSetupTimerInterrupt+0x3c>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a0a      	ldr	r2, [pc, #40]	; (800698c <vPortSetupTimerInterrupt+0x40>)
 8006962:	fba2 2303 	umull	r2, r3, r2, r3
 8006966:	099b      	lsrs	r3, r3, #6
 8006968:	4a09      	ldr	r2, [pc, #36]	; (8006990 <vPortSetupTimerInterrupt+0x44>)
 800696a:	3b01      	subs	r3, #1
 800696c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800696e:	4b04      	ldr	r3, [pc, #16]	; (8006980 <vPortSetupTimerInterrupt+0x34>)
 8006970:	2207      	movs	r2, #7
 8006972:	601a      	str	r2, [r3, #0]
}
 8006974:	bf00      	nop
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	e000e010 	.word	0xe000e010
 8006984:	e000e018 	.word	0xe000e018
 8006988:	20000000 	.word	0x20000000
 800698c:	10624dd3 	.word	0x10624dd3
 8006990:	e000e014 	.word	0xe000e014

08006994 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006994:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80069a4 <vPortEnableVFP+0x10>
 8006998:	6801      	ldr	r1, [r0, #0]
 800699a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800699e:	6001      	str	r1, [r0, #0]
 80069a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80069a2:	bf00      	nop
 80069a4:	e000ed88 	.word	0xe000ed88

080069a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80069a8:	b480      	push	{r7}
 80069aa:	b085      	sub	sp, #20
 80069ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80069ae:	f3ef 8305 	mrs	r3, IPSR
 80069b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2b0f      	cmp	r3, #15
 80069b8:	d914      	bls.n	80069e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80069ba:	4a17      	ldr	r2, [pc, #92]	; (8006a18 <vPortValidateInterruptPriority+0x70>)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	4413      	add	r3, r2
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80069c4:	4b15      	ldr	r3, [pc, #84]	; (8006a1c <vPortValidateInterruptPriority+0x74>)
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	7afa      	ldrb	r2, [r7, #11]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d20a      	bcs.n	80069e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80069ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d2:	f383 8811 	msr	BASEPRI, r3
 80069d6:	f3bf 8f6f 	isb	sy
 80069da:	f3bf 8f4f 	dsb	sy
 80069de:	607b      	str	r3, [r7, #4]
}
 80069e0:	bf00      	nop
 80069e2:	e7fe      	b.n	80069e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80069e4:	4b0e      	ldr	r3, [pc, #56]	; (8006a20 <vPortValidateInterruptPriority+0x78>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80069ec:	4b0d      	ldr	r3, [pc, #52]	; (8006a24 <vPortValidateInterruptPriority+0x7c>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d90a      	bls.n	8006a0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80069f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f8:	f383 8811 	msr	BASEPRI, r3
 80069fc:	f3bf 8f6f 	isb	sy
 8006a00:	f3bf 8f4f 	dsb	sy
 8006a04:	603b      	str	r3, [r7, #0]
}
 8006a06:	bf00      	nop
 8006a08:	e7fe      	b.n	8006a08 <vPortValidateInterruptPriority+0x60>
	}
 8006a0a:	bf00      	nop
 8006a0c:	3714      	adds	r7, #20
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr
 8006a16:	bf00      	nop
 8006a18:	e000e3f0 	.word	0xe000e3f0
 8006a1c:	20000e5c 	.word	0x20000e5c
 8006a20:	e000ed0c 	.word	0xe000ed0c
 8006a24:	20000e60 	.word	0x20000e60

08006a28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b08a      	sub	sp, #40	; 0x28
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006a30:	2300      	movs	r3, #0
 8006a32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006a34:	f7fe fc9a 	bl	800536c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006a38:	4b5b      	ldr	r3, [pc, #364]	; (8006ba8 <pvPortMalloc+0x180>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d101      	bne.n	8006a44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006a40:	f000 f920 	bl	8006c84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006a44:	4b59      	ldr	r3, [pc, #356]	; (8006bac <pvPortMalloc+0x184>)
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f040 8093 	bne.w	8006b78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d01d      	beq.n	8006a94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006a58:	2208      	movs	r2, #8
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f003 0307 	and.w	r3, r3, #7
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d014      	beq.n	8006a94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f023 0307 	bic.w	r3, r3, #7
 8006a70:	3308      	adds	r3, #8
 8006a72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f003 0307 	and.w	r3, r3, #7
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00a      	beq.n	8006a94 <pvPortMalloc+0x6c>
	__asm volatile
 8006a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a82:	f383 8811 	msr	BASEPRI, r3
 8006a86:	f3bf 8f6f 	isb	sy
 8006a8a:	f3bf 8f4f 	dsb	sy
 8006a8e:	617b      	str	r3, [r7, #20]
}
 8006a90:	bf00      	nop
 8006a92:	e7fe      	b.n	8006a92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d06e      	beq.n	8006b78 <pvPortMalloc+0x150>
 8006a9a:	4b45      	ldr	r3, [pc, #276]	; (8006bb0 <pvPortMalloc+0x188>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d869      	bhi.n	8006b78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006aa4:	4b43      	ldr	r3, [pc, #268]	; (8006bb4 <pvPortMalloc+0x18c>)
 8006aa6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006aa8:	4b42      	ldr	r3, [pc, #264]	; (8006bb4 <pvPortMalloc+0x18c>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006aae:	e004      	b.n	8006aba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d903      	bls.n	8006acc <pvPortMalloc+0xa4>
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d1f1      	bne.n	8006ab0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006acc:	4b36      	ldr	r3, [pc, #216]	; (8006ba8 <pvPortMalloc+0x180>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d050      	beq.n	8006b78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006ad6:	6a3b      	ldr	r3, [r7, #32]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2208      	movs	r2, #8
 8006adc:	4413      	add	r3, r2
 8006ade:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	6a3b      	ldr	r3, [r7, #32]
 8006ae6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aea:	685a      	ldr	r2, [r3, #4]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	1ad2      	subs	r2, r2, r3
 8006af0:	2308      	movs	r3, #8
 8006af2:	005b      	lsls	r3, r3, #1
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d91f      	bls.n	8006b38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4413      	add	r3, r2
 8006afe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	f003 0307 	and.w	r3, r3, #7
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00a      	beq.n	8006b20 <pvPortMalloc+0xf8>
	__asm volatile
 8006b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b0e:	f383 8811 	msr	BASEPRI, r3
 8006b12:	f3bf 8f6f 	isb	sy
 8006b16:	f3bf 8f4f 	dsb	sy
 8006b1a:	613b      	str	r3, [r7, #16]
}
 8006b1c:	bf00      	nop
 8006b1e:	e7fe      	b.n	8006b1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b22:	685a      	ldr	r2, [r3, #4]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	1ad2      	subs	r2, r2, r3
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006b32:	69b8      	ldr	r0, [r7, #24]
 8006b34:	f000 f908 	bl	8006d48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b38:	4b1d      	ldr	r3, [pc, #116]	; (8006bb0 <pvPortMalloc+0x188>)
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	4a1b      	ldr	r2, [pc, #108]	; (8006bb0 <pvPortMalloc+0x188>)
 8006b44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006b46:	4b1a      	ldr	r3, [pc, #104]	; (8006bb0 <pvPortMalloc+0x188>)
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	4b1b      	ldr	r3, [pc, #108]	; (8006bb8 <pvPortMalloc+0x190>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d203      	bcs.n	8006b5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006b52:	4b17      	ldr	r3, [pc, #92]	; (8006bb0 <pvPortMalloc+0x188>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a18      	ldr	r2, [pc, #96]	; (8006bb8 <pvPortMalloc+0x190>)
 8006b58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5c:	685a      	ldr	r2, [r3, #4]
 8006b5e:	4b13      	ldr	r3, [pc, #76]	; (8006bac <pvPortMalloc+0x184>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	431a      	orrs	r2, r3
 8006b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006b6e:	4b13      	ldr	r3, [pc, #76]	; (8006bbc <pvPortMalloc+0x194>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	3301      	adds	r3, #1
 8006b74:	4a11      	ldr	r2, [pc, #68]	; (8006bbc <pvPortMalloc+0x194>)
 8006b76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006b78:	f7fe fc06 	bl	8005388 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	f003 0307 	and.w	r3, r3, #7
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00a      	beq.n	8006b9c <pvPortMalloc+0x174>
	__asm volatile
 8006b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8a:	f383 8811 	msr	BASEPRI, r3
 8006b8e:	f3bf 8f6f 	isb	sy
 8006b92:	f3bf 8f4f 	dsb	sy
 8006b96:	60fb      	str	r3, [r7, #12]
}
 8006b98:	bf00      	nop
 8006b9a:	e7fe      	b.n	8006b9a <pvPortMalloc+0x172>
	return pvReturn;
 8006b9c:	69fb      	ldr	r3, [r7, #28]
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3728      	adds	r7, #40	; 0x28
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	20004a6c 	.word	0x20004a6c
 8006bac:	20004a80 	.word	0x20004a80
 8006bb0:	20004a70 	.word	0x20004a70
 8006bb4:	20004a64 	.word	0x20004a64
 8006bb8:	20004a74 	.word	0x20004a74
 8006bbc:	20004a78 	.word	0x20004a78

08006bc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b086      	sub	sp, #24
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d04d      	beq.n	8006c6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006bd2:	2308      	movs	r3, #8
 8006bd4:	425b      	negs	r3, r3
 8006bd6:	697a      	ldr	r2, [r7, #20]
 8006bd8:	4413      	add	r3, r2
 8006bda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	685a      	ldr	r2, [r3, #4]
 8006be4:	4b24      	ldr	r3, [pc, #144]	; (8006c78 <vPortFree+0xb8>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4013      	ands	r3, r2
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d10a      	bne.n	8006c04 <vPortFree+0x44>
	__asm volatile
 8006bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf2:	f383 8811 	msr	BASEPRI, r3
 8006bf6:	f3bf 8f6f 	isb	sy
 8006bfa:	f3bf 8f4f 	dsb	sy
 8006bfe:	60fb      	str	r3, [r7, #12]
}
 8006c00:	bf00      	nop
 8006c02:	e7fe      	b.n	8006c02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d00a      	beq.n	8006c22 <vPortFree+0x62>
	__asm volatile
 8006c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c10:	f383 8811 	msr	BASEPRI, r3
 8006c14:	f3bf 8f6f 	isb	sy
 8006c18:	f3bf 8f4f 	dsb	sy
 8006c1c:	60bb      	str	r3, [r7, #8]
}
 8006c1e:	bf00      	nop
 8006c20:	e7fe      	b.n	8006c20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	685a      	ldr	r2, [r3, #4]
 8006c26:	4b14      	ldr	r3, [pc, #80]	; (8006c78 <vPortFree+0xb8>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d01e      	beq.n	8006c6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d11a      	bne.n	8006c6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	685a      	ldr	r2, [r3, #4]
 8006c3c:	4b0e      	ldr	r3, [pc, #56]	; (8006c78 <vPortFree+0xb8>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	43db      	mvns	r3, r3
 8006c42:	401a      	ands	r2, r3
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006c48:	f7fe fb90 	bl	800536c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	685a      	ldr	r2, [r3, #4]
 8006c50:	4b0a      	ldr	r3, [pc, #40]	; (8006c7c <vPortFree+0xbc>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4413      	add	r3, r2
 8006c56:	4a09      	ldr	r2, [pc, #36]	; (8006c7c <vPortFree+0xbc>)
 8006c58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006c5a:	6938      	ldr	r0, [r7, #16]
 8006c5c:	f000 f874 	bl	8006d48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006c60:	4b07      	ldr	r3, [pc, #28]	; (8006c80 <vPortFree+0xc0>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	3301      	adds	r3, #1
 8006c66:	4a06      	ldr	r2, [pc, #24]	; (8006c80 <vPortFree+0xc0>)
 8006c68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006c6a:	f7fe fb8d 	bl	8005388 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006c6e:	bf00      	nop
 8006c70:	3718      	adds	r7, #24
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	20004a80 	.word	0x20004a80
 8006c7c:	20004a70 	.word	0x20004a70
 8006c80:	20004a7c 	.word	0x20004a7c

08006c84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006c84:	b480      	push	{r7}
 8006c86:	b085      	sub	sp, #20
 8006c88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006c8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006c8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006c90:	4b27      	ldr	r3, [pc, #156]	; (8006d30 <prvHeapInit+0xac>)
 8006c92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f003 0307 	and.w	r3, r3, #7
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00c      	beq.n	8006cb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	3307      	adds	r3, #7
 8006ca2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f023 0307 	bic.w	r3, r3, #7
 8006caa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	4a1f      	ldr	r2, [pc, #124]	; (8006d30 <prvHeapInit+0xac>)
 8006cb4:	4413      	add	r3, r2
 8006cb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006cbc:	4a1d      	ldr	r2, [pc, #116]	; (8006d34 <prvHeapInit+0xb0>)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006cc2:	4b1c      	ldr	r3, [pc, #112]	; (8006d34 <prvHeapInit+0xb0>)
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	68ba      	ldr	r2, [r7, #8]
 8006ccc:	4413      	add	r3, r2
 8006cce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006cd0:	2208      	movs	r2, #8
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	1a9b      	subs	r3, r3, r2
 8006cd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f023 0307 	bic.w	r3, r3, #7
 8006cde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	4a15      	ldr	r2, [pc, #84]	; (8006d38 <prvHeapInit+0xb4>)
 8006ce4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ce6:	4b14      	ldr	r3, [pc, #80]	; (8006d38 <prvHeapInit+0xb4>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2200      	movs	r2, #0
 8006cec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006cee:	4b12      	ldr	r3, [pc, #72]	; (8006d38 <prvHeapInit+0xb4>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	1ad2      	subs	r2, r2, r3
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d04:	4b0c      	ldr	r3, [pc, #48]	; (8006d38 <prvHeapInit+0xb4>)
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	4a0a      	ldr	r2, [pc, #40]	; (8006d3c <prvHeapInit+0xb8>)
 8006d12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	4a09      	ldr	r2, [pc, #36]	; (8006d40 <prvHeapInit+0xbc>)
 8006d1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006d1c:	4b09      	ldr	r3, [pc, #36]	; (8006d44 <prvHeapInit+0xc0>)
 8006d1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006d22:	601a      	str	r2, [r3, #0]
}
 8006d24:	bf00      	nop
 8006d26:	3714      	adds	r7, #20
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr
 8006d30:	20000e64 	.word	0x20000e64
 8006d34:	20004a64 	.word	0x20004a64
 8006d38:	20004a6c 	.word	0x20004a6c
 8006d3c:	20004a74 	.word	0x20004a74
 8006d40:	20004a70 	.word	0x20004a70
 8006d44:	20004a80 	.word	0x20004a80

08006d48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006d50:	4b28      	ldr	r3, [pc, #160]	; (8006df4 <prvInsertBlockIntoFreeList+0xac>)
 8006d52:	60fb      	str	r3, [r7, #12]
 8006d54:	e002      	b.n	8006d5c <prvInsertBlockIntoFreeList+0x14>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	60fb      	str	r3, [r7, #12]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d8f7      	bhi.n	8006d56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	68ba      	ldr	r2, [r7, #8]
 8006d70:	4413      	add	r3, r2
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d108      	bne.n	8006d8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	685a      	ldr	r2, [r3, #4]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	441a      	add	r2, r3
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	68ba      	ldr	r2, [r7, #8]
 8006d94:	441a      	add	r2, r3
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d118      	bne.n	8006dd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	4b15      	ldr	r3, [pc, #84]	; (8006df8 <prvInsertBlockIntoFreeList+0xb0>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d00d      	beq.n	8006dc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	685a      	ldr	r2, [r3, #4]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	441a      	add	r2, r3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	601a      	str	r2, [r3, #0]
 8006dc4:	e008      	b.n	8006dd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006dc6:	4b0c      	ldr	r3, [pc, #48]	; (8006df8 <prvInsertBlockIntoFreeList+0xb0>)
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	601a      	str	r2, [r3, #0]
 8006dce:	e003      	b.n	8006dd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d002      	beq.n	8006de6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006de6:	bf00      	nop
 8006de8:	3714      	adds	r7, #20
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	20004a64 	.word	0x20004a64
 8006df8:	20004a6c 	.word	0x20004a6c

08006dfc <__libc_init_array>:
 8006dfc:	b570      	push	{r4, r5, r6, lr}
 8006dfe:	4d0d      	ldr	r5, [pc, #52]	; (8006e34 <__libc_init_array+0x38>)
 8006e00:	4c0d      	ldr	r4, [pc, #52]	; (8006e38 <__libc_init_array+0x3c>)
 8006e02:	1b64      	subs	r4, r4, r5
 8006e04:	10a4      	asrs	r4, r4, #2
 8006e06:	2600      	movs	r6, #0
 8006e08:	42a6      	cmp	r6, r4
 8006e0a:	d109      	bne.n	8006e20 <__libc_init_array+0x24>
 8006e0c:	4d0b      	ldr	r5, [pc, #44]	; (8006e3c <__libc_init_array+0x40>)
 8006e0e:	4c0c      	ldr	r4, [pc, #48]	; (8006e40 <__libc_init_array+0x44>)
 8006e10:	f000 f82e 	bl	8006e70 <_init>
 8006e14:	1b64      	subs	r4, r4, r5
 8006e16:	10a4      	asrs	r4, r4, #2
 8006e18:	2600      	movs	r6, #0
 8006e1a:	42a6      	cmp	r6, r4
 8006e1c:	d105      	bne.n	8006e2a <__libc_init_array+0x2e>
 8006e1e:	bd70      	pop	{r4, r5, r6, pc}
 8006e20:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e24:	4798      	blx	r3
 8006e26:	3601      	adds	r6, #1
 8006e28:	e7ee      	b.n	8006e08 <__libc_init_array+0xc>
 8006e2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e2e:	4798      	blx	r3
 8006e30:	3601      	adds	r6, #1
 8006e32:	e7f2      	b.n	8006e1a <__libc_init_array+0x1e>
 8006e34:	08006f94 	.word	0x08006f94
 8006e38:	08006f94 	.word	0x08006f94
 8006e3c:	08006f94 	.word	0x08006f94
 8006e40:	08006f98 	.word	0x08006f98

08006e44 <memcpy>:
 8006e44:	440a      	add	r2, r1
 8006e46:	4291      	cmp	r1, r2
 8006e48:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e4c:	d100      	bne.n	8006e50 <memcpy+0xc>
 8006e4e:	4770      	bx	lr
 8006e50:	b510      	push	{r4, lr}
 8006e52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e5a:	4291      	cmp	r1, r2
 8006e5c:	d1f9      	bne.n	8006e52 <memcpy+0xe>
 8006e5e:	bd10      	pop	{r4, pc}

08006e60 <memset>:
 8006e60:	4402      	add	r2, r0
 8006e62:	4603      	mov	r3, r0
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d100      	bne.n	8006e6a <memset+0xa>
 8006e68:	4770      	bx	lr
 8006e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8006e6e:	e7f9      	b.n	8006e64 <memset+0x4>

08006e70 <_init>:
 8006e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e72:	bf00      	nop
 8006e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e76:	bc08      	pop	{r3}
 8006e78:	469e      	mov	lr, r3
 8006e7a:	4770      	bx	lr

08006e7c <_fini>:
 8006e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e7e:	bf00      	nop
 8006e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e82:	bc08      	pop	{r3}
 8006e84:	469e      	mov	lr, r3
 8006e86:	4770      	bx	lr
