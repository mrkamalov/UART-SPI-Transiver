
UART-SPI-Transiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ac8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08006c58  08006c58  00016c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d78  08006d78  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006d78  08006d78  00016d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d80  08006d80  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d80  08006d80  00016d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d84  08006d84  00016d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006d88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00004a58  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004a68  20004a68  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015f52  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031eb  00000000  00000000  00035f92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001118  00000000  00000000  00039180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ff0  00000000  00000000  0003a298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003ad9  00000000  00000000  0003b288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013b1e  00000000  00000000  0003ed61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce40a  00000000  00000000  0005287f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00120c89  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000462c  00000000  00000000  00120cdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006c40 	.word	0x08006c40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08006c40 	.word	0x08006c40

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fbd8 	bl	8000c8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f866 	bl	80005ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f94a 	bl	8000778 <MX_GPIO_Init>
  MX_IWDG_Init();
 80004e4:	f000 f8cc 	bl	8000680 <MX_IWDG_Init>
  MX_UART4_Init();
 80004e8:	f000 f91c 	bl	8000724 <MX_UART4_Init>
  MX_SPI2_Init();
 80004ec:	f000 f8e2 	bl	80006b4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  __HAL_DBGMCU_FREEZE_IWDG();
 80004f0:	4b1d      	ldr	r3, [pc, #116]	; (8000568 <main+0x94>)
 80004f2:	689b      	ldr	r3, [r3, #8]
 80004f4:	4a1c      	ldr	r2, [pc, #112]	; (8000568 <main+0x94>)
 80004f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004fa:	6093      	str	r3, [r2, #8]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004fc:	f003 fb38 	bl	8003b70 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of uartSendSem */
  uartSendSemHandle = osSemaphoreNew(1, 1, &uartSendSem_attributes);
 8000500:	4a1a      	ldr	r2, [pc, #104]	; (800056c <main+0x98>)
 8000502:	2101      	movs	r1, #1
 8000504:	2001      	movs	r0, #1
 8000506:	f003 fc0f 	bl	8003d28 <osSemaphoreNew>
 800050a:	4603      	mov	r3, r0
 800050c:	4a18      	ldr	r2, [pc, #96]	; (8000570 <main+0x9c>)
 800050e:	6013      	str	r3, [r2, #0]

  /* creation of spiSendSem */
  spiSendSemHandle = osSemaphoreNew(1, 1, &spiSendSem_attributes);
 8000510:	4a18      	ldr	r2, [pc, #96]	; (8000574 <main+0xa0>)
 8000512:	2101      	movs	r1, #1
 8000514:	2001      	movs	r0, #1
 8000516:	f003 fc07 	bl	8003d28 <osSemaphoreNew>
 800051a:	4603      	mov	r3, r0
 800051c:	4a16      	ldr	r2, [pc, #88]	; (8000578 <main+0xa4>)
 800051e:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of uartSendQueue */
  uartSendQueueHandle = osMessageQueueNew (10, sizeof(uint8_t), &uartSendQueue_attributes);
 8000520:	4a16      	ldr	r2, [pc, #88]	; (800057c <main+0xa8>)
 8000522:	2101      	movs	r1, #1
 8000524:	200a      	movs	r0, #10
 8000526:	f003 fc88 	bl	8003e3a <osMessageQueueNew>
 800052a:	4603      	mov	r3, r0
 800052c:	4a14      	ldr	r2, [pc, #80]	; (8000580 <main+0xac>)
 800052e:	6013      	str	r3, [r2, #0]

  /* creation of spiSendQueue */
  spiSendQueueHandle = osMessageQueueNew (10, sizeof(uint8_t), &spiSendQueue_attributes);
 8000530:	4a14      	ldr	r2, [pc, #80]	; (8000584 <main+0xb0>)
 8000532:	2101      	movs	r1, #1
 8000534:	200a      	movs	r0, #10
 8000536:	f003 fc80 	bl	8003e3a <osMessageQueueNew>
 800053a:	4603      	mov	r3, r0
 800053c:	4a12      	ldr	r2, [pc, #72]	; (8000588 <main+0xb4>)
 800053e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of uartTransiver */
  uartTransiverHandle = osThreadNew(uartTransiverTask, (void*) &huart4, &uartTransiver_attributes);
 8000540:	4a12      	ldr	r2, [pc, #72]	; (800058c <main+0xb8>)
 8000542:	4913      	ldr	r1, [pc, #76]	; (8000590 <main+0xbc>)
 8000544:	4813      	ldr	r0, [pc, #76]	; (8000594 <main+0xc0>)
 8000546:	f003 fb5d 	bl	8003c04 <osThreadNew>
 800054a:	4603      	mov	r3, r0
 800054c:	4a12      	ldr	r2, [pc, #72]	; (8000598 <main+0xc4>)
 800054e:	6013      	str	r3, [r2, #0]

  /* creation of spiTransiver */
  spiTransiverHandle = osThreadNew(spiTransiverTask, (void*) &hspi2, &spiTransiver_attributes);
 8000550:	4a12      	ldr	r2, [pc, #72]	; (800059c <main+0xc8>)
 8000552:	4913      	ldr	r1, [pc, #76]	; (80005a0 <main+0xcc>)
 8000554:	4813      	ldr	r0, [pc, #76]	; (80005a4 <main+0xd0>)
 8000556:	f003 fb55 	bl	8003c04 <osThreadNew>
 800055a:	4603      	mov	r3, r0
 800055c:	4a12      	ldr	r2, [pc, #72]	; (80005a8 <main+0xd4>)
 800055e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000560:	f003 fb2a 	bl	8003bb8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000564:	e7fe      	b.n	8000564 <main+0x90>
 8000566:	bf00      	nop
 8000568:	e0042000 	.word	0xe0042000
 800056c:	08006d40 	.word	0x08006d40
 8000570:	200000e4 	.word	0x200000e4
 8000574:	08006d50 	.word	0x08006d50
 8000578:	200000e8 	.word	0x200000e8
 800057c:	08006d10 	.word	0x08006d10
 8000580:	200000dc 	.word	0x200000dc
 8000584:	08006d28 	.word	0x08006d28
 8000588:	200000e0 	.word	0x200000e0
 800058c:	08006cc8 	.word	0x08006cc8
 8000590:	20000090 	.word	0x20000090
 8000594:	08000b81 	.word	0x08000b81
 8000598:	200000d4 	.word	0x200000d4
 800059c:	08006cec 	.word	0x08006cec
 80005a0:	20000038 	.word	0x20000038
 80005a4:	08000859 	.word	0x08000859
 80005a8:	200000d8 	.word	0x200000d8

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b094      	sub	sp, #80	; 0x50
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	f107 0320 	add.w	r3, r7, #32
 80005b6:	2230      	movs	r2, #48	; 0x30
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f006 fb38 	bl	8006c30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d0:	2300      	movs	r3, #0
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	4b28      	ldr	r3, [pc, #160]	; (8000678 <SystemClock_Config+0xcc>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d8:	4a27      	ldr	r2, [pc, #156]	; (8000678 <SystemClock_Config+0xcc>)
 80005da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005de:	6413      	str	r3, [r2, #64]	; 0x40
 80005e0:	4b25      	ldr	r3, [pc, #148]	; (8000678 <SystemClock_Config+0xcc>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e8:	60bb      	str	r3, [r7, #8]
 80005ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ec:	2300      	movs	r3, #0
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	4b22      	ldr	r3, [pc, #136]	; (800067c <SystemClock_Config+0xd0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a21      	ldr	r2, [pc, #132]	; (800067c <SystemClock_Config+0xd0>)
 80005f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	4b1f      	ldr	r3, [pc, #124]	; (800067c <SystemClock_Config+0xd0>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000608:	230a      	movs	r3, #10
 800060a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060c:	2301      	movs	r3, #1
 800060e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000610:	2310      	movs	r3, #16
 8000612:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000614:	2301      	movs	r3, #1
 8000616:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000618:	2302      	movs	r3, #2
 800061a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800061c:	2300      	movs	r3, #0
 800061e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000620:	2310      	movs	r3, #16
 8000622:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 128;
 8000624:	2380      	movs	r3, #128	; 0x80
 8000626:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000628:	2304      	movs	r3, #4
 800062a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800062c:	2304      	movs	r3, #4
 800062e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000630:	f107 0320 	add.w	r3, r7, #32
 8000634:	4618      	mov	r0, r3
 8000636:	f000 ff47 	bl	80014c8 <HAL_RCC_OscConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000640:	f000 f904 	bl	800084c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000644:	230f      	movs	r3, #15
 8000646:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000648:	2302      	movs	r3, #2
 800064a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2101      	movs	r1, #1
 800065e:	4618      	mov	r0, r3
 8000660:	f001 f9aa 	bl	80019b8 <HAL_RCC_ClockConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800066a:	f000 f8ef 	bl	800084c <Error_Handler>
  }
}
 800066e:	bf00      	nop
 8000670:	3750      	adds	r7, #80	; 0x50
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40023800 	.word	0x40023800
 800067c:	40007000 	.word	0x40007000

08000680 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000684:	4b09      	ldr	r3, [pc, #36]	; (80006ac <MX_IWDG_Init+0x2c>)
 8000686:	4a0a      	ldr	r2, [pc, #40]	; (80006b0 <MX_IWDG_Init+0x30>)
 8000688:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 800068a:	4b08      	ldr	r3, [pc, #32]	; (80006ac <MX_IWDG_Init+0x2c>)
 800068c:	2206      	movs	r2, #6
 800068e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <MX_IWDG_Init+0x2c>)
 8000692:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000696:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000698:	4804      	ldr	r0, [pc, #16]	; (80006ac <MX_IWDG_Init+0x2c>)
 800069a:	f000 fec2 	bl	8001422 <HAL_IWDG_Init>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80006a4:	f000 f8d2 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	2000002c 	.word	0x2000002c
 80006b0:	40003000 	.word	0x40003000

080006b4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80006b8:	4b18      	ldr	r3, [pc, #96]	; (800071c <MX_SPI2_Init+0x68>)
 80006ba:	4a19      	ldr	r2, [pc, #100]	; (8000720 <MX_SPI2_Init+0x6c>)
 80006bc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006be:	4b17      	ldr	r3, [pc, #92]	; (800071c <MX_SPI2_Init+0x68>)
 80006c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006c4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006c6:	4b15      	ldr	r3, [pc, #84]	; (800071c <MX_SPI2_Init+0x68>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80006cc:	4b13      	ldr	r3, [pc, #76]	; (800071c <MX_SPI2_Init+0x68>)
 80006ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006d2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006d4:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_SPI2_Init+0x68>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <MX_SPI2_Init+0x68>)
 80006dc:	2200      	movs	r2, #0
 80006de:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80006e0:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_SPI2_Init+0x68>)
 80006e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006e6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_SPI2_Init+0x68>)
 80006ea:	2218      	movs	r2, #24
 80006ec:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <MX_SPI2_Init+0x68>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006f4:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_SPI2_Init+0x68>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <MX_SPI2_Init+0x68>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_SPI2_Init+0x68>)
 8000702:	220a      	movs	r2, #10
 8000704:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_SPI2_Init+0x68>)
 8000708:	f001 fb36 	bl	8001d78 <HAL_SPI_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8000712:	f000 f89b 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000038 	.word	0x20000038
 8000720:	40003800 	.word	0x40003800

08000724 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_UART4_Init+0x4c>)
 800072a:	4a12      	ldr	r2, [pc, #72]	; (8000774 <MX_UART4_Init+0x50>)
 800072c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800072e:	4b10      	ldr	r3, [pc, #64]	; (8000770 <MX_UART4_Init+0x4c>)
 8000730:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000734:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_UART4_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_UART4_Init+0x4c>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_UART4_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_UART4_Init+0x4c>)
 800074a:	220c      	movs	r2, #12
 800074c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <MX_UART4_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_UART4_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_UART4_Init+0x4c>)
 800075c:	f002 fa18 	bl	8002b90 <HAL_UART_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000766:	f000 f871 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000090 	.word	0x20000090
 8000774:	40004c00 	.word	0x40004c00

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b088      	sub	sp, #32
 800077c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	f107 030c 	add.w	r3, r7, #12
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	4b2b      	ldr	r3, [pc, #172]	; (8000840 <MX_GPIO_Init+0xc8>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a2a      	ldr	r2, [pc, #168]	; (8000840 <MX_GPIO_Init+0xc8>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b28      	ldr	r3, [pc, #160]	; (8000840 <MX_GPIO_Init+0xc8>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	4b24      	ldr	r3, [pc, #144]	; (8000840 <MX_GPIO_Init+0xc8>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a23      	ldr	r2, [pc, #140]	; (8000840 <MX_GPIO_Init+0xc8>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b21      	ldr	r3, [pc, #132]	; (8000840 <MX_GPIO_Init+0xc8>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	603b      	str	r3, [r7, #0]
 80007ca:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <MX_GPIO_Init+0xc8>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a1c      	ldr	r2, [pc, #112]	; (8000840 <MX_GPIO_Init+0xc8>)
 80007d0:	f043 0308 	orr.w	r3, r3, #8
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_GPIO_Init+0xc8>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0308 	and.w	r3, r3, #8
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_EN_GPIO_Port, SPI2_EN_Pin, GPIO_PIN_SET);
 80007e2:	2201      	movs	r2, #1
 80007e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007e8:	4816      	ldr	r0, [pc, #88]	; (8000844 <MX_GPIO_Init+0xcc>)
 80007ea:	f000 fe01 	bl	80013f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80007f4:	4814      	ldr	r0, [pc, #80]	; (8000848 <MX_GPIO_Init+0xd0>)
 80007f6:	f000 fdfb 	bl	80013f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI2_EN_Pin */
  GPIO_InitStruct.Pin = SPI2_EN_Pin;
 80007fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000800:	2301      	movs	r3, #1
 8000802:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000808:	2300      	movs	r3, #0
 800080a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI2_EN_GPIO_Port, &GPIO_InitStruct);
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	4619      	mov	r1, r3
 8000812:	480c      	ldr	r0, [pc, #48]	; (8000844 <MX_GPIO_Init+0xcc>)
 8000814:	f000 fc50 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000818:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800081c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081e:	2301      	movs	r3, #1
 8000820:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800082a:	f107 030c 	add.w	r3, r7, #12
 800082e:	4619      	mov	r1, r3
 8000830:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_GPIO_Init+0xd0>)
 8000832:	f000 fc41 	bl	80010b8 <HAL_GPIO_Init>

}
 8000836:	bf00      	nop
 8000838:	3720      	adds	r7, #32
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800
 8000844:	40020400 	.word	0x40020400
 8000848:	40020c00 	.word	0x40020c00

0800084c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000850:	b672      	cpsid	i
}
 8000852:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000854:	e7fe      	b.n	8000854 <Error_Handler+0x8>
	...

08000858 <spiTransiverTask>:
extern osMessageQueueId_t uartSendQueueHandle;
extern IWDG_HandleTypeDef hiwdg;


void spiTransiverTask(void *argument)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  uint8_t uartMsg[10];
  pSPI = (SPI_HandleTypeDef*)argument;
 8000860:	4a16      	ldr	r2, [pc, #88]	; (80008bc <spiTransiverTask+0x64>)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	6013      	str	r3, [r2, #0]

  HAL_GPIO_WritePin(SPI2_EN_GPIO_Port, SPI2_EN_Pin, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800086c:	4814      	ldr	r0, [pc, #80]	; (80008c0 <spiTransiverTask+0x68>)
 800086e:	f000 fdbf 	bl	80013f0 <HAL_GPIO_WritePin>
  memset(spiBuffer, stringEndSymbol, BUFFER_SIZE);
 8000872:	2300      	movs	r3, #0
 8000874:	220a      	movs	r2, #10
 8000876:	4619      	mov	r1, r3
 8000878:	4812      	ldr	r0, [pc, #72]	; (80008c4 <spiTransiverTask+0x6c>)
 800087a:	f006 f9d9 	bl	8006c30 <memset>
  HAL_SPI_Receive_IT(pSPI, (uint8_t*)spiBuffer, 1);//(pSPI, spiBuffer, receiveBuffer, 1);
 800087e:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <spiTransiverTask+0x64>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2201      	movs	r2, #1
 8000884:	490f      	ldr	r1, [pc, #60]	; (80008c4 <spiTransiverTask+0x6c>)
 8000886:	4618      	mov	r0, r3
 8000888:	f001 fb8a 	bl	8001fa0 <HAL_SPI_Receive_IT>
  for(;;)
  {
	HAL_IWDG_Refresh(&hiwdg);
 800088c:	480e      	ldr	r0, [pc, #56]	; (80008c8 <spiTransiverTask+0x70>)
 800088e:	f000 fe0a 	bl	80014a6 <HAL_IWDG_Refresh>
  	if(osMessageQueueGet (spiSendQueueHandle, &uartMsg, 0, SPI_TIMEOUT) != osOK)
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <spiTransiverTask+0x74>)
 8000894:	6818      	ldr	r0, [r3, #0]
 8000896:	f107 010c 	add.w	r1, r7, #12
 800089a:	f246 13a8 	movw	r3, #25000	; 0x61a8
 800089e:	2200      	movs	r2, #0
 80008a0:	f003 fb9e 	bl	8003fe0 <osMessageQueueGet>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d0f0      	beq.n	800088c <spiTransiverTask+0x34>
      HAL_SPI_Transmit_IT(pSPI, uartMsg, 1);
 80008aa:	4b04      	ldr	r3, [pc, #16]	; (80008bc <spiTransiverTask+0x64>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f107 010c 	add.w	r1, r7, #12
 80008b2:	2201      	movs	r2, #1
 80008b4:	4618      	mov	r0, r3
 80008b6:	f001 fae9 	bl	8001e8c <HAL_SPI_Transmit_IT>
	HAL_IWDG_Refresh(&hiwdg);
 80008ba:	e7e7      	b.n	800088c <spiTransiverTask+0x34>
 80008bc:	200000ec 	.word	0x200000ec
 80008c0:	40020400 	.word	0x40020400
 80008c4:	200000f0 	.word	0x200000f0
 80008c8:	2000002c 	.word	0x2000002c
 80008cc:	200000e0 	.word	0x200000e0

080008d0 <HAL_SPI_RxCpltCallback>:
  }
}

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  if(hspi != pSPI) return;
 80008d8:	4b1b      	ldr	r3, [pc, #108]	; (8000948 <HAL_SPI_RxCpltCallback+0x78>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	429a      	cmp	r2, r3
 80008e0:	d12d      	bne.n	800093e <HAL_SPI_RxCpltCallback+0x6e>
  if(pSPI->Instance->SR&SPI_FLAG_RXNE){
 80008e2:	4b19      	ldr	r3, [pc, #100]	; (8000948 <HAL_SPI_RxCpltCallback+0x78>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	689b      	ldr	r3, [r3, #8]
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d017      	beq.n	8000922 <HAL_SPI_RxCpltCallback+0x52>
    if(spiBuffer[0]==stringEndSymbol) osMessageQueuePut(uartSendQueueHandle,stringEndSymbol,0,1000);
 80008f2:	4b16      	ldr	r3, [pc, #88]	; (800094c <HAL_SPI_RxCpltCallback+0x7c>)
 80008f4:	881a      	ldrh	r2, [r3, #0]
 80008f6:	2300      	movs	r3, #0
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	429a      	cmp	r2, r3
 80008fc:	d109      	bne.n	8000912 <HAL_SPI_RxCpltCallback+0x42>
 80008fe:	4b14      	ldr	r3, [pc, #80]	; (8000950 <HAL_SPI_RxCpltCallback+0x80>)
 8000900:	6818      	ldr	r0, [r3, #0]
 8000902:	2300      	movs	r3, #0
 8000904:	4619      	mov	r1, r3
 8000906:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800090a:	2200      	movs	r2, #0
 800090c:	f003 fb08 	bl	8003f20 <osMessageQueuePut>
 8000910:	e007      	b.n	8000922 <HAL_SPI_RxCpltCallback+0x52>
    else osMessageQueuePut(uartSendQueueHandle,spiBuffer,0,1000);
 8000912:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <HAL_SPI_RxCpltCallback+0x80>)
 8000914:	6818      	ldr	r0, [r3, #0]
 8000916:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800091a:	2200      	movs	r2, #0
 800091c:	490b      	ldr	r1, [pc, #44]	; (800094c <HAL_SPI_RxCpltCallback+0x7c>)
 800091e:	f003 faff 	bl	8003f20 <osMessageQueuePut>
  }
  memset(spiBuffer, stringEndSymbol, 1);
 8000922:	2300      	movs	r3, #0
 8000924:	2201      	movs	r2, #1
 8000926:	4619      	mov	r1, r3
 8000928:	4808      	ldr	r0, [pc, #32]	; (800094c <HAL_SPI_RxCpltCallback+0x7c>)
 800092a:	f006 f981 	bl	8006c30 <memset>
  HAL_SPI_Receive_IT(pSPI, (uint8_t*)spiBuffer, 1);
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <HAL_SPI_RxCpltCallback+0x78>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	2201      	movs	r2, #1
 8000934:	4905      	ldr	r1, [pc, #20]	; (800094c <HAL_SPI_RxCpltCallback+0x7c>)
 8000936:	4618      	mov	r0, r3
 8000938:	f001 fb32 	bl	8001fa0 <HAL_SPI_Receive_IT>
 800093c:	e000      	b.n	8000940 <HAL_SPI_RxCpltCallback+0x70>
  if(hspi != pSPI) return;
 800093e:	bf00      	nop
}
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	200000ec 	.word	0x200000ec
 800094c:	200000f0 	.word	0x200000f0
 8000950:	200000dc 	.word	0x200000dc

08000954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <HAL_MspInit+0x54>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000962:	4a11      	ldr	r2, [pc, #68]	; (80009a8 <HAL_MspInit+0x54>)
 8000964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000968:	6453      	str	r3, [r2, #68]	; 0x44
 800096a:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <HAL_MspInit+0x54>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	603b      	str	r3, [r7, #0]
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <HAL_MspInit+0x54>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	4a0a      	ldr	r2, [pc, #40]	; (80009a8 <HAL_MspInit+0x54>)
 8000980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000984:	6413      	str	r3, [r2, #64]	; 0x40
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <HAL_MspInit+0x54>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	210f      	movs	r1, #15
 8000996:	f06f 0001 	mvn.w	r0, #1
 800099a:	f000 fac4 	bl	8000f26 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800

080009ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	; 0x28
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a1d      	ldr	r2, [pc, #116]	; (8000a40 <HAL_SPI_MspInit+0x94>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d134      	bne.n	8000a38 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	4b1c      	ldr	r3, [pc, #112]	; (8000a44 <HAL_SPI_MspInit+0x98>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	4a1b      	ldr	r2, [pc, #108]	; (8000a44 <HAL_SPI_MspInit+0x98>)
 80009d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009dc:	6413      	str	r3, [r2, #64]	; 0x40
 80009de:	4b19      	ldr	r3, [pc, #100]	; (8000a44 <HAL_SPI_MspInit+0x98>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <HAL_SPI_MspInit+0x98>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a14      	ldr	r2, [pc, #80]	; (8000a44 <HAL_SPI_MspInit+0x98>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <HAL_SPI_MspInit+0x98>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000a06:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a14:	2303      	movs	r3, #3
 8000a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a18:	2305      	movs	r3, #5
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4619      	mov	r1, r3
 8000a22:	4809      	ldr	r0, [pc, #36]	; (8000a48 <HAL_SPI_MspInit+0x9c>)
 8000a24:	f000 fb48 	bl	80010b8 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2105      	movs	r1, #5
 8000a2c:	2024      	movs	r0, #36	; 0x24
 8000a2e:	f000 fa7a 	bl	8000f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000a32:	2024      	movs	r0, #36	; 0x24
 8000a34:	f000 fa93 	bl	8000f5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000a38:	bf00      	nop
 8000a3a:	3728      	adds	r7, #40	; 0x28
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40003800 	.word	0x40003800
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40020400 	.word	0x40020400

08000a4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	; 0x28
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a1d      	ldr	r2, [pc, #116]	; (8000ae0 <HAL_UART_MspInit+0x94>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d133      	bne.n	8000ad6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	613b      	str	r3, [r7, #16]
 8000a72:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <HAL_UART_MspInit+0x98>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	4a1b      	ldr	r2, [pc, #108]	; (8000ae4 <HAL_UART_MspInit+0x98>)
 8000a78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7e:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <HAL_UART_MspInit+0x98>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <HAL_UART_MspInit+0x98>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a14      	ldr	r2, [pc, #80]	; (8000ae4 <HAL_UART_MspInit+0x98>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <HAL_UART_MspInit+0x98>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ab6:	2308      	movs	r3, #8
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4809      	ldr	r0, [pc, #36]	; (8000ae8 <HAL_UART_MspInit+0x9c>)
 8000ac2:	f000 faf9 	bl	80010b8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2105      	movs	r1, #5
 8000aca:	2034      	movs	r0, #52	; 0x34
 8000acc:	f000 fa2b 	bl	8000f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000ad0:	2034      	movs	r0, #52	; 0x34
 8000ad2:	f000 fa44 	bl	8000f5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000ad6:	bf00      	nop
 8000ad8:	3728      	adds	r7, #40	; 0x28
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40004c00 	.word	0x40004c00
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020000 	.word	0x40020000

08000aec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <NMI_Handler+0x4>

08000af2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af6:	e7fe      	b.n	8000af6 <HardFault_Handler+0x4>

08000af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <MemManage_Handler+0x4>

08000afe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <BusFault_Handler+0x4>

08000b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <UsageFault_Handler+0x4>

08000b0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b1c:	f000 f908 	bl	8000d30 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b20:	f004 ffec 	bl	8005afc <xTaskGetSchedulerState>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d001      	beq.n	8000b2e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b2a:	f005 fdd5 	bl	80066d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000b38:	4802      	ldr	r0, [pc, #8]	; (8000b44 <SPI2_IRQHandler+0x10>)
 8000b3a:	f001 fb63 	bl	8002204 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000038 	.word	0x20000038

08000b48 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000b4c:	4802      	ldr	r0, [pc, #8]	; (8000b58 <UART4_IRQHandler+0x10>)
 8000b4e:	f002 f8e1 	bl	8002d14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000090 	.word	0x20000090

08000b5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <SystemInit+0x20>)
 8000b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b66:	4a05      	ldr	r2, [pc, #20]	; (8000b7c <SystemInit+0x20>)
 8000b68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <uartTransiverTask>:
static uint8_t uartBuffer[BUFFER_SIZE];
extern osMessageQueueId_t spiSendQueueHandle;
extern osMessageQueueId_t uartSendQueueHandle;

void uartTransiverTask(void *argument)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint8_t spiMsg[10];
  pUART = (UART_HandleTypeDef *)argument;
 8000b88:	4a0f      	ldr	r2, [pc, #60]	; (8000bc8 <uartTransiverTask+0x48>)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6013      	str	r3, [r2, #0]

  HAL_UART_Receive_IT(pUART, uartBuffer, 1);
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <uartTransiverTask+0x48>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2201      	movs	r2, #1
 8000b94:	490d      	ldr	r1, [pc, #52]	; (8000bcc <uartTransiverTask+0x4c>)
 8000b96:	4618      	mov	r0, r3
 8000b98:	f002 f88c 	bl	8002cb4 <HAL_UART_Receive_IT>
  for(;;)
  {
	if(osMessageQueueGet (uartSendQueueHandle, &spiMsg, 0, osWaitForever) == osOK)
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <uartTransiverTask+0x50>)
 8000b9e:	6818      	ldr	r0, [r3, #0]
 8000ba0:	f107 010c 	add.w	r1, r7, #12
 8000ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f003 fa19 	bl	8003fe0 <osMessageQueueGet>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d1f3      	bne.n	8000b9c <uartTransiverTask+0x1c>
	  HAL_UART_Transmit_IT(pUART, spiMsg, 1);
 8000bb4:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <uartTransiverTask+0x48>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f107 010c 	add.w	r1, r7, #12
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f002 f833 	bl	8002c2a <HAL_UART_Transmit_IT>
	if(osMessageQueueGet (uartSendQueueHandle, &spiMsg, 0, osWaitForever) == osOK)
 8000bc4:	e7ea      	b.n	8000b9c <uartTransiverTask+0x1c>
 8000bc6:	bf00      	nop
 8000bc8:	20000104 	.word	0x20000104
 8000bcc:	20000108 	.word	0x20000108
 8000bd0:	200000dc 	.word	0x200000dc

08000bd4 <HAL_UART_RxCpltCallback>:
  }
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  if(huart == pUART){
 8000bdc:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <HAL_UART_RxCpltCallback+0x58>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	687a      	ldr	r2, [r7, #4]
 8000be2:	429a      	cmp	r2, r3
 8000be4:	d11d      	bne.n	8000c22 <HAL_UART_RxCpltCallback+0x4e>
    if(uartBuffer[0]==stringEndSymbol) osMessageQueuePut(spiSendQueueHandle,stringEndSymbol,0,1000);
 8000be6:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <HAL_UART_RxCpltCallback+0x5c>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2200      	movs	r2, #0
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d109      	bne.n	8000c04 <HAL_UART_RxCpltCallback+0x30>
 8000bf0:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <HAL_UART_RxCpltCallback+0x60>)
 8000bf2:	6818      	ldr	r0, [r3, #0]
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f003 f98f 	bl	8003f20 <osMessageQueuePut>
 8000c02:	e007      	b.n	8000c14 <HAL_UART_RxCpltCallback+0x40>
    else osMessageQueuePut(spiSendQueueHandle,uartBuffer,0,1000);
 8000c04:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <HAL_UART_RxCpltCallback+0x60>)
 8000c06:	6818      	ldr	r0, [r3, #0]
 8000c08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	4908      	ldr	r1, [pc, #32]	; (8000c30 <HAL_UART_RxCpltCallback+0x5c>)
 8000c10:	f003 f986 	bl	8003f20 <osMessageQueuePut>
    HAL_UART_Receive_IT(pUART, uartBuffer, 1);
 8000c14:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <HAL_UART_RxCpltCallback+0x58>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2201      	movs	r2, #1
 8000c1a:	4905      	ldr	r1, [pc, #20]	; (8000c30 <HAL_UART_RxCpltCallback+0x5c>)
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f002 f849 	bl	8002cb4 <HAL_UART_Receive_IT>
  }
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000104 	.word	0x20000104
 8000c30:	20000108 	.word	0x20000108
 8000c34:	200000e0 	.word	0x200000e0

08000c38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c3c:	480d      	ldr	r0, [pc, #52]	; (8000c74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c3e:	490e      	ldr	r1, [pc, #56]	; (8000c78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c40:	4a0e      	ldr	r2, [pc, #56]	; (8000c7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c44:	e002      	b.n	8000c4c <LoopCopyDataInit>

08000c46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c4a:	3304      	adds	r3, #4

08000c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c50:	d3f9      	bcc.n	8000c46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c52:	4a0b      	ldr	r2, [pc, #44]	; (8000c80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c54:	4c0b      	ldr	r4, [pc, #44]	; (8000c84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c58:	e001      	b.n	8000c5e <LoopFillZerobss>

08000c5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c5c:	3204      	adds	r2, #4

08000c5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c60:	d3fb      	bcc.n	8000c5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c62:	f7ff ff7b 	bl	8000b5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c66:	f005 ffb1 	bl	8006bcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c6a:	f7ff fc33 	bl	80004d4 <main>
  bx  lr    
 8000c6e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c78:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c7c:	08006d88 	.word	0x08006d88
  ldr r2, =_sbss
 8000c80:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c84:	20004a68 	.word	0x20004a68

08000c88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c88:	e7fe      	b.n	8000c88 <ADC_IRQHandler>
	...

08000c8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c90:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <HAL_Init+0x40>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0d      	ldr	r2, [pc, #52]	; (8000ccc <HAL_Init+0x40>)
 8000c96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <HAL_Init+0x40>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a0a      	ldr	r2, [pc, #40]	; (8000ccc <HAL_Init+0x40>)
 8000ca2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ca6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca8:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <HAL_Init+0x40>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a07      	ldr	r2, [pc, #28]	; (8000ccc <HAL_Init+0x40>)
 8000cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb4:	2003      	movs	r0, #3
 8000cb6:	f000 f92b 	bl	8000f10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cba:	200f      	movs	r0, #15
 8000cbc:	f000 f808 	bl	8000cd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc0:	f7ff fe48 	bl	8000954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40023c00 	.word	0x40023c00

08000cd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <HAL_InitTick+0x54>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <HAL_InitTick+0x58>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 f943 	bl	8000f7a <HAL_SYSTICK_Config>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e00e      	b.n	8000d1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2b0f      	cmp	r3, #15
 8000d02:	d80a      	bhi.n	8000d1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d04:	2200      	movs	r2, #0
 8000d06:	6879      	ldr	r1, [r7, #4]
 8000d08:	f04f 30ff 	mov.w	r0, #4294967295
 8000d0c:	f000 f90b 	bl	8000f26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d10:	4a06      	ldr	r2, [pc, #24]	; (8000d2c <HAL_InitTick+0x5c>)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d16:	2300      	movs	r3, #0
 8000d18:	e000      	b.n	8000d1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000000 	.word	0x20000000
 8000d28:	20000008 	.word	0x20000008
 8000d2c:	20000004 	.word	0x20000004

08000d30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_IncTick+0x20>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_IncTick+0x24>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4413      	add	r3, r2
 8000d40:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <HAL_IncTick+0x24>)
 8000d42:	6013      	str	r3, [r2, #0]
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	20000008 	.word	0x20000008
 8000d54:	20000114 	.word	0x20000114

08000d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d5c:	4b03      	ldr	r3, [pc, #12]	; (8000d6c <HAL_GetTick+0x14>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20000114 	.word	0x20000114

08000d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da2:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	60d3      	str	r3, [r2, #12]
}
 8000da8:	bf00      	nop
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dbc:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	f003 0307 	and.w	r3, r3, #7
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	db0b      	blt.n	8000dfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	f003 021f 	and.w	r2, r3, #31
 8000dec:	4907      	ldr	r1, [pc, #28]	; (8000e0c <__NVIC_EnableIRQ+0x38>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	095b      	lsrs	r3, r3, #5
 8000df4:	2001      	movs	r0, #1
 8000df6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000e100 	.word	0xe000e100

08000e10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	6039      	str	r1, [r7, #0]
 8000e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	db0a      	blt.n	8000e3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	490c      	ldr	r1, [pc, #48]	; (8000e5c <__NVIC_SetPriority+0x4c>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	0112      	lsls	r2, r2, #4
 8000e30:	b2d2      	uxtb	r2, r2
 8000e32:	440b      	add	r3, r1
 8000e34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e38:	e00a      	b.n	8000e50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4908      	ldr	r1, [pc, #32]	; (8000e60 <__NVIC_SetPriority+0x50>)
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	f003 030f 	and.w	r3, r3, #15
 8000e46:	3b04      	subs	r3, #4
 8000e48:	0112      	lsls	r2, r2, #4
 8000e4a:	b2d2      	uxtb	r2, r2
 8000e4c:	440b      	add	r3, r1
 8000e4e:	761a      	strb	r2, [r3, #24]
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000e100 	.word	0xe000e100
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	; 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f1c3 0307 	rsb	r3, r3, #7
 8000e7e:	2b04      	cmp	r3, #4
 8000e80:	bf28      	it	cs
 8000e82:	2304      	movcs	r3, #4
 8000e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	2b06      	cmp	r3, #6
 8000e8c:	d902      	bls.n	8000e94 <NVIC_EncodePriority+0x30>
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3b03      	subs	r3, #3
 8000e92:	e000      	b.n	8000e96 <NVIC_EncodePriority+0x32>
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	f04f 32ff 	mov.w	r2, #4294967295
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43da      	mvns	r2, r3
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eac:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb6:	43d9      	mvns	r1, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	4313      	orrs	r3, r2
         );
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3724      	adds	r7, #36	; 0x24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
	...

08000ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000edc:	d301      	bcc.n	8000ee2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e00f      	b.n	8000f02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <SysTick_Config+0x40>)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eea:	210f      	movs	r1, #15
 8000eec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef0:	f7ff ff8e 	bl	8000e10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <SysTick_Config+0x40>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efa:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <SysTick_Config+0x40>)
 8000efc:	2207      	movs	r2, #7
 8000efe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	e000e010 	.word	0xe000e010

08000f10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff ff29 	bl	8000d70 <__NVIC_SetPriorityGrouping>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b086      	sub	sp, #24
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
 8000f32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f38:	f7ff ff3e 	bl	8000db8 <__NVIC_GetPriorityGrouping>
 8000f3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	68b9      	ldr	r1, [r7, #8]
 8000f42:	6978      	ldr	r0, [r7, #20]
 8000f44:	f7ff ff8e 	bl	8000e64 <NVIC_EncodePriority>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff5d 	bl	8000e10 <__NVIC_SetPriority>
}
 8000f56:	bf00      	nop
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	4603      	mov	r3, r0
 8000f66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ff31 	bl	8000dd4 <__NVIC_EnableIRQ>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff ffa2 	bl	8000ecc <SysTick_Config>
 8000f88:	4603      	mov	r3, r0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b084      	sub	sp, #16
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f9e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000fa0:	f7ff feda 	bl	8000d58 <HAL_GetTick>
 8000fa4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d008      	beq.n	8000fc4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2280      	movs	r2, #128	; 0x80
 8000fb6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e052      	b.n	800106a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f022 0216 	bic.w	r2, r2, #22
 8000fd2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	695a      	ldr	r2, [r3, #20]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fe2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d103      	bne.n	8000ff4 <HAL_DMA_Abort+0x62>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d007      	beq.n	8001004 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f022 0208 	bic.w	r2, r2, #8
 8001002:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f022 0201 	bic.w	r2, r2, #1
 8001012:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001014:	e013      	b.n	800103e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001016:	f7ff fe9f 	bl	8000d58 <HAL_GetTick>
 800101a:	4602      	mov	r2, r0
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	2b05      	cmp	r3, #5
 8001022:	d90c      	bls.n	800103e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2220      	movs	r2, #32
 8001028:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2203      	movs	r2, #3
 800102e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e015      	b.n	800106a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1e4      	bne.n	8001016 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001050:	223f      	movs	r2, #63	; 0x3f
 8001052:	409a      	lsls	r2, r3
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2201      	movs	r2, #1
 800105c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b02      	cmp	r3, #2
 8001084:	d004      	beq.n	8001090 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2280      	movs	r2, #128	; 0x80
 800108a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e00c      	b.n	80010aa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2205      	movs	r2, #5
 8001094:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f022 0201 	bic.w	r2, r2, #1
 80010a6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
	...

080010b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b089      	sub	sp, #36	; 0x24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
 80010d2:	e16b      	b.n	80013ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010d4:	2201      	movs	r2, #1
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	4013      	ands	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	f040 815a 	bne.w	80013a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f003 0303 	and.w	r3, r3, #3
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d005      	beq.n	800110a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001106:	2b02      	cmp	r3, #2
 8001108:	d130      	bne.n	800116c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	2203      	movs	r2, #3
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43db      	mvns	r3, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4013      	ands	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	68da      	ldr	r2, [r3, #12]
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4313      	orrs	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001140:	2201      	movs	r2, #1
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	091b      	lsrs	r3, r3, #4
 8001156:	f003 0201 	and.w	r2, r3, #1
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 0303 	and.w	r3, r3, #3
 8001174:	2b03      	cmp	r3, #3
 8001176:	d017      	beq.n	80011a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	2203      	movs	r2, #3
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	689a      	ldr	r2, [r3, #8]
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0303 	and.w	r3, r3, #3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d123      	bne.n	80011fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	08da      	lsrs	r2, r3, #3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3208      	adds	r2, #8
 80011bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	f003 0307 	and.w	r3, r3, #7
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	220f      	movs	r2, #15
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	691a      	ldr	r2, [r3, #16]
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	08da      	lsrs	r2, r3, #3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3208      	adds	r2, #8
 80011f6:	69b9      	ldr	r1, [r7, #24]
 80011f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	2203      	movs	r2, #3
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 0203 	and.w	r2, r3, #3
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001238:	2b00      	cmp	r3, #0
 800123a:	f000 80b4 	beq.w	80013a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	4b60      	ldr	r3, [pc, #384]	; (80013c4 <HAL_GPIO_Init+0x30c>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001246:	4a5f      	ldr	r2, [pc, #380]	; (80013c4 <HAL_GPIO_Init+0x30c>)
 8001248:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800124c:	6453      	str	r3, [r2, #68]	; 0x44
 800124e:	4b5d      	ldr	r3, [pc, #372]	; (80013c4 <HAL_GPIO_Init+0x30c>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800125a:	4a5b      	ldr	r2, [pc, #364]	; (80013c8 <HAL_GPIO_Init+0x310>)
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	089b      	lsrs	r3, r3, #2
 8001260:	3302      	adds	r3, #2
 8001262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001266:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	f003 0303 	and.w	r3, r3, #3
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	220f      	movs	r2, #15
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43db      	mvns	r3, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4013      	ands	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a52      	ldr	r2, [pc, #328]	; (80013cc <HAL_GPIO_Init+0x314>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d02b      	beq.n	80012de <HAL_GPIO_Init+0x226>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a51      	ldr	r2, [pc, #324]	; (80013d0 <HAL_GPIO_Init+0x318>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d025      	beq.n	80012da <HAL_GPIO_Init+0x222>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a50      	ldr	r2, [pc, #320]	; (80013d4 <HAL_GPIO_Init+0x31c>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d01f      	beq.n	80012d6 <HAL_GPIO_Init+0x21e>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a4f      	ldr	r2, [pc, #316]	; (80013d8 <HAL_GPIO_Init+0x320>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d019      	beq.n	80012d2 <HAL_GPIO_Init+0x21a>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a4e      	ldr	r2, [pc, #312]	; (80013dc <HAL_GPIO_Init+0x324>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d013      	beq.n	80012ce <HAL_GPIO_Init+0x216>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a4d      	ldr	r2, [pc, #308]	; (80013e0 <HAL_GPIO_Init+0x328>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d00d      	beq.n	80012ca <HAL_GPIO_Init+0x212>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a4c      	ldr	r2, [pc, #304]	; (80013e4 <HAL_GPIO_Init+0x32c>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d007      	beq.n	80012c6 <HAL_GPIO_Init+0x20e>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a4b      	ldr	r2, [pc, #300]	; (80013e8 <HAL_GPIO_Init+0x330>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d101      	bne.n	80012c2 <HAL_GPIO_Init+0x20a>
 80012be:	2307      	movs	r3, #7
 80012c0:	e00e      	b.n	80012e0 <HAL_GPIO_Init+0x228>
 80012c2:	2308      	movs	r3, #8
 80012c4:	e00c      	b.n	80012e0 <HAL_GPIO_Init+0x228>
 80012c6:	2306      	movs	r3, #6
 80012c8:	e00a      	b.n	80012e0 <HAL_GPIO_Init+0x228>
 80012ca:	2305      	movs	r3, #5
 80012cc:	e008      	b.n	80012e0 <HAL_GPIO_Init+0x228>
 80012ce:	2304      	movs	r3, #4
 80012d0:	e006      	b.n	80012e0 <HAL_GPIO_Init+0x228>
 80012d2:	2303      	movs	r3, #3
 80012d4:	e004      	b.n	80012e0 <HAL_GPIO_Init+0x228>
 80012d6:	2302      	movs	r3, #2
 80012d8:	e002      	b.n	80012e0 <HAL_GPIO_Init+0x228>
 80012da:	2301      	movs	r3, #1
 80012dc:	e000      	b.n	80012e0 <HAL_GPIO_Init+0x228>
 80012de:	2300      	movs	r3, #0
 80012e0:	69fa      	ldr	r2, [r7, #28]
 80012e2:	f002 0203 	and.w	r2, r2, #3
 80012e6:	0092      	lsls	r2, r2, #2
 80012e8:	4093      	lsls	r3, r2
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012f0:	4935      	ldr	r1, [pc, #212]	; (80013c8 <HAL_GPIO_Init+0x310>)
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	089b      	lsrs	r3, r3, #2
 80012f6:	3302      	adds	r3, #2
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012fe:	4b3b      	ldr	r3, [pc, #236]	; (80013ec <HAL_GPIO_Init+0x334>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	43db      	mvns	r3, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4013      	ands	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001322:	4a32      	ldr	r2, [pc, #200]	; (80013ec <HAL_GPIO_Init+0x334>)
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001328:	4b30      	ldr	r3, [pc, #192]	; (80013ec <HAL_GPIO_Init+0x334>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	4313      	orrs	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800134c:	4a27      	ldr	r2, [pc, #156]	; (80013ec <HAL_GPIO_Init+0x334>)
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001352:	4b26      	ldr	r3, [pc, #152]	; (80013ec <HAL_GPIO_Init+0x334>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	43db      	mvns	r3, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4013      	ands	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001376:	4a1d      	ldr	r2, [pc, #116]	; (80013ec <HAL_GPIO_Init+0x334>)
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800137c:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <HAL_GPIO_Init+0x334>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	4313      	orrs	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013a0:	4a12      	ldr	r2, [pc, #72]	; (80013ec <HAL_GPIO_Init+0x334>)
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3301      	adds	r3, #1
 80013aa:	61fb      	str	r3, [r7, #28]
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	2b0f      	cmp	r3, #15
 80013b0:	f67f ae90 	bls.w	80010d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013b4:	bf00      	nop
 80013b6:	bf00      	nop
 80013b8:	3724      	adds	r7, #36	; 0x24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40013800 	.word	0x40013800
 80013cc:	40020000 	.word	0x40020000
 80013d0:	40020400 	.word	0x40020400
 80013d4:	40020800 	.word	0x40020800
 80013d8:	40020c00 	.word	0x40020c00
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40021400 	.word	0x40021400
 80013e4:	40021800 	.word	0x40021800
 80013e8:	40021c00 	.word	0x40021c00
 80013ec:	40013c00 	.word	0x40013c00

080013f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	460b      	mov	r3, r1
 80013fa:	807b      	strh	r3, [r7, #2]
 80013fc:	4613      	mov	r3, r2
 80013fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001400:	787b      	ldrb	r3, [r7, #1]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001406:	887a      	ldrh	r2, [r7, #2]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800140c:	e003      	b.n	8001416 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800140e:	887b      	ldrh	r3, [r7, #2]
 8001410:	041a      	lsls	r2, r3, #16
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	619a      	str	r2, [r3, #24]
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b084      	sub	sp, #16
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d101      	bne.n	8001434 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e034      	b.n	800149e <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800143c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f245 5255 	movw	r2, #21845	; 0x5555
 8001446:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	6852      	ldr	r2, [r2, #4]
 8001450:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	6892      	ldr	r2, [r2, #8]
 800145a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800145c:	f7ff fc7c 	bl	8000d58 <HAL_GetTick>
 8001460:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001462:	e00f      	b.n	8001484 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001464:	f7ff fc78 	bl	8000d58 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b31      	cmp	r3, #49	; 0x31
 8001470:	d908      	bls.n	8001484 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	f003 0303 	and.w	r3, r3, #3
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e00c      	b.n	800149e <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	f003 0303 	and.w	r3, r3, #3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1e8      	bne.n	8001464 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800149a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80014b6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
	...

080014c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e267      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d075      	beq.n	80015d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014e6:	4b88      	ldr	r3, [pc, #544]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f003 030c 	and.w	r3, r3, #12
 80014ee:	2b04      	cmp	r3, #4
 80014f0:	d00c      	beq.n	800150c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014f2:	4b85      	ldr	r3, [pc, #532]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014fa:	2b08      	cmp	r3, #8
 80014fc:	d112      	bne.n	8001524 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014fe:	4b82      	ldr	r3, [pc, #520]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001506:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800150a:	d10b      	bne.n	8001524 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800150c:	4b7e      	ldr	r3, [pc, #504]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d05b      	beq.n	80015d0 <HAL_RCC_OscConfig+0x108>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d157      	bne.n	80015d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e242      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800152c:	d106      	bne.n	800153c <HAL_RCC_OscConfig+0x74>
 800152e:	4b76      	ldr	r3, [pc, #472]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a75      	ldr	r2, [pc, #468]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 8001534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	e01d      	b.n	8001578 <HAL_RCC_OscConfig+0xb0>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001544:	d10c      	bne.n	8001560 <HAL_RCC_OscConfig+0x98>
 8001546:	4b70      	ldr	r3, [pc, #448]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a6f      	ldr	r2, [pc, #444]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 800154c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	4b6d      	ldr	r3, [pc, #436]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a6c      	ldr	r2, [pc, #432]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 8001558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	e00b      	b.n	8001578 <HAL_RCC_OscConfig+0xb0>
 8001560:	4b69      	ldr	r3, [pc, #420]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a68      	ldr	r2, [pc, #416]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 8001566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800156a:	6013      	str	r3, [r2, #0]
 800156c:	4b66      	ldr	r3, [pc, #408]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a65      	ldr	r2, [pc, #404]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 8001572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001576:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d013      	beq.n	80015a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001580:	f7ff fbea 	bl	8000d58 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001588:	f7ff fbe6 	bl	8000d58 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b64      	cmp	r3, #100	; 0x64
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e207      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159a:	4b5b      	ldr	r3, [pc, #364]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0f0      	beq.n	8001588 <HAL_RCC_OscConfig+0xc0>
 80015a6:	e014      	b.n	80015d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a8:	f7ff fbd6 	bl	8000d58 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015b0:	f7ff fbd2 	bl	8000d58 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b64      	cmp	r3, #100	; 0x64
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e1f3      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015c2:	4b51      	ldr	r3, [pc, #324]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1f0      	bne.n	80015b0 <HAL_RCC_OscConfig+0xe8>
 80015ce:	e000      	b.n	80015d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d063      	beq.n	80016a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015de:	4b4a      	ldr	r3, [pc, #296]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f003 030c 	and.w	r3, r3, #12
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d00b      	beq.n	8001602 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015ea:	4b47      	ldr	r3, [pc, #284]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015f2:	2b08      	cmp	r3, #8
 80015f4:	d11c      	bne.n	8001630 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015f6:	4b44      	ldr	r3, [pc, #272]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d116      	bne.n	8001630 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001602:	4b41      	ldr	r3, [pc, #260]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d005      	beq.n	800161a <HAL_RCC_OscConfig+0x152>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d001      	beq.n	800161a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e1c7      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800161a:	4b3b      	ldr	r3, [pc, #236]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	4937      	ldr	r1, [pc, #220]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 800162a:	4313      	orrs	r3, r2
 800162c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800162e:	e03a      	b.n	80016a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d020      	beq.n	800167a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001638:	4b34      	ldr	r3, [pc, #208]	; (800170c <HAL_RCC_OscConfig+0x244>)
 800163a:	2201      	movs	r2, #1
 800163c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163e:	f7ff fb8b 	bl	8000d58 <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001646:	f7ff fb87 	bl	8000d58 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e1a8      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001658:	4b2b      	ldr	r3, [pc, #172]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0f0      	beq.n	8001646 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001664:	4b28      	ldr	r3, [pc, #160]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	4925      	ldr	r1, [pc, #148]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 8001674:	4313      	orrs	r3, r2
 8001676:	600b      	str	r3, [r1, #0]
 8001678:	e015      	b.n	80016a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800167a:	4b24      	ldr	r3, [pc, #144]	; (800170c <HAL_RCC_OscConfig+0x244>)
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001680:	f7ff fb6a 	bl	8000d58 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001688:	f7ff fb66 	bl	8000d58 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e187      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800169a:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0308 	and.w	r3, r3, #8
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d036      	beq.n	8001720 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d016      	beq.n	80016e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <HAL_RCC_OscConfig+0x248>)
 80016bc:	2201      	movs	r2, #1
 80016be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c0:	f7ff fb4a 	bl	8000d58 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016c8:	f7ff fb46 	bl	8000d58 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e167      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016da:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 80016dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0f0      	beq.n	80016c8 <HAL_RCC_OscConfig+0x200>
 80016e6:	e01b      	b.n	8001720 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016e8:	4b09      	ldr	r3, [pc, #36]	; (8001710 <HAL_RCC_OscConfig+0x248>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ee:	f7ff fb33 	bl	8000d58 <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f4:	e00e      	b.n	8001714 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016f6:	f7ff fb2f 	bl	8000d58 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d907      	bls.n	8001714 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e150      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
 8001708:	40023800 	.word	0x40023800
 800170c:	42470000 	.word	0x42470000
 8001710:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001714:	4b88      	ldr	r3, [pc, #544]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 8001716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1ea      	bne.n	80016f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	2b00      	cmp	r3, #0
 800172a:	f000 8097 	beq.w	800185c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800172e:	2300      	movs	r3, #0
 8001730:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001732:	4b81      	ldr	r3, [pc, #516]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d10f      	bne.n	800175e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	4b7d      	ldr	r3, [pc, #500]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	4a7c      	ldr	r2, [pc, #496]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 8001748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800174c:	6413      	str	r3, [r2, #64]	; 0x40
 800174e:	4b7a      	ldr	r3, [pc, #488]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800175a:	2301      	movs	r3, #1
 800175c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800175e:	4b77      	ldr	r3, [pc, #476]	; (800193c <HAL_RCC_OscConfig+0x474>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001766:	2b00      	cmp	r3, #0
 8001768:	d118      	bne.n	800179c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800176a:	4b74      	ldr	r3, [pc, #464]	; (800193c <HAL_RCC_OscConfig+0x474>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a73      	ldr	r2, [pc, #460]	; (800193c <HAL_RCC_OscConfig+0x474>)
 8001770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001774:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001776:	f7ff faef 	bl	8000d58 <HAL_GetTick>
 800177a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800177c:	e008      	b.n	8001790 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800177e:	f7ff faeb 	bl	8000d58 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e10c      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001790:	4b6a      	ldr	r3, [pc, #424]	; (800193c <HAL_RCC_OscConfig+0x474>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001798:	2b00      	cmp	r3, #0
 800179a:	d0f0      	beq.n	800177e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d106      	bne.n	80017b2 <HAL_RCC_OscConfig+0x2ea>
 80017a4:	4b64      	ldr	r3, [pc, #400]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 80017a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a8:	4a63      	ldr	r2, [pc, #396]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 80017aa:	f043 0301 	orr.w	r3, r3, #1
 80017ae:	6713      	str	r3, [r2, #112]	; 0x70
 80017b0:	e01c      	b.n	80017ec <HAL_RCC_OscConfig+0x324>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	2b05      	cmp	r3, #5
 80017b8:	d10c      	bne.n	80017d4 <HAL_RCC_OscConfig+0x30c>
 80017ba:	4b5f      	ldr	r3, [pc, #380]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 80017bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017be:	4a5e      	ldr	r2, [pc, #376]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 80017c0:	f043 0304 	orr.w	r3, r3, #4
 80017c4:	6713      	str	r3, [r2, #112]	; 0x70
 80017c6:	4b5c      	ldr	r3, [pc, #368]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 80017c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ca:	4a5b      	ldr	r2, [pc, #364]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	6713      	str	r3, [r2, #112]	; 0x70
 80017d2:	e00b      	b.n	80017ec <HAL_RCC_OscConfig+0x324>
 80017d4:	4b58      	ldr	r3, [pc, #352]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 80017d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d8:	4a57      	ldr	r2, [pc, #348]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 80017da:	f023 0301 	bic.w	r3, r3, #1
 80017de:	6713      	str	r3, [r2, #112]	; 0x70
 80017e0:	4b55      	ldr	r3, [pc, #340]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 80017e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e4:	4a54      	ldr	r2, [pc, #336]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 80017e6:	f023 0304 	bic.w	r3, r3, #4
 80017ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d015      	beq.n	8001820 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f4:	f7ff fab0 	bl	8000d58 <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017fa:	e00a      	b.n	8001812 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017fc:	f7ff faac 	bl	8000d58 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	f241 3288 	movw	r2, #5000	; 0x1388
 800180a:	4293      	cmp	r3, r2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e0cb      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001812:	4b49      	ldr	r3, [pc, #292]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 8001814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d0ee      	beq.n	80017fc <HAL_RCC_OscConfig+0x334>
 800181e:	e014      	b.n	800184a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001820:	f7ff fa9a 	bl	8000d58 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001826:	e00a      	b.n	800183e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001828:	f7ff fa96 	bl	8000d58 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	f241 3288 	movw	r2, #5000	; 0x1388
 8001836:	4293      	cmp	r3, r2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e0b5      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800183e:	4b3e      	ldr	r3, [pc, #248]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 8001840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1ee      	bne.n	8001828 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800184a:	7dfb      	ldrb	r3, [r7, #23]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d105      	bne.n	800185c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001850:	4b39      	ldr	r3, [pc, #228]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 8001852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001854:	4a38      	ldr	r2, [pc, #224]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 8001856:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800185a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	2b00      	cmp	r3, #0
 8001862:	f000 80a1 	beq.w	80019a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001866:	4b34      	ldr	r3, [pc, #208]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f003 030c 	and.w	r3, r3, #12
 800186e:	2b08      	cmp	r3, #8
 8001870:	d05c      	beq.n	800192c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	2b02      	cmp	r3, #2
 8001878:	d141      	bne.n	80018fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800187a:	4b31      	ldr	r3, [pc, #196]	; (8001940 <HAL_RCC_OscConfig+0x478>)
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001880:	f7ff fa6a 	bl	8000d58 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001888:	f7ff fa66 	bl	8000d58 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e087      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800189a:	4b27      	ldr	r3, [pc, #156]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1f0      	bne.n	8001888 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	69da      	ldr	r2, [r3, #28]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a1b      	ldr	r3, [r3, #32]
 80018ae:	431a      	orrs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b4:	019b      	lsls	r3, r3, #6
 80018b6:	431a      	orrs	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018bc:	085b      	lsrs	r3, r3, #1
 80018be:	3b01      	subs	r3, #1
 80018c0:	041b      	lsls	r3, r3, #16
 80018c2:	431a      	orrs	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c8:	061b      	lsls	r3, r3, #24
 80018ca:	491b      	ldr	r1, [pc, #108]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018d0:	4b1b      	ldr	r3, [pc, #108]	; (8001940 <HAL_RCC_OscConfig+0x478>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d6:	f7ff fa3f 	bl	8000d58 <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018dc:	e008      	b.n	80018f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018de:	f7ff fa3b 	bl	8000d58 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e05c      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d0f0      	beq.n	80018de <HAL_RCC_OscConfig+0x416>
 80018fc:	e054      	b.n	80019a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018fe:	4b10      	ldr	r3, [pc, #64]	; (8001940 <HAL_RCC_OscConfig+0x478>)
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001904:	f7ff fa28 	bl	8000d58 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800190c:	f7ff fa24 	bl	8000d58 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e045      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800191e:	4b06      	ldr	r3, [pc, #24]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f0      	bne.n	800190c <HAL_RCC_OscConfig+0x444>
 800192a:	e03d      	b.n	80019a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d107      	bne.n	8001944 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e038      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
 8001938:	40023800 	.word	0x40023800
 800193c:	40007000 	.word	0x40007000
 8001940:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001944:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <HAL_RCC_OscConfig+0x4ec>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d028      	beq.n	80019a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800195c:	429a      	cmp	r2, r3
 800195e:	d121      	bne.n	80019a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800196a:	429a      	cmp	r2, r3
 800196c:	d11a      	bne.n	80019a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001974:	4013      	ands	r3, r2
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800197a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800197c:	4293      	cmp	r3, r2
 800197e:	d111      	bne.n	80019a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198a:	085b      	lsrs	r3, r3, #1
 800198c:	3b01      	subs	r3, #1
 800198e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001990:	429a      	cmp	r2, r3
 8001992:	d107      	bne.n	80019a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d001      	beq.n	80019a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e000      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40023800 	.word	0x40023800

080019b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d101      	bne.n	80019cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e0cc      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019cc:	4b68      	ldr	r3, [pc, #416]	; (8001b70 <HAL_RCC_ClockConfig+0x1b8>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d90c      	bls.n	80019f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019da:	4b65      	ldr	r3, [pc, #404]	; (8001b70 <HAL_RCC_ClockConfig+0x1b8>)
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	b2d2      	uxtb	r2, r2
 80019e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e2:	4b63      	ldr	r3, [pc, #396]	; (8001b70 <HAL_RCC_ClockConfig+0x1b8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d001      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e0b8      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d020      	beq.n	8001a42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d005      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a0c:	4b59      	ldr	r3, [pc, #356]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	4a58      	ldr	r2, [pc, #352]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0308 	and.w	r3, r3, #8
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d005      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a24:	4b53      	ldr	r3, [pc, #332]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	4a52      	ldr	r2, [pc, #328]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a30:	4b50      	ldr	r3, [pc, #320]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	494d      	ldr	r1, [pc, #308]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d044      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d107      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a56:	4b47      	ldr	r3, [pc, #284]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d119      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e07f      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d003      	beq.n	8001a76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a72:	2b03      	cmp	r3, #3
 8001a74:	d107      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a76:	4b3f      	ldr	r3, [pc, #252]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d109      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e06f      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a86:	4b3b      	ldr	r3, [pc, #236]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e067      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a96:	4b37      	ldr	r3, [pc, #220]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f023 0203 	bic.w	r2, r3, #3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	4934      	ldr	r1, [pc, #208]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001aa8:	f7ff f956 	bl	8000d58 <HAL_GetTick>
 8001aac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aae:	e00a      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ab0:	f7ff f952 	bl	8000d58 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e04f      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac6:	4b2b      	ldr	r3, [pc, #172]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 020c 	and.w	r2, r3, #12
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d1eb      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ad8:	4b25      	ldr	r3, [pc, #148]	; (8001b70 <HAL_RCC_ClockConfig+0x1b8>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d20c      	bcs.n	8001b00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae6:	4b22      	ldr	r3, [pc, #136]	; (8001b70 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aee:	4b20      	ldr	r3, [pc, #128]	; (8001b70 <HAL_RCC_ClockConfig+0x1b8>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d001      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e032      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d008      	beq.n	8001b1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b0c:	4b19      	ldr	r3, [pc, #100]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	4916      	ldr	r1, [pc, #88]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0308 	and.w	r3, r3, #8
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d009      	beq.n	8001b3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b2a:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	490e      	ldr	r1, [pc, #56]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b3e:	f000 f821 	bl	8001b84 <HAL_RCC_GetSysClockFreq>
 8001b42:	4602      	mov	r2, r0
 8001b44:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	091b      	lsrs	r3, r3, #4
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	490a      	ldr	r1, [pc, #40]	; (8001b78 <HAL_RCC_ClockConfig+0x1c0>)
 8001b50:	5ccb      	ldrb	r3, [r1, r3]
 8001b52:	fa22 f303 	lsr.w	r3, r2, r3
 8001b56:	4a09      	ldr	r2, [pc, #36]	; (8001b7c <HAL_RCC_ClockConfig+0x1c4>)
 8001b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b5a:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <HAL_RCC_ClockConfig+0x1c8>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff f8b6 	bl	8000cd0 <HAL_InitTick>

  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40023c00 	.word	0x40023c00
 8001b74:	40023800 	.word	0x40023800
 8001b78:	08006d60 	.word	0x08006d60
 8001b7c:	20000000 	.word	0x20000000
 8001b80:	20000004 	.word	0x20000004

08001b84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b88:	b090      	sub	sp, #64	; 0x40
 8001b8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	637b      	str	r3, [r7, #52]	; 0x34
 8001b90:	2300      	movs	r3, #0
 8001b92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b94:	2300      	movs	r3, #0
 8001b96:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b9c:	4b59      	ldr	r3, [pc, #356]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 030c 	and.w	r3, r3, #12
 8001ba4:	2b08      	cmp	r3, #8
 8001ba6:	d00d      	beq.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x40>
 8001ba8:	2b08      	cmp	r3, #8
 8001baa:	f200 80a1 	bhi.w	8001cf0 <HAL_RCC_GetSysClockFreq+0x16c>
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d002      	beq.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x34>
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	d003      	beq.n	8001bbe <HAL_RCC_GetSysClockFreq+0x3a>
 8001bb6:	e09b      	b.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bb8:	4b53      	ldr	r3, [pc, #332]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x184>)
 8001bba:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001bbc:	e09b      	b.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bbe:	4b53      	ldr	r3, [pc, #332]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x188>)
 8001bc0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001bc2:	e098      	b.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bc4:	4b4f      	ldr	r3, [pc, #316]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bcc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bce:	4b4d      	ldr	r3, [pc, #308]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d028      	beq.n	8001c2c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bda:	4b4a      	ldr	r3, [pc, #296]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	099b      	lsrs	r3, r3, #6
 8001be0:	2200      	movs	r2, #0
 8001be2:	623b      	str	r3, [r7, #32]
 8001be4:	627a      	str	r2, [r7, #36]	; 0x24
 8001be6:	6a3b      	ldr	r3, [r7, #32]
 8001be8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001bec:	2100      	movs	r1, #0
 8001bee:	4b47      	ldr	r3, [pc, #284]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x188>)
 8001bf0:	fb03 f201 	mul.w	r2, r3, r1
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	fb00 f303 	mul.w	r3, r0, r3
 8001bfa:	4413      	add	r3, r2
 8001bfc:	4a43      	ldr	r2, [pc, #268]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x188>)
 8001bfe:	fba0 1202 	umull	r1, r2, r0, r2
 8001c02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c04:	460a      	mov	r2, r1
 8001c06:	62ba      	str	r2, [r7, #40]	; 0x28
 8001c08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c0a:	4413      	add	r3, r2
 8001c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c10:	2200      	movs	r2, #0
 8001c12:	61bb      	str	r3, [r7, #24]
 8001c14:	61fa      	str	r2, [r7, #28]
 8001c16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c1a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c1e:	f7fe fad7 	bl	80001d0 <__aeabi_uldivmod>
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	4613      	mov	r3, r2
 8001c28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c2a:	e053      	b.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c2c:	4b35      	ldr	r3, [pc, #212]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	099b      	lsrs	r3, r3, #6
 8001c32:	2200      	movs	r2, #0
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	617a      	str	r2, [r7, #20]
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001c3e:	f04f 0b00 	mov.w	fp, #0
 8001c42:	4652      	mov	r2, sl
 8001c44:	465b      	mov	r3, fp
 8001c46:	f04f 0000 	mov.w	r0, #0
 8001c4a:	f04f 0100 	mov.w	r1, #0
 8001c4e:	0159      	lsls	r1, r3, #5
 8001c50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c54:	0150      	lsls	r0, r2, #5
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	ebb2 080a 	subs.w	r8, r2, sl
 8001c5e:	eb63 090b 	sbc.w	r9, r3, fp
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	f04f 0300 	mov.w	r3, #0
 8001c6a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001c6e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001c72:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c76:	ebb2 0408 	subs.w	r4, r2, r8
 8001c7a:	eb63 0509 	sbc.w	r5, r3, r9
 8001c7e:	f04f 0200 	mov.w	r2, #0
 8001c82:	f04f 0300 	mov.w	r3, #0
 8001c86:	00eb      	lsls	r3, r5, #3
 8001c88:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c8c:	00e2      	lsls	r2, r4, #3
 8001c8e:	4614      	mov	r4, r2
 8001c90:	461d      	mov	r5, r3
 8001c92:	eb14 030a 	adds.w	r3, r4, sl
 8001c96:	603b      	str	r3, [r7, #0]
 8001c98:	eb45 030b 	adc.w	r3, r5, fp
 8001c9c:	607b      	str	r3, [r7, #4]
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	f04f 0300 	mov.w	r3, #0
 8001ca6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001caa:	4629      	mov	r1, r5
 8001cac:	028b      	lsls	r3, r1, #10
 8001cae:	4621      	mov	r1, r4
 8001cb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cb4:	4621      	mov	r1, r4
 8001cb6:	028a      	lsls	r2, r1, #10
 8001cb8:	4610      	mov	r0, r2
 8001cba:	4619      	mov	r1, r3
 8001cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	60bb      	str	r3, [r7, #8]
 8001cc2:	60fa      	str	r2, [r7, #12]
 8001cc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001cc8:	f7fe fa82 	bl	80001d0 <__aeabi_uldivmod>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	0c1b      	lsrs	r3, r3, #16
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	3301      	adds	r3, #1
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001ce4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001cee:	e002      	b.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cf0:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x184>)
 8001cf2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001cf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3740      	adds	r7, #64	; 0x40
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d02:	bf00      	nop
 8001d04:	40023800 	.word	0x40023800
 8001d08:	00f42400 	.word	0x00f42400
 8001d0c:	017d7840 	.word	0x017d7840

08001d10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d14:	4b03      	ldr	r3, [pc, #12]	; (8001d24 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d16:	681b      	ldr	r3, [r3, #0]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	20000000 	.word	0x20000000

08001d28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d2c:	f7ff fff0 	bl	8001d10 <HAL_RCC_GetHCLKFreq>
 8001d30:	4602      	mov	r2, r0
 8001d32:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	0a9b      	lsrs	r3, r3, #10
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	4903      	ldr	r1, [pc, #12]	; (8001d4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d3e:	5ccb      	ldrb	r3, [r1, r3]
 8001d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	08006d70 	.word	0x08006d70

08001d50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d54:	f7ff ffdc 	bl	8001d10 <HAL_RCC_GetHCLKFreq>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	0b5b      	lsrs	r3, r3, #13
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	4903      	ldr	r1, [pc, #12]	; (8001d74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d66:	5ccb      	ldrb	r3, [r1, r3]
 8001d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40023800 	.word	0x40023800
 8001d74:	08006d70 	.word	0x08006d70

08001d78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e07b      	b.n	8001e82 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d108      	bne.n	8001da4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d9a:	d009      	beq.n	8001db0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	61da      	str	r2, [r3, #28]
 8001da2:	e005      	b.n	8001db0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d106      	bne.n	8001dd0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7fe fdee 	bl	80009ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001de6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001df8:	431a      	orrs	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	431a      	orrs	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e20:	431a      	orrs	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e34:	ea42 0103 	orr.w	r1, r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	0c1b      	lsrs	r3, r3, #16
 8001e4e:	f003 0104 	and.w	r1, r3, #4
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e56:	f003 0210 	and.w	r2, r3, #16
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	69da      	ldr	r2, [r3, #28]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e70:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
	...

08001e8c <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b087      	sub	sp, #28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	4613      	mov	r3, r2
 8001e98:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d101      	bne.n	8001eac <HAL_SPI_Transmit_IT+0x20>
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	e06f      	b.n	8001f8c <HAL_SPI_Transmit_IT+0x100>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d002      	beq.n	8001ec0 <HAL_SPI_Transmit_IT+0x34>
 8001eba:	88fb      	ldrh	r3, [r7, #6]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d102      	bne.n	8001ec6 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001ec4:	e05d      	b.n	8001f82 <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d002      	beq.n	8001ed8 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001ed6:	e054      	b.n	8001f82 <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2203      	movs	r2, #3
 8001edc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	68ba      	ldr	r2, [r7, #8]
 8001eea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	88fa      	ldrh	r2, [r7, #6]
 8001ef0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	88fa      	ldrh	r2, [r7, #6]
 8001ef6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	4a1f      	ldr	r2, [pc, #124]	; (8001f98 <HAL_SPI_Transmit_IT+0x10c>)
 8001f1c:	645a      	str	r2, [r3, #68]	; 0x44
 8001f1e:	e002      	b.n	8001f26 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4a1e      	ldr	r2, [pc, #120]	; (8001f9c <HAL_SPI_Transmit_IT+0x110>)
 8001f24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f2e:	d10f      	bne.n	8001f50 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f3e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f4e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8001f5e:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f6a:	2b40      	cmp	r3, #64	; 0x40
 8001f6c:	d008      	beq.n	8001f80 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	e000      	b.n	8001f82 <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 8001f80:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	371c      	adds	r7, #28
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	080026c1 	.word	0x080026c1
 8001f9c:	0800267b 	.word	0x0800267b

08001fa0 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	4613      	mov	r3, r2
 8001fac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d110      	bne.n	8001fdc <HAL_SPI_Receive_IT+0x3c>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fc2:	d10b      	bne.n	8001fdc <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2204      	movs	r2, #4
 8001fc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8001fcc:	88fb      	ldrh	r3, [r7, #6]
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	68b9      	ldr	r1, [r7, #8]
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f000 f882 	bl	80020dc <HAL_SPI_TransmitReceive_IT>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	e076      	b.n	80020ca <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d101      	bne.n	8001fea <HAL_SPI_Receive_IT+0x4a>
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	e06f      	b.n	80020ca <HAL_SPI_Receive_IT+0x12a>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d002      	beq.n	8002004 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8001ffe:	2302      	movs	r3, #2
 8002000:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002002:	e05d      	b.n	80020c0 <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d002      	beq.n	8002010 <HAL_SPI_Receive_IT+0x70>
 800200a:	88fb      	ldrh	r3, [r7, #6]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d102      	bne.n	8002016 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002014:	e054      	b.n	80020c0 <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2204      	movs	r2, #4
 800201a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	88fa      	ldrh	r2, [r7, #6]
 800202e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	88fa      	ldrh	r2, [r7, #6]
 8002034:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2200      	movs	r2, #0
 800203a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	4a1e      	ldr	r2, [pc, #120]	; (80020d4 <HAL_SPI_Receive_IT+0x134>)
 800205a:	641a      	str	r2, [r3, #64]	; 0x40
 800205c:	e002      	b.n	8002064 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	4a1d      	ldr	r2, [pc, #116]	; (80020d8 <HAL_SPI_Receive_IT+0x138>)
 8002062:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800206c:	d10f      	bne.n	800208e <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800207c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800208c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800209c:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020a8:	2b40      	cmp	r3, #64	; 0x40
 80020aa:	d008      	beq.n	80020be <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	e000      	b.n	80020c0 <HAL_SPI_Receive_IT+0x120>
  }

error :
 80020be:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80020c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3718      	adds	r7, #24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	08002635 	.word	0x08002635
 80020d8:	080025eb 	.word	0x080025eb

080020dc <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80020dc:	b480      	push	{r7}
 80020de:	b087      	sub	sp, #28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
 80020e8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80020ea:	2300      	movs	r3, #0
 80020ec:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d101      	bne.n	80020fc <HAL_SPI_TransmitReceive_IT+0x20>
 80020f8:	2302      	movs	r3, #2
 80020fa:	e075      	b.n	80021e8 <HAL_SPI_TransmitReceive_IT+0x10c>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800210a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002112:	7dbb      	ldrb	r3, [r7, #22]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d00d      	beq.n	8002134 <HAL_SPI_TransmitReceive_IT+0x58>
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800211e:	d106      	bne.n	800212e <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d102      	bne.n	800212e <HAL_SPI_TransmitReceive_IT+0x52>
 8002128:	7dbb      	ldrb	r3, [r7, #22]
 800212a:	2b04      	cmp	r3, #4
 800212c:	d002      	beq.n	8002134 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800212e:	2302      	movs	r3, #2
 8002130:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002132:	e054      	b.n	80021de <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d005      	beq.n	8002146 <HAL_SPI_TransmitReceive_IT+0x6a>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d002      	beq.n	8002146 <HAL_SPI_TransmitReceive_IT+0x6a>
 8002140:	887b      	ldrh	r3, [r7, #2]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d102      	bne.n	800214c <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	75fb      	strb	r3, [r7, #23]
    goto error;
 800214a:	e048      	b.n	80021de <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002152:	b2db      	uxtb	r3, r3
 8002154:	2b04      	cmp	r3, #4
 8002156:	d003      	beq.n	8002160 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2205      	movs	r2, #5
 800215c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	68ba      	ldr	r2, [r7, #8]
 800216a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	887a      	ldrh	r2, [r7, #2]
 8002170:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	887a      	ldrh	r2, [r7, #2]
 8002176:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	887a      	ldrh	r2, [r7, #2]
 8002182:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	887a      	ldrh	r2, [r7, #2]
 8002188:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d006      	beq.n	80021a0 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	4a17      	ldr	r2, [pc, #92]	; (80021f4 <HAL_SPI_TransmitReceive_IT+0x118>)
 8002196:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	4a17      	ldr	r2, [pc, #92]	; (80021f8 <HAL_SPI_TransmitReceive_IT+0x11c>)
 800219c:	645a      	str	r2, [r3, #68]	; 0x44
 800219e:	e005      	b.n	80021ac <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	4a16      	ldr	r2, [pc, #88]	; (80021fc <HAL_SPI_TransmitReceive_IT+0x120>)
 80021a4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4a15      	ldr	r2, [pc, #84]	; (8002200 <HAL_SPI_TransmitReceive_IT+0x124>)
 80021aa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	685a      	ldr	r2, [r3, #4]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80021ba:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c6:	2b40      	cmp	r3, #64	; 0x40
 80021c8:	d008      	beq.n	80021dc <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	e000      	b.n	80021de <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 80021dc:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80021e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	371c      	adds	r7, #28
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	0800252d 	.word	0x0800252d
 80021f8:	0800258d 	.word	0x0800258d
 80021fc:	08002469 	.word	0x08002469
 8002200:	080024cd 	.word	0x080024cd

08002204 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b088      	sub	sp, #32
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	099b      	lsrs	r3, r3, #6
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b00      	cmp	r3, #0
 8002226:	d10f      	bne.n	8002248 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00a      	beq.n	8002248 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	099b      	lsrs	r3, r3, #6
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d004      	beq.n	8002248 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	4798      	blx	r3
    return;
 8002246:	e0d7      	b.n	80023f8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	085b      	lsrs	r3, r3, #1
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00a      	beq.n	800226a <HAL_SPI_IRQHandler+0x66>
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	09db      	lsrs	r3, r3, #7
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d004      	beq.n	800226a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	4798      	blx	r3
    return;
 8002268:	e0c6      	b.n	80023f8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	095b      	lsrs	r3, r3, #5
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10c      	bne.n	8002290 <HAL_SPI_IRQHandler+0x8c>
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	099b      	lsrs	r3, r3, #6
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d106      	bne.n	8002290 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	0a1b      	lsrs	r3, r3, #8
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b00      	cmp	r3, #0
 800228c:	f000 80b4 	beq.w	80023f8 <HAL_SPI_IRQHandler+0x1f4>
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	095b      	lsrs	r3, r3, #5
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 80ad 	beq.w	80023f8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	099b      	lsrs	r3, r3, #6
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d023      	beq.n	80022f2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b03      	cmp	r3, #3
 80022b4:	d011      	beq.n	80022da <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ba:	f043 0204 	orr.w	r2, r3, #4
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	617b      	str	r3, [r7, #20]
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	e00b      	b.n	80022f2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80022da:	2300      	movs	r3, #0
 80022dc:	613b      	str	r3, [r7, #16]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	613b      	str	r3, [r7, #16]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	613b      	str	r3, [r7, #16]
 80022ee:	693b      	ldr	r3, [r7, #16]
        return;
 80022f0:	e082      	b.n	80023f8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	095b      	lsrs	r3, r3, #5
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d014      	beq.n	8002328 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002302:	f043 0201 	orr.w	r2, r3, #1
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	0a1b      	lsrs	r3, r3, #8
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	2b00      	cmp	r3, #0
 8002332:	d00c      	beq.n	800234e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002338:	f043 0208 	orr.w	r2, r3, #8
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002340:	2300      	movs	r3, #0
 8002342:	60bb      	str	r3, [r7, #8]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	60bb      	str	r3, [r7, #8]
 800234c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002352:	2b00      	cmp	r3, #0
 8002354:	d04f      	beq.n	80023f6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002364:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d104      	bne.n	8002382 <HAL_SPI_IRQHandler+0x17e>
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	d034      	beq.n	80023ec <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 0203 	bic.w	r2, r2, #3
 8002390:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002396:	2b00      	cmp	r3, #0
 8002398:	d011      	beq.n	80023be <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800239e:	4a18      	ldr	r2, [pc, #96]	; (8002400 <HAL_SPI_IRQHandler+0x1fc>)
 80023a0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7fe fe63 	bl	8001072 <HAL_DMA_Abort_IT>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d005      	beq.n	80023be <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d016      	beq.n	80023f4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023ca:	4a0d      	ldr	r2, [pc, #52]	; (8002400 <HAL_SPI_IRQHandler+0x1fc>)
 80023cc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fe fe4d 	bl	8001072 <HAL_DMA_Abort_IT>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00a      	beq.n	80023f4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80023ea:	e003      	b.n	80023f4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 f81d 	bl	800242c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80023f2:	e000      	b.n	80023f6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80023f4:	bf00      	nop
    return;
 80023f6:	bf00      	nop
  }
}
 80023f8:	3720      	adds	r7, #32
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	08002441 	.word	0x08002441

08002404 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800244c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f7ff ffe6 	bl	800242c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002460:	bf00      	nop
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f103 020c 	add.w	r2, r3, #12
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247c:	7812      	ldrb	r2, [r2, #0]
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002486:	1c5a      	adds	r2, r3, #1
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002490:	b29b      	uxth	r3, r3
 8002492:	3b01      	subs	r3, #1
 8002494:	b29a      	uxth	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800249e:	b29b      	uxth	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10f      	bne.n	80024c4 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80024b2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d102      	bne.n	80024c4 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 fa50 	bl	8002964 <SPI_CloseRxTx_ISR>
    }
  }
}
 80024c4:	bf00      	nop
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	330c      	adds	r3, #12
 80024de:	7812      	ldrb	r2, [r2, #0]
 80024e0:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	1c5a      	adds	r2, r3, #1
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	3b01      	subs	r3, #1
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024fe:	b29b      	uxth	r3, r3
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10f      	bne.n	8002524 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002512:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002518:	b29b      	uxth	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d102      	bne.n	8002524 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 fa20 	bl	8002964 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002524:	bf00      	nop
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253e:	b292      	uxth	r2, r2
 8002540:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002546:	1c9a      	adds	r2, r3, #2
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002550:	b29b      	uxth	r3, r3
 8002552:	3b01      	subs	r3, #1
 8002554:	b29a      	uxth	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800255e:	b29b      	uxth	r3, r3
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10f      	bne.n	8002584 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	685a      	ldr	r2, [r3, #4]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002572:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002578:	b29b      	uxth	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d102      	bne.n	8002584 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f9f0 	bl	8002964 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002584:	bf00      	nop
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002598:	881a      	ldrh	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a4:	1c9a      	adds	r2, r3, #2
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	3b01      	subs	r3, #1
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025bc:	b29b      	uxth	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10f      	bne.n	80025e2 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025d0:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d102      	bne.n	80025e2 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 f9c1 	bl	8002964 <SPI_CloseRxTx_ISR>
    }
  }
}
 80025e2:	bf00      	nop
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b082      	sub	sp, #8
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f103 020c 	add.w	r2, r3, #12
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025fe:	7812      	ldrb	r2, [r2, #0]
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002608:	1c5a      	adds	r2, r3, #1
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002612:	b29b      	uxth	r3, r3
 8002614:	3b01      	subs	r3, #1
 8002616:	b29a      	uxth	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002620:	b29b      	uxth	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d102      	bne.n	800262c <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 fa10 	bl	8002a4c <SPI_CloseRx_ISR>
  }
}
 800262c:	bf00      	nop
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68da      	ldr	r2, [r3, #12]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002646:	b292      	uxth	r2, r2
 8002648:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264e:	1c9a      	adds	r2, r3, #2
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002658:	b29b      	uxth	r3, r3
 800265a:	3b01      	subs	r3, #1
 800265c:	b29a      	uxth	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002666:	b29b      	uxth	r3, r3
 8002668:	2b00      	cmp	r3, #0
 800266a:	d102      	bne.n	8002672 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 f9ed 	bl	8002a4c <SPI_CloseRx_ISR>
  }
}
 8002672:	bf00      	nop
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b082      	sub	sp, #8
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	330c      	adds	r3, #12
 800268c:	7812      	ldrb	r2, [r2, #0]
 800268e:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002694:	1c5a      	adds	r2, r3, #1
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800269e:	b29b      	uxth	r3, r3
 80026a0:	3b01      	subs	r3, #1
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d102      	bne.n	80026b8 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 fa0a 	bl	8002acc <SPI_CloseTx_ISR>
  }
}
 80026b8:	bf00      	nop
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026cc:	881a      	ldrh	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d8:	1c9a      	adds	r2, r3, #2
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	3b01      	subs	r3, #1
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d102      	bne.n	80026fc <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 f9e8 	bl	8002acc <SPI_CloseTx_ISR>
  }
}
 80026fc:	bf00      	nop
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b088      	sub	sp, #32
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	603b      	str	r3, [r7, #0]
 8002710:	4613      	mov	r3, r2
 8002712:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002714:	f7fe fb20 	bl	8000d58 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271c:	1a9b      	subs	r3, r3, r2
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	4413      	add	r3, r2
 8002722:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002724:	f7fe fb18 	bl	8000d58 <HAL_GetTick>
 8002728:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800272a:	4b39      	ldr	r3, [pc, #228]	; (8002810 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	015b      	lsls	r3, r3, #5
 8002730:	0d1b      	lsrs	r3, r3, #20
 8002732:	69fa      	ldr	r2, [r7, #28]
 8002734:	fb02 f303 	mul.w	r3, r2, r3
 8002738:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800273a:	e054      	b.n	80027e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002742:	d050      	beq.n	80027e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002744:	f7fe fb08 	bl	8000d58 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	69fa      	ldr	r2, [r7, #28]
 8002750:	429a      	cmp	r2, r3
 8002752:	d902      	bls.n	800275a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d13d      	bne.n	80027d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002768:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002772:	d111      	bne.n	8002798 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800277c:	d004      	beq.n	8002788 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002786:	d107      	bne.n	8002798 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002796:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027a0:	d10f      	bne.n	80027c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e017      	b.n	8002806 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80027dc:	2300      	movs	r3, #0
 80027de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	3b01      	subs	r3, #1
 80027e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	4013      	ands	r3, r2
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	bf0c      	ite	eq
 80027f6:	2301      	moveq	r3, #1
 80027f8:	2300      	movne	r3, #0
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	461a      	mov	r2, r3
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	429a      	cmp	r2, r3
 8002802:	d19b      	bne.n	800273c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3720      	adds	r7, #32
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	20000000 	.word	0x20000000

08002814 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af02      	add	r7, sp, #8
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002828:	d111      	bne.n	800284e <SPI_EndRxTransaction+0x3a>
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002832:	d004      	beq.n	800283e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800283c:	d107      	bne.n	800284e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800284c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002856:	d12a      	bne.n	80028ae <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002860:	d012      	beq.n	8002888 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	2200      	movs	r2, #0
 800286a:	2180      	movs	r1, #128	; 0x80
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f7ff ff49 	bl	8002704 <SPI_WaitFlagStateUntilTimeout>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d02d      	beq.n	80028d4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287c:	f043 0220 	orr.w	r2, r3, #32
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e026      	b.n	80028d6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	2200      	movs	r2, #0
 8002890:	2101      	movs	r1, #1
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f7ff ff36 	bl	8002704 <SPI_WaitFlagStateUntilTimeout>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d01a      	beq.n	80028d4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a2:	f043 0220 	orr.w	r2, r3, #32
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e013      	b.n	80028d6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	2200      	movs	r2, #0
 80028b6:	2101      	movs	r1, #1
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f7ff ff23 	bl	8002704 <SPI_WaitFlagStateUntilTimeout>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d007      	beq.n	80028d4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c8:	f043 0220 	orr.w	r2, r3, #32
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e000      	b.n	80028d6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
	...

080028e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b088      	sub	sp, #32
 80028e4:	af02      	add	r7, sp, #8
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80028ec:	4b1b      	ldr	r3, [pc, #108]	; (800295c <SPI_EndRxTxTransaction+0x7c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a1b      	ldr	r2, [pc, #108]	; (8002960 <SPI_EndRxTxTransaction+0x80>)
 80028f2:	fba2 2303 	umull	r2, r3, r2, r3
 80028f6:	0d5b      	lsrs	r3, r3, #21
 80028f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80028fc:	fb02 f303 	mul.w	r3, r2, r3
 8002900:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800290a:	d112      	bne.n	8002932 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	2200      	movs	r2, #0
 8002914:	2180      	movs	r1, #128	; 0x80
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f7ff fef4 	bl	8002704 <SPI_WaitFlagStateUntilTimeout>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d016      	beq.n	8002950 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002926:	f043 0220 	orr.w	r2, r3, #32
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e00f      	b.n	8002952 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00a      	beq.n	800294e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	3b01      	subs	r3, #1
 800293c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002948:	2b80      	cmp	r3, #128	; 0x80
 800294a:	d0f2      	beq.n	8002932 <SPI_EndRxTxTransaction+0x52>
 800294c:	e000      	b.n	8002950 <SPI_EndRxTxTransaction+0x70>
        break;
 800294e:	bf00      	nop
  }

  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3718      	adds	r7, #24
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	20000000 	.word	0x20000000
 8002960:	165e9f81 	.word	0x165e9f81

08002964 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800296c:	4b35      	ldr	r3, [pc, #212]	; (8002a44 <SPI_CloseRxTx_ISR+0xe0>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a35      	ldr	r2, [pc, #212]	; (8002a48 <SPI_CloseRxTx_ISR+0xe4>)
 8002972:	fba2 2303 	umull	r2, r3, r2, r3
 8002976:	0a5b      	lsrs	r3, r3, #9
 8002978:	2264      	movs	r2, #100	; 0x64
 800297a:	fb02 f303 	mul.w	r3, r2, r3
 800297e:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002980:	f7fe f9ea 	bl	8000d58 <HAL_GetTick>
 8002984:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 0220 	bic.w	r2, r2, #32
 8002994:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d106      	bne.n	80029aa <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a0:	f043 0220 	orr.w	r2, r3, #32
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80029a8:	e009      	b.n	80029be <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	3b01      	subs	r3, #1
 80029ae:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0eb      	beq.n	8002996 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	2164      	movs	r1, #100	; 0x64
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7ff ff8c 	bl	80028e0 <SPI_EndRxTxTransaction>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d005      	beq.n	80029da <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d2:	f043 0220 	orr.w	r2, r3, #32
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10a      	bne.n	80029f8 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029e2:	2300      	movs	r3, #0
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d115      	bne.n	8002a2c <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b04      	cmp	r3, #4
 8002a0a:	d107      	bne.n	8002a1c <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f7fd ff5b 	bl	80008d0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002a1a:	e00e      	b.n	8002a3a <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f7ff fcf7 	bl	8002418 <HAL_SPI_TxRxCpltCallback>
}
 8002a2a:	e006      	b.n	8002a3a <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f7ff fcf9 	bl	800242c <HAL_SPI_ErrorCallback>
}
 8002a3a:	bf00      	nop
 8002a3c:	3718      	adds	r7, #24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	20000000 	.word	0x20000000
 8002a48:	057619f1 	.word	0x057619f1

08002a4c <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	685a      	ldr	r2, [r3, #4]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a62:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8002a64:	f7fe f978 	bl	8000d58 <HAL_GetTick>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	2164      	movs	r1, #100	; 0x64
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7ff fed0 	bl	8002814 <SPI_EndRxTransaction>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d005      	beq.n	8002a86 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a7e:	f043 0220 	orr.w	r2, r3, #32
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10a      	bne.n	8002aa4 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60fb      	str	r3, [r7, #12]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d103      	bne.n	8002abc <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f7fd ff0b 	bl	80008d0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002aba:	e002      	b.n	8002ac2 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7ff fcb5 	bl	800242c <HAL_SPI_ErrorCallback>
}
 8002ac2:	bf00      	nop
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
	...

08002acc <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8002ad4:	4b2c      	ldr	r3, [pc, #176]	; (8002b88 <SPI_CloseTx_ISR+0xbc>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a2c      	ldr	r2, [pc, #176]	; (8002b8c <SPI_CloseTx_ISR+0xc0>)
 8002ada:	fba2 2303 	umull	r2, r3, r2, r3
 8002ade:	0a5b      	lsrs	r3, r3, #9
 8002ae0:	2264      	movs	r2, #100	; 0x64
 8002ae2:	fb02 f303 	mul.w	r3, r2, r3
 8002ae6:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ae8:	f7fe f936 	bl	8000d58 <HAL_GetTick>
 8002aec:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d106      	bne.n	8002b02 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af8:	f043 0220 	orr.w	r2, r3, #32
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002b00:	e009      	b.n	8002b16 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	3b01      	subs	r3, #1
 8002b06:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0eb      	beq.n	8002aee <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b24:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	2164      	movs	r1, #100	; 0x64
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7ff fed8 	bl	80028e0 <SPI_EndRxTxTransaction>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d005      	beq.n	8002b42 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3a:	f043 0220 	orr.w	r2, r3, #32
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10a      	bne.n	8002b60 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d003      	beq.n	8002b78 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f7ff fc5b 	bl	800242c <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8002b76:	e002      	b.n	8002b7e <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f7ff fc43 	bl	8002404 <HAL_SPI_TxCpltCallback>
}
 8002b7e:	bf00      	nop
 8002b80:	3718      	adds	r7, #24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	20000000 	.word	0x20000000
 8002b8c:	057619f1 	.word	0x057619f1

08002b90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e03f      	b.n	8002c22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d106      	bne.n	8002bbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f7fd ff48 	bl	8000a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2224      	movs	r2, #36	; 0x24
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68da      	ldr	r2, [r3, #12]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 fd23 	bl	8003620 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	691a      	ldr	r2, [r3, #16]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002be8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	695a      	ldr	r2, [r3, #20]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bf8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68da      	ldr	r2, [r3, #12]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2220      	movs	r2, #32
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b085      	sub	sp, #20
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	60f8      	str	r0, [r7, #12]
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	4613      	mov	r3, r2
 8002c36:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b20      	cmp	r3, #32
 8002c42:	d130      	bne.n	8002ca6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d002      	beq.n	8002c50 <HAL_UART_Transmit_IT+0x26>
 8002c4a:	88fb      	ldrh	r3, [r7, #6]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d101      	bne.n	8002c54 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e029      	b.n	8002ca8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d101      	bne.n	8002c62 <HAL_UART_Transmit_IT+0x38>
 8002c5e:	2302      	movs	r3, #2
 8002c60:	e022      	b.n	8002ca8 <HAL_UART_Transmit_IT+0x7e>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	68ba      	ldr	r2, [r7, #8]
 8002c6e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	88fa      	ldrh	r2, [r7, #6]
 8002c74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	88fa      	ldrh	r2, [r7, #6]
 8002c7a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2221      	movs	r2, #33	; 0x21
 8002c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68da      	ldr	r2, [r3, #12]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ca0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	e000      	b.n	8002ca8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002ca6:	2302      	movs	r3, #2
  }
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b20      	cmp	r3, #32
 8002ccc:	d11d      	bne.n	8002d0a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d002      	beq.n	8002cda <HAL_UART_Receive_IT+0x26>
 8002cd4:	88fb      	ldrh	r3, [r7, #6]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e016      	b.n	8002d0c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d101      	bne.n	8002cec <HAL_UART_Receive_IT+0x38>
 8002ce8:	2302      	movs	r3, #2
 8002cea:	e00f      	b.n	8002d0c <HAL_UART_Receive_IT+0x58>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002cfa:	88fb      	ldrh	r3, [r7, #6]
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	68b9      	ldr	r1, [r7, #8]
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f000 fab5 	bl	8003270 <UART_Start_Receive_IT>
 8002d06:	4603      	mov	r3, r0
 8002d08:	e000      	b.n	8002d0c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002d0a:	2302      	movs	r3, #2
  }
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b0ba      	sub	sp, #232	; 0xe8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002d40:	2300      	movs	r3, #0
 8002d42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002d52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10f      	bne.n	8002d7a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d5e:	f003 0320 	and.w	r3, r3, #32
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d009      	beq.n	8002d7a <HAL_UART_IRQHandler+0x66>
 8002d66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d6a:	f003 0320 	and.w	r3, r3, #32
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 fb99 	bl	80034aa <UART_Receive_IT>
      return;
 8002d78:	e256      	b.n	8003228 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002d7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f000 80de 	beq.w	8002f40 <HAL_UART_IRQHandler+0x22c>
 8002d84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d106      	bne.n	8002d9e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d94:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f000 80d1 	beq.w	8002f40 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00b      	beq.n	8002dc2 <HAL_UART_IRQHandler+0xae>
 8002daa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d005      	beq.n	8002dc2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	f043 0201 	orr.w	r2, r3, #1
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dc6:	f003 0304 	and.w	r3, r3, #4
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00b      	beq.n	8002de6 <HAL_UART_IRQHandler+0xd2>
 8002dce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d005      	beq.n	8002de6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	f043 0202 	orr.w	r2, r3, #2
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00b      	beq.n	8002e0a <HAL_UART_IRQHandler+0xf6>
 8002df2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d005      	beq.n	8002e0a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	f043 0204 	orr.w	r2, r3, #4
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e0e:	f003 0308 	and.w	r3, r3, #8
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d011      	beq.n	8002e3a <HAL_UART_IRQHandler+0x126>
 8002e16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e1a:	f003 0320 	and.w	r3, r3, #32
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d105      	bne.n	8002e2e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d005      	beq.n	8002e3a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	f043 0208 	orr.w	r2, r3, #8
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 81ed 	beq.w	800321e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e48:	f003 0320 	and.w	r3, r3, #32
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d008      	beq.n	8002e62 <HAL_UART_IRQHandler+0x14e>
 8002e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e54:	f003 0320 	and.w	r3, r3, #32
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d002      	beq.n	8002e62 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 fb24 	bl	80034aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6c:	2b40      	cmp	r3, #64	; 0x40
 8002e6e:	bf0c      	ite	eq
 8002e70:	2301      	moveq	r3, #1
 8002e72:	2300      	movne	r3, #0
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d103      	bne.n	8002e8e <HAL_UART_IRQHandler+0x17a>
 8002e86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d04f      	beq.n	8002f2e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 fa2c 	bl	80032ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e9e:	2b40      	cmp	r3, #64	; 0x40
 8002ea0:	d141      	bne.n	8002f26 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	3314      	adds	r3, #20
 8002ea8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002eb0:	e853 3f00 	ldrex	r3, [r3]
 8002eb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002eb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ebc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ec0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	3314      	adds	r3, #20
 8002eca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002ece:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002ed2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002eda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002ede:	e841 2300 	strex	r3, r2, [r1]
 8002ee2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002ee6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1d9      	bne.n	8002ea2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d013      	beq.n	8002f1e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efa:	4a7d      	ldr	r2, [pc, #500]	; (80030f0 <HAL_UART_IRQHandler+0x3dc>)
 8002efc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7fe f8b5 	bl	8001072 <HAL_DMA_Abort_IT>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d016      	beq.n	8002f3c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f18:	4610      	mov	r0, r2
 8002f1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f1c:	e00e      	b.n	8002f3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 f990 	bl	8003244 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f24:	e00a      	b.n	8002f3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f98c 	bl	8003244 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f2c:	e006      	b.n	8002f3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f988 	bl	8003244 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002f3a:	e170      	b.n	800321e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f3c:	bf00      	nop
    return;
 8002f3e:	e16e      	b.n	800321e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	f040 814a 	bne.w	80031de <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f4e:	f003 0310 	and.w	r3, r3, #16
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f000 8143 	beq.w	80031de <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f5c:	f003 0310 	and.w	r3, r3, #16
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 813c 	beq.w	80031de <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f66:	2300      	movs	r3, #0
 8002f68:	60bb      	str	r3, [r7, #8]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	60bb      	str	r3, [r7, #8]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	60bb      	str	r3, [r7, #8]
 8002f7a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f86:	2b40      	cmp	r3, #64	; 0x40
 8002f88:	f040 80b4 	bne.w	80030f4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f000 8140 	beq.w	8003222 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002fa6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002faa:	429a      	cmp	r2, r3
 8002fac:	f080 8139 	bcs.w	8003222 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002fb6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fc2:	f000 8088 	beq.w	80030d6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	330c      	adds	r3, #12
 8002fcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fd4:	e853 3f00 	ldrex	r3, [r3]
 8002fd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002fdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fe0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fe4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	330c      	adds	r3, #12
 8002fee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002ff2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002ff6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ffa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002ffe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003002:	e841 2300 	strex	r3, r2, [r1]
 8003006:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800300a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1d9      	bne.n	8002fc6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	3314      	adds	r3, #20
 8003018:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800301a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800301c:	e853 3f00 	ldrex	r3, [r3]
 8003020:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003022:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003024:	f023 0301 	bic.w	r3, r3, #1
 8003028:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	3314      	adds	r3, #20
 8003032:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003036:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800303a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800303c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800303e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003042:	e841 2300 	strex	r3, r2, [r1]
 8003046:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003048:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1e1      	bne.n	8003012 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	3314      	adds	r3, #20
 8003054:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003056:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003058:	e853 3f00 	ldrex	r3, [r3]
 800305c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800305e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003060:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003064:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	3314      	adds	r3, #20
 800306e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003072:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003074:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003076:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003078:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800307a:	e841 2300 	strex	r3, r2, [r1]
 800307e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003080:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1e3      	bne.n	800304e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2220      	movs	r2, #32
 800308a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	330c      	adds	r3, #12
 800309a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800309c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800309e:	e853 3f00 	ldrex	r3, [r3]
 80030a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80030a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030a6:	f023 0310 	bic.w	r3, r3, #16
 80030aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	330c      	adds	r3, #12
 80030b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80030b8:	65ba      	str	r2, [r7, #88]	; 0x58
 80030ba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80030be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030c0:	e841 2300 	strex	r3, r2, [r1]
 80030c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80030c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1e3      	bne.n	8003094 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7fd ff5e 	bl	8000f92 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030de:	b29b      	uxth	r3, r3
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	4619      	mov	r1, r3
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 f8b6 	bl	8003258 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80030ec:	e099      	b.n	8003222 <HAL_UART_IRQHandler+0x50e>
 80030ee:	bf00      	nop
 80030f0:	080033b3 	.word	0x080033b3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003108:	b29b      	uxth	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 808b 	beq.w	8003226 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003110:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 8086 	beq.w	8003226 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	330c      	adds	r3, #12
 8003120:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003124:	e853 3f00 	ldrex	r3, [r3]
 8003128:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800312a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800312c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003130:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	330c      	adds	r3, #12
 800313a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800313e:	647a      	str	r2, [r7, #68]	; 0x44
 8003140:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003142:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003144:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003146:	e841 2300 	strex	r3, r2, [r1]
 800314a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800314c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1e3      	bne.n	800311a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	3314      	adds	r3, #20
 8003158:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800315a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315c:	e853 3f00 	ldrex	r3, [r3]
 8003160:	623b      	str	r3, [r7, #32]
   return(result);
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	f023 0301 	bic.w	r3, r3, #1
 8003168:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	3314      	adds	r3, #20
 8003172:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003176:	633a      	str	r2, [r7, #48]	; 0x30
 8003178:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800317a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800317c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800317e:	e841 2300 	strex	r3, r2, [r1]
 8003182:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1e3      	bne.n	8003152 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2220      	movs	r2, #32
 800318e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	330c      	adds	r3, #12
 800319e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	e853 3f00 	ldrex	r3, [r3]
 80031a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f023 0310 	bic.w	r3, r3, #16
 80031ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	330c      	adds	r3, #12
 80031b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80031bc:	61fa      	str	r2, [r7, #28]
 80031be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c0:	69b9      	ldr	r1, [r7, #24]
 80031c2:	69fa      	ldr	r2, [r7, #28]
 80031c4:	e841 2300 	strex	r3, r2, [r1]
 80031c8:	617b      	str	r3, [r7, #20]
   return(result);
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1e3      	bne.n	8003198 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80031d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80031d4:	4619      	mov	r1, r3
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 f83e 	bl	8003258 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80031dc:	e023      	b.n	8003226 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80031de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d009      	beq.n	80031fe <HAL_UART_IRQHandler+0x4ea>
 80031ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f8ef 	bl	80033da <UART_Transmit_IT>
    return;
 80031fc:	e014      	b.n	8003228 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80031fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00e      	beq.n	8003228 <HAL_UART_IRQHandler+0x514>
 800320a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800320e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003212:	2b00      	cmp	r3, #0
 8003214:	d008      	beq.n	8003228 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f92f 	bl	800347a <UART_EndTransmit_IT>
    return;
 800321c:	e004      	b.n	8003228 <HAL_UART_IRQHandler+0x514>
    return;
 800321e:	bf00      	nop
 8003220:	e002      	b.n	8003228 <HAL_UART_IRQHandler+0x514>
      return;
 8003222:	bf00      	nop
 8003224:	e000      	b.n	8003228 <HAL_UART_IRQHandler+0x514>
      return;
 8003226:	bf00      	nop
  }
}
 8003228:	37e8      	adds	r7, #232	; 0xe8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop

08003230 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	460b      	mov	r3, r1
 8003262:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	4613      	mov	r3, r2
 800327c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	68ba      	ldr	r2, [r7, #8]
 8003282:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	88fa      	ldrh	r2, [r7, #6]
 8003288:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	88fa      	ldrh	r2, [r7, #6]
 800328e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2222      	movs	r2, #34	; 0x22
 800329a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d007      	beq.n	80032be <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68da      	ldr	r2, [r3, #12]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032bc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	695a      	ldr	r2, [r3, #20]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f042 0201 	orr.w	r2, r2, #1
 80032cc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68da      	ldr	r2, [r3, #12]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f042 0220 	orr.w	r2, r2, #32
 80032dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3714      	adds	r7, #20
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b095      	sub	sp, #84	; 0x54
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	330c      	adds	r3, #12
 80032fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032fe:	e853 3f00 	ldrex	r3, [r3]
 8003302:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003306:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800330a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	330c      	adds	r3, #12
 8003312:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003314:	643a      	str	r2, [r7, #64]	; 0x40
 8003316:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003318:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800331a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800331c:	e841 2300 	strex	r3, r2, [r1]
 8003320:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1e5      	bne.n	80032f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	3314      	adds	r3, #20
 800332e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003330:	6a3b      	ldr	r3, [r7, #32]
 8003332:	e853 3f00 	ldrex	r3, [r3]
 8003336:	61fb      	str	r3, [r7, #28]
   return(result);
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	f023 0301 	bic.w	r3, r3, #1
 800333e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	3314      	adds	r3, #20
 8003346:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003348:	62fa      	str	r2, [r7, #44]	; 0x2c
 800334a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800334c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800334e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003350:	e841 2300 	strex	r3, r2, [r1]
 8003354:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1e5      	bne.n	8003328 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003360:	2b01      	cmp	r3, #1
 8003362:	d119      	bne.n	8003398 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	330c      	adds	r3, #12
 800336a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	e853 3f00 	ldrex	r3, [r3]
 8003372:	60bb      	str	r3, [r7, #8]
   return(result);
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	f023 0310 	bic.w	r3, r3, #16
 800337a:	647b      	str	r3, [r7, #68]	; 0x44
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	330c      	adds	r3, #12
 8003382:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003384:	61ba      	str	r2, [r7, #24]
 8003386:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003388:	6979      	ldr	r1, [r7, #20]
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	e841 2300 	strex	r3, r2, [r1]
 8003390:	613b      	str	r3, [r7, #16]
   return(result);
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1e5      	bne.n	8003364 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2220      	movs	r2, #32
 800339c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80033a6:	bf00      	nop
 80033a8:	3754      	adds	r7, #84	; 0x54
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr

080033b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b084      	sub	sp, #16
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f7ff ff39 	bl	8003244 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033d2:	bf00      	nop
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80033da:	b480      	push	{r7}
 80033dc:	b085      	sub	sp, #20
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b21      	cmp	r3, #33	; 0x21
 80033ec:	d13e      	bne.n	800346c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033f6:	d114      	bne.n	8003422 <UART_Transmit_IT+0x48>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d110      	bne.n	8003422 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	881b      	ldrh	r3, [r3, #0]
 800340a:	461a      	mov	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003414:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	1c9a      	adds	r2, r3, #2
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	621a      	str	r2, [r3, #32]
 8003420:	e008      	b.n	8003434 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	1c59      	adds	r1, r3, #1
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	6211      	str	r1, [r2, #32]
 800342c:	781a      	ldrb	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003438:	b29b      	uxth	r3, r3
 800343a:	3b01      	subs	r3, #1
 800343c:	b29b      	uxth	r3, r3
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	4619      	mov	r1, r3
 8003442:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10f      	bne.n	8003468 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68da      	ldr	r2, [r3, #12]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003456:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68da      	ldr	r2, [r3, #12]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003466:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003468:	2300      	movs	r3, #0
 800346a:	e000      	b.n	800346e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800346c:	2302      	movs	r3, #2
  }
}
 800346e:	4618      	mov	r0, r3
 8003470:	3714      	adds	r7, #20
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b082      	sub	sp, #8
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68da      	ldr	r2, [r3, #12]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003490:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2220      	movs	r2, #32
 8003496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7ff fec8 	bl	8003230 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b08c      	sub	sp, #48	; 0x30
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b22      	cmp	r3, #34	; 0x22
 80034bc:	f040 80ab 	bne.w	8003616 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034c8:	d117      	bne.n	80034fa <UART_Receive_IT+0x50>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d113      	bne.n	80034fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80034d2:	2300      	movs	r3, #0
 80034d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034da:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f2:	1c9a      	adds	r2, r3, #2
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	629a      	str	r2, [r3, #40]	; 0x28
 80034f8:	e026      	b.n	8003548 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003500:	2300      	movs	r3, #0
 8003502:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800350c:	d007      	beq.n	800351e <UART_Receive_IT+0x74>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10a      	bne.n	800352c <UART_Receive_IT+0x82>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d106      	bne.n	800352c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	b2da      	uxtb	r2, r3
 8003526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003528:	701a      	strb	r2, [r3, #0]
 800352a:	e008      	b.n	800353e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	b2db      	uxtb	r3, r3
 8003534:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003538:	b2da      	uxtb	r2, r3
 800353a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800353c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003542:	1c5a      	adds	r2, r3, #1
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800354c:	b29b      	uxth	r3, r3
 800354e:	3b01      	subs	r3, #1
 8003550:	b29b      	uxth	r3, r3
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	4619      	mov	r1, r3
 8003556:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003558:	2b00      	cmp	r3, #0
 800355a:	d15a      	bne.n	8003612 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68da      	ldr	r2, [r3, #12]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0220 	bic.w	r2, r2, #32
 800356a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68da      	ldr	r2, [r3, #12]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800357a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	695a      	ldr	r2, [r3, #20]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 0201 	bic.w	r2, r2, #1
 800358a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2220      	movs	r2, #32
 8003590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003598:	2b01      	cmp	r3, #1
 800359a:	d135      	bne.n	8003608 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	330c      	adds	r3, #12
 80035a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	e853 3f00 	ldrex	r3, [r3]
 80035b0:	613b      	str	r3, [r7, #16]
   return(result);
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	f023 0310 	bic.w	r3, r3, #16
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	330c      	adds	r3, #12
 80035c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c2:	623a      	str	r2, [r7, #32]
 80035c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c6:	69f9      	ldr	r1, [r7, #28]
 80035c8:	6a3a      	ldr	r2, [r7, #32]
 80035ca:	e841 2300 	strex	r3, r2, [r1]
 80035ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1e5      	bne.n	80035a2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0310 	and.w	r3, r3, #16
 80035e0:	2b10      	cmp	r3, #16
 80035e2:	d10a      	bne.n	80035fa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035e4:	2300      	movs	r3, #0
 80035e6:	60fb      	str	r3, [r7, #12]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	60fb      	str	r3, [r7, #12]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80035fe:	4619      	mov	r1, r3
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f7ff fe29 	bl	8003258 <HAL_UARTEx_RxEventCallback>
 8003606:	e002      	b.n	800360e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f7fd fae3 	bl	8000bd4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800360e:	2300      	movs	r3, #0
 8003610:	e002      	b.n	8003618 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003612:	2300      	movs	r3, #0
 8003614:	e000      	b.n	8003618 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003616:	2302      	movs	r3, #2
  }
}
 8003618:	4618      	mov	r0, r3
 800361a:	3730      	adds	r7, #48	; 0x30
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003624:	b0c0      	sub	sp, #256	; 0x100
 8003626:	af00      	add	r7, sp, #0
 8003628:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800362c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800363c:	68d9      	ldr	r1, [r3, #12]
 800363e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	ea40 0301 	orr.w	r3, r0, r1
 8003648:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800364a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	431a      	orrs	r2, r3
 8003658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	431a      	orrs	r2, r3
 8003660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	4313      	orrs	r3, r2
 8003668:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800366c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003678:	f021 010c 	bic.w	r1, r1, #12
 800367c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003686:	430b      	orrs	r3, r1
 8003688:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800368a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800369a:	6999      	ldr	r1, [r3, #24]
 800369c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	ea40 0301 	orr.w	r3, r0, r1
 80036a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	4b8f      	ldr	r3, [pc, #572]	; (80038ec <UART_SetConfig+0x2cc>)
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d005      	beq.n	80036c0 <UART_SetConfig+0xa0>
 80036b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	4b8d      	ldr	r3, [pc, #564]	; (80038f0 <UART_SetConfig+0x2d0>)
 80036bc:	429a      	cmp	r2, r3
 80036be:	d104      	bne.n	80036ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036c0:	f7fe fb46 	bl	8001d50 <HAL_RCC_GetPCLK2Freq>
 80036c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80036c8:	e003      	b.n	80036d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80036ca:	f7fe fb2d 	bl	8001d28 <HAL_RCC_GetPCLK1Freq>
 80036ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d6:	69db      	ldr	r3, [r3, #28]
 80036d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036dc:	f040 810c 	bne.w	80038f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036e4:	2200      	movs	r2, #0
 80036e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80036ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80036ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80036f2:	4622      	mov	r2, r4
 80036f4:	462b      	mov	r3, r5
 80036f6:	1891      	adds	r1, r2, r2
 80036f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80036fa:	415b      	adcs	r3, r3
 80036fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003702:	4621      	mov	r1, r4
 8003704:	eb12 0801 	adds.w	r8, r2, r1
 8003708:	4629      	mov	r1, r5
 800370a:	eb43 0901 	adc.w	r9, r3, r1
 800370e:	f04f 0200 	mov.w	r2, #0
 8003712:	f04f 0300 	mov.w	r3, #0
 8003716:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800371a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800371e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003722:	4690      	mov	r8, r2
 8003724:	4699      	mov	r9, r3
 8003726:	4623      	mov	r3, r4
 8003728:	eb18 0303 	adds.w	r3, r8, r3
 800372c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003730:	462b      	mov	r3, r5
 8003732:	eb49 0303 	adc.w	r3, r9, r3
 8003736:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800373a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003746:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800374a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800374e:	460b      	mov	r3, r1
 8003750:	18db      	adds	r3, r3, r3
 8003752:	653b      	str	r3, [r7, #80]	; 0x50
 8003754:	4613      	mov	r3, r2
 8003756:	eb42 0303 	adc.w	r3, r2, r3
 800375a:	657b      	str	r3, [r7, #84]	; 0x54
 800375c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003760:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003764:	f7fc fd34 	bl	80001d0 <__aeabi_uldivmod>
 8003768:	4602      	mov	r2, r0
 800376a:	460b      	mov	r3, r1
 800376c:	4b61      	ldr	r3, [pc, #388]	; (80038f4 <UART_SetConfig+0x2d4>)
 800376e:	fba3 2302 	umull	r2, r3, r3, r2
 8003772:	095b      	lsrs	r3, r3, #5
 8003774:	011c      	lsls	r4, r3, #4
 8003776:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800377a:	2200      	movs	r2, #0
 800377c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003780:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003784:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003788:	4642      	mov	r2, r8
 800378a:	464b      	mov	r3, r9
 800378c:	1891      	adds	r1, r2, r2
 800378e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003790:	415b      	adcs	r3, r3
 8003792:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003794:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003798:	4641      	mov	r1, r8
 800379a:	eb12 0a01 	adds.w	sl, r2, r1
 800379e:	4649      	mov	r1, r9
 80037a0:	eb43 0b01 	adc.w	fp, r3, r1
 80037a4:	f04f 0200 	mov.w	r2, #0
 80037a8:	f04f 0300 	mov.w	r3, #0
 80037ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80037b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80037b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037b8:	4692      	mov	sl, r2
 80037ba:	469b      	mov	fp, r3
 80037bc:	4643      	mov	r3, r8
 80037be:	eb1a 0303 	adds.w	r3, sl, r3
 80037c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80037c6:	464b      	mov	r3, r9
 80037c8:	eb4b 0303 	adc.w	r3, fp, r3
 80037cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80037d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80037dc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80037e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80037e4:	460b      	mov	r3, r1
 80037e6:	18db      	adds	r3, r3, r3
 80037e8:	643b      	str	r3, [r7, #64]	; 0x40
 80037ea:	4613      	mov	r3, r2
 80037ec:	eb42 0303 	adc.w	r3, r2, r3
 80037f0:	647b      	str	r3, [r7, #68]	; 0x44
 80037f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80037f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80037fa:	f7fc fce9 	bl	80001d0 <__aeabi_uldivmod>
 80037fe:	4602      	mov	r2, r0
 8003800:	460b      	mov	r3, r1
 8003802:	4611      	mov	r1, r2
 8003804:	4b3b      	ldr	r3, [pc, #236]	; (80038f4 <UART_SetConfig+0x2d4>)
 8003806:	fba3 2301 	umull	r2, r3, r3, r1
 800380a:	095b      	lsrs	r3, r3, #5
 800380c:	2264      	movs	r2, #100	; 0x64
 800380e:	fb02 f303 	mul.w	r3, r2, r3
 8003812:	1acb      	subs	r3, r1, r3
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800381a:	4b36      	ldr	r3, [pc, #216]	; (80038f4 <UART_SetConfig+0x2d4>)
 800381c:	fba3 2302 	umull	r2, r3, r3, r2
 8003820:	095b      	lsrs	r3, r3, #5
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003828:	441c      	add	r4, r3
 800382a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800382e:	2200      	movs	r2, #0
 8003830:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003834:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003838:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800383c:	4642      	mov	r2, r8
 800383e:	464b      	mov	r3, r9
 8003840:	1891      	adds	r1, r2, r2
 8003842:	63b9      	str	r1, [r7, #56]	; 0x38
 8003844:	415b      	adcs	r3, r3
 8003846:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003848:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800384c:	4641      	mov	r1, r8
 800384e:	1851      	adds	r1, r2, r1
 8003850:	6339      	str	r1, [r7, #48]	; 0x30
 8003852:	4649      	mov	r1, r9
 8003854:	414b      	adcs	r3, r1
 8003856:	637b      	str	r3, [r7, #52]	; 0x34
 8003858:	f04f 0200 	mov.w	r2, #0
 800385c:	f04f 0300 	mov.w	r3, #0
 8003860:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003864:	4659      	mov	r1, fp
 8003866:	00cb      	lsls	r3, r1, #3
 8003868:	4651      	mov	r1, sl
 800386a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800386e:	4651      	mov	r1, sl
 8003870:	00ca      	lsls	r2, r1, #3
 8003872:	4610      	mov	r0, r2
 8003874:	4619      	mov	r1, r3
 8003876:	4603      	mov	r3, r0
 8003878:	4642      	mov	r2, r8
 800387a:	189b      	adds	r3, r3, r2
 800387c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003880:	464b      	mov	r3, r9
 8003882:	460a      	mov	r2, r1
 8003884:	eb42 0303 	adc.w	r3, r2, r3
 8003888:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800388c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003898:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800389c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80038a0:	460b      	mov	r3, r1
 80038a2:	18db      	adds	r3, r3, r3
 80038a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80038a6:	4613      	mov	r3, r2
 80038a8:	eb42 0303 	adc.w	r3, r2, r3
 80038ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80038b6:	f7fc fc8b 	bl	80001d0 <__aeabi_uldivmod>
 80038ba:	4602      	mov	r2, r0
 80038bc:	460b      	mov	r3, r1
 80038be:	4b0d      	ldr	r3, [pc, #52]	; (80038f4 <UART_SetConfig+0x2d4>)
 80038c0:	fba3 1302 	umull	r1, r3, r3, r2
 80038c4:	095b      	lsrs	r3, r3, #5
 80038c6:	2164      	movs	r1, #100	; 0x64
 80038c8:	fb01 f303 	mul.w	r3, r1, r3
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	3332      	adds	r3, #50	; 0x32
 80038d2:	4a08      	ldr	r2, [pc, #32]	; (80038f4 <UART_SetConfig+0x2d4>)
 80038d4:	fba2 2303 	umull	r2, r3, r2, r3
 80038d8:	095b      	lsrs	r3, r3, #5
 80038da:	f003 0207 	and.w	r2, r3, #7
 80038de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4422      	add	r2, r4
 80038e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80038e8:	e105      	b.n	8003af6 <UART_SetConfig+0x4d6>
 80038ea:	bf00      	nop
 80038ec:	40011000 	.word	0x40011000
 80038f0:	40011400 	.word	0x40011400
 80038f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038fc:	2200      	movs	r2, #0
 80038fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003902:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003906:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800390a:	4642      	mov	r2, r8
 800390c:	464b      	mov	r3, r9
 800390e:	1891      	adds	r1, r2, r2
 8003910:	6239      	str	r1, [r7, #32]
 8003912:	415b      	adcs	r3, r3
 8003914:	627b      	str	r3, [r7, #36]	; 0x24
 8003916:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800391a:	4641      	mov	r1, r8
 800391c:	1854      	adds	r4, r2, r1
 800391e:	4649      	mov	r1, r9
 8003920:	eb43 0501 	adc.w	r5, r3, r1
 8003924:	f04f 0200 	mov.w	r2, #0
 8003928:	f04f 0300 	mov.w	r3, #0
 800392c:	00eb      	lsls	r3, r5, #3
 800392e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003932:	00e2      	lsls	r2, r4, #3
 8003934:	4614      	mov	r4, r2
 8003936:	461d      	mov	r5, r3
 8003938:	4643      	mov	r3, r8
 800393a:	18e3      	adds	r3, r4, r3
 800393c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003940:	464b      	mov	r3, r9
 8003942:	eb45 0303 	adc.w	r3, r5, r3
 8003946:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800394a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003956:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800395a:	f04f 0200 	mov.w	r2, #0
 800395e:	f04f 0300 	mov.w	r3, #0
 8003962:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003966:	4629      	mov	r1, r5
 8003968:	008b      	lsls	r3, r1, #2
 800396a:	4621      	mov	r1, r4
 800396c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003970:	4621      	mov	r1, r4
 8003972:	008a      	lsls	r2, r1, #2
 8003974:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003978:	f7fc fc2a 	bl	80001d0 <__aeabi_uldivmod>
 800397c:	4602      	mov	r2, r0
 800397e:	460b      	mov	r3, r1
 8003980:	4b60      	ldr	r3, [pc, #384]	; (8003b04 <UART_SetConfig+0x4e4>)
 8003982:	fba3 2302 	umull	r2, r3, r3, r2
 8003986:	095b      	lsrs	r3, r3, #5
 8003988:	011c      	lsls	r4, r3, #4
 800398a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800398e:	2200      	movs	r2, #0
 8003990:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003994:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003998:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800399c:	4642      	mov	r2, r8
 800399e:	464b      	mov	r3, r9
 80039a0:	1891      	adds	r1, r2, r2
 80039a2:	61b9      	str	r1, [r7, #24]
 80039a4:	415b      	adcs	r3, r3
 80039a6:	61fb      	str	r3, [r7, #28]
 80039a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039ac:	4641      	mov	r1, r8
 80039ae:	1851      	adds	r1, r2, r1
 80039b0:	6139      	str	r1, [r7, #16]
 80039b2:	4649      	mov	r1, r9
 80039b4:	414b      	adcs	r3, r1
 80039b6:	617b      	str	r3, [r7, #20]
 80039b8:	f04f 0200 	mov.w	r2, #0
 80039bc:	f04f 0300 	mov.w	r3, #0
 80039c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039c4:	4659      	mov	r1, fp
 80039c6:	00cb      	lsls	r3, r1, #3
 80039c8:	4651      	mov	r1, sl
 80039ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039ce:	4651      	mov	r1, sl
 80039d0:	00ca      	lsls	r2, r1, #3
 80039d2:	4610      	mov	r0, r2
 80039d4:	4619      	mov	r1, r3
 80039d6:	4603      	mov	r3, r0
 80039d8:	4642      	mov	r2, r8
 80039da:	189b      	adds	r3, r3, r2
 80039dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80039e0:	464b      	mov	r3, r9
 80039e2:	460a      	mov	r2, r1
 80039e4:	eb42 0303 	adc.w	r3, r2, r3
 80039e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80039ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80039f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80039f8:	f04f 0200 	mov.w	r2, #0
 80039fc:	f04f 0300 	mov.w	r3, #0
 8003a00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003a04:	4649      	mov	r1, r9
 8003a06:	008b      	lsls	r3, r1, #2
 8003a08:	4641      	mov	r1, r8
 8003a0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a0e:	4641      	mov	r1, r8
 8003a10:	008a      	lsls	r2, r1, #2
 8003a12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003a16:	f7fc fbdb 	bl	80001d0 <__aeabi_uldivmod>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	4b39      	ldr	r3, [pc, #228]	; (8003b04 <UART_SetConfig+0x4e4>)
 8003a20:	fba3 1302 	umull	r1, r3, r3, r2
 8003a24:	095b      	lsrs	r3, r3, #5
 8003a26:	2164      	movs	r1, #100	; 0x64
 8003a28:	fb01 f303 	mul.w	r3, r1, r3
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	011b      	lsls	r3, r3, #4
 8003a30:	3332      	adds	r3, #50	; 0x32
 8003a32:	4a34      	ldr	r2, [pc, #208]	; (8003b04 <UART_SetConfig+0x4e4>)
 8003a34:	fba2 2303 	umull	r2, r3, r2, r3
 8003a38:	095b      	lsrs	r3, r3, #5
 8003a3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a3e:	441c      	add	r4, r3
 8003a40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a44:	2200      	movs	r2, #0
 8003a46:	673b      	str	r3, [r7, #112]	; 0x70
 8003a48:	677a      	str	r2, [r7, #116]	; 0x74
 8003a4a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003a4e:	4642      	mov	r2, r8
 8003a50:	464b      	mov	r3, r9
 8003a52:	1891      	adds	r1, r2, r2
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	415b      	adcs	r3, r3
 8003a58:	60fb      	str	r3, [r7, #12]
 8003a5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a5e:	4641      	mov	r1, r8
 8003a60:	1851      	adds	r1, r2, r1
 8003a62:	6039      	str	r1, [r7, #0]
 8003a64:	4649      	mov	r1, r9
 8003a66:	414b      	adcs	r3, r1
 8003a68:	607b      	str	r3, [r7, #4]
 8003a6a:	f04f 0200 	mov.w	r2, #0
 8003a6e:	f04f 0300 	mov.w	r3, #0
 8003a72:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003a76:	4659      	mov	r1, fp
 8003a78:	00cb      	lsls	r3, r1, #3
 8003a7a:	4651      	mov	r1, sl
 8003a7c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a80:	4651      	mov	r1, sl
 8003a82:	00ca      	lsls	r2, r1, #3
 8003a84:	4610      	mov	r0, r2
 8003a86:	4619      	mov	r1, r3
 8003a88:	4603      	mov	r3, r0
 8003a8a:	4642      	mov	r2, r8
 8003a8c:	189b      	adds	r3, r3, r2
 8003a8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a90:	464b      	mov	r3, r9
 8003a92:	460a      	mov	r2, r1
 8003a94:	eb42 0303 	adc.w	r3, r2, r3
 8003a98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	663b      	str	r3, [r7, #96]	; 0x60
 8003aa4:	667a      	str	r2, [r7, #100]	; 0x64
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	f04f 0300 	mov.w	r3, #0
 8003aae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003ab2:	4649      	mov	r1, r9
 8003ab4:	008b      	lsls	r3, r1, #2
 8003ab6:	4641      	mov	r1, r8
 8003ab8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003abc:	4641      	mov	r1, r8
 8003abe:	008a      	lsls	r2, r1, #2
 8003ac0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003ac4:	f7fc fb84 	bl	80001d0 <__aeabi_uldivmod>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	460b      	mov	r3, r1
 8003acc:	4b0d      	ldr	r3, [pc, #52]	; (8003b04 <UART_SetConfig+0x4e4>)
 8003ace:	fba3 1302 	umull	r1, r3, r3, r2
 8003ad2:	095b      	lsrs	r3, r3, #5
 8003ad4:	2164      	movs	r1, #100	; 0x64
 8003ad6:	fb01 f303 	mul.w	r3, r1, r3
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	3332      	adds	r3, #50	; 0x32
 8003ae0:	4a08      	ldr	r2, [pc, #32]	; (8003b04 <UART_SetConfig+0x4e4>)
 8003ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae6:	095b      	lsrs	r3, r3, #5
 8003ae8:	f003 020f 	and.w	r2, r3, #15
 8003aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4422      	add	r2, r4
 8003af4:	609a      	str	r2, [r3, #8]
}
 8003af6:	bf00      	nop
 8003af8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003afc:	46bd      	mov	sp, r7
 8003afe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b02:	bf00      	nop
 8003b04:	51eb851f 	.word	0x51eb851f

08003b08 <__NVIC_SetPriority>:
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	4603      	mov	r3, r0
 8003b10:	6039      	str	r1, [r7, #0]
 8003b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	db0a      	blt.n	8003b32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	b2da      	uxtb	r2, r3
 8003b20:	490c      	ldr	r1, [pc, #48]	; (8003b54 <__NVIC_SetPriority+0x4c>)
 8003b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b26:	0112      	lsls	r2, r2, #4
 8003b28:	b2d2      	uxtb	r2, r2
 8003b2a:	440b      	add	r3, r1
 8003b2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003b30:	e00a      	b.n	8003b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	4908      	ldr	r1, [pc, #32]	; (8003b58 <__NVIC_SetPriority+0x50>)
 8003b38:	79fb      	ldrb	r3, [r7, #7]
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	3b04      	subs	r3, #4
 8003b40:	0112      	lsls	r2, r2, #4
 8003b42:	b2d2      	uxtb	r2, r2
 8003b44:	440b      	add	r3, r1
 8003b46:	761a      	strb	r2, [r3, #24]
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr
 8003b54:	e000e100 	.word	0xe000e100
 8003b58:	e000ed00 	.word	0xe000ed00

08003b5c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003b60:	2100      	movs	r1, #0
 8003b62:	f06f 0004 	mvn.w	r0, #4
 8003b66:	f7ff ffcf 	bl	8003b08 <__NVIC_SetPriority>
#endif
}
 8003b6a:	bf00      	nop
 8003b6c:	bd80      	pop	{r7, pc}
	...

08003b70 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b76:	f3ef 8305 	mrs	r3, IPSR
 8003b7a:	603b      	str	r3, [r7, #0]
  return(result);
 8003b7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d003      	beq.n	8003b8a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003b82:	f06f 0305 	mvn.w	r3, #5
 8003b86:	607b      	str	r3, [r7, #4]
 8003b88:	e00c      	b.n	8003ba4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003b8a:	4b0a      	ldr	r3, [pc, #40]	; (8003bb4 <osKernelInitialize+0x44>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d105      	bne.n	8003b9e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003b92:	4b08      	ldr	r3, [pc, #32]	; (8003bb4 <osKernelInitialize+0x44>)
 8003b94:	2201      	movs	r2, #1
 8003b96:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	607b      	str	r3, [r7, #4]
 8003b9c:	e002      	b.n	8003ba4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003ba2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003ba4:	687b      	ldr	r3, [r7, #4]
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	20000118 	.word	0x20000118

08003bb8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bbe:	f3ef 8305 	mrs	r3, IPSR
 8003bc2:	603b      	str	r3, [r7, #0]
  return(result);
 8003bc4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003bca:	f06f 0305 	mvn.w	r3, #5
 8003bce:	607b      	str	r3, [r7, #4]
 8003bd0:	e010      	b.n	8003bf4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003bd2:	4b0b      	ldr	r3, [pc, #44]	; (8003c00 <osKernelStart+0x48>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d109      	bne.n	8003bee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003bda:	f7ff ffbf 	bl	8003b5c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003bde:	4b08      	ldr	r3, [pc, #32]	; (8003c00 <osKernelStart+0x48>)
 8003be0:	2202      	movs	r2, #2
 8003be2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003be4:	f001 fb42 	bl	800526c <vTaskStartScheduler>
      stat = osOK;
 8003be8:	2300      	movs	r3, #0
 8003bea:	607b      	str	r3, [r7, #4]
 8003bec:	e002      	b.n	8003bf4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003bee:	f04f 33ff 	mov.w	r3, #4294967295
 8003bf2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003bf4:	687b      	ldr	r3, [r7, #4]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	20000118 	.word	0x20000118

08003c04 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08e      	sub	sp, #56	; 0x38
 8003c08:	af04      	add	r7, sp, #16
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003c10:	2300      	movs	r3, #0
 8003c12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c14:	f3ef 8305 	mrs	r3, IPSR
 8003c18:	617b      	str	r3, [r7, #20]
  return(result);
 8003c1a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d17e      	bne.n	8003d1e <osThreadNew+0x11a>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d07b      	beq.n	8003d1e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003c26:	2380      	movs	r3, #128	; 0x80
 8003c28:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003c2a:	2318      	movs	r3, #24
 8003c2c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003c32:	f04f 33ff 	mov.w	r3, #4294967295
 8003c36:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d045      	beq.n	8003cca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d002      	beq.n	8003c4c <osThreadNew+0x48>
        name = attr->name;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d002      	beq.n	8003c5a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d008      	beq.n	8003c72 <osThreadNew+0x6e>
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	2b38      	cmp	r3, #56	; 0x38
 8003c64:	d805      	bhi.n	8003c72 <osThreadNew+0x6e>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <osThreadNew+0x72>
        return (NULL);
 8003c72:	2300      	movs	r3, #0
 8003c74:	e054      	b.n	8003d20 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d003      	beq.n	8003c86 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	089b      	lsrs	r3, r3, #2
 8003c84:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00e      	beq.n	8003cac <osThreadNew+0xa8>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	2b5b      	cmp	r3, #91	; 0x5b
 8003c94:	d90a      	bls.n	8003cac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d006      	beq.n	8003cac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d002      	beq.n	8003cac <osThreadNew+0xa8>
        mem = 1;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	61bb      	str	r3, [r7, #24]
 8003caa:	e010      	b.n	8003cce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10c      	bne.n	8003cce <osThreadNew+0xca>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d108      	bne.n	8003cce <osThreadNew+0xca>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d104      	bne.n	8003cce <osThreadNew+0xca>
          mem = 0;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	61bb      	str	r3, [r7, #24]
 8003cc8:	e001      	b.n	8003cce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d110      	bne.n	8003cf6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003cdc:	9202      	str	r2, [sp, #8]
 8003cde:	9301      	str	r3, [sp, #4]
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	6a3a      	ldr	r2, [r7, #32]
 8003ce8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f001 f91c 	bl	8004f28 <xTaskCreateStatic>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	613b      	str	r3, [r7, #16]
 8003cf4:	e013      	b.n	8003d1e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d110      	bne.n	8003d1e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003cfc:	6a3b      	ldr	r3, [r7, #32]
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	f107 0310 	add.w	r3, r7, #16
 8003d04:	9301      	str	r3, [sp, #4]
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f001 f967 	bl	8004fe2 <xTaskCreate>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d001      	beq.n	8003d1e <osThreadNew+0x11a>
            hTask = NULL;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003d1e:	693b      	ldr	r3, [r7, #16]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3728      	adds	r7, #40	; 0x28
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b08a      	sub	sp, #40	; 0x28
 8003d2c:	af02      	add	r7, sp, #8
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8003d34:	2300      	movs	r3, #0
 8003d36:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d38:	f3ef 8305 	mrs	r3, IPSR
 8003d3c:	613b      	str	r3, [r7, #16]
  return(result);
 8003d3e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d175      	bne.n	8003e30 <osSemaphoreNew+0x108>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d072      	beq.n	8003e30 <osSemaphoreNew+0x108>
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d86e      	bhi.n	8003e30 <osSemaphoreNew+0x108>
    mem = -1;
 8003d52:	f04f 33ff 	mov.w	r3, #4294967295
 8003d56:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d015      	beq.n	8003d8a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d006      	beq.n	8003d74 <osSemaphoreNew+0x4c>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	2b4f      	cmp	r3, #79	; 0x4f
 8003d6c:	d902      	bls.n	8003d74 <osSemaphoreNew+0x4c>
        mem = 1;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	61bb      	str	r3, [r7, #24]
 8003d72:	e00c      	b.n	8003d8e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d108      	bne.n	8003d8e <osSemaphoreNew+0x66>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d104      	bne.n	8003d8e <osSemaphoreNew+0x66>
          mem = 0;
 8003d84:	2300      	movs	r3, #0
 8003d86:	61bb      	str	r3, [r7, #24]
 8003d88:	e001      	b.n	8003d8e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d94:	d04c      	beq.n	8003e30 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d128      	bne.n	8003dee <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d10a      	bne.n	8003db8 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	2203      	movs	r2, #3
 8003da8:	9200      	str	r2, [sp, #0]
 8003daa:	2200      	movs	r2, #0
 8003dac:	2100      	movs	r1, #0
 8003dae:	2001      	movs	r0, #1
 8003db0:	f000 fac4 	bl	800433c <xQueueGenericCreateStatic>
 8003db4:	61f8      	str	r0, [r7, #28]
 8003db6:	e005      	b.n	8003dc4 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8003db8:	2203      	movs	r2, #3
 8003dba:	2100      	movs	r1, #0
 8003dbc:	2001      	movs	r0, #1
 8003dbe:	f000 fb35 	bl	800442c <xQueueGenericCreate>
 8003dc2:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d022      	beq.n	8003e10 <osSemaphoreNew+0xe8>
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d01f      	beq.n	8003e10 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	69f8      	ldr	r0, [r7, #28]
 8003dd8:	f000 fbf0 	bl	80045bc <xQueueGenericSend>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d016      	beq.n	8003e10 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8003de2:	69f8      	ldr	r0, [r7, #28]
 8003de4:	f000 fee4 	bl	8004bb0 <vQueueDelete>
            hSemaphore = NULL;
 8003de8:	2300      	movs	r3, #0
 8003dea:	61fb      	str	r3, [r7, #28]
 8003dec:	e010      	b.n	8003e10 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d108      	bne.n	8003e06 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	461a      	mov	r2, r3
 8003dfa:	68b9      	ldr	r1, [r7, #8]
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f000 fb72 	bl	80044e6 <xQueueCreateCountingSemaphoreStatic>
 8003e02:	61f8      	str	r0, [r7, #28]
 8003e04:	e004      	b.n	8003e10 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003e06:	68b9      	ldr	r1, [r7, #8]
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f000 fba3 	bl	8004554 <xQueueCreateCountingSemaphore>
 8003e0e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00c      	beq.n	8003e30 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <osSemaphoreNew+0xfc>
          name = attr->name;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	617b      	str	r3, [r7, #20]
 8003e22:	e001      	b.n	8003e28 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8003e24:	2300      	movs	r3, #0
 8003e26:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003e28:	6979      	ldr	r1, [r7, #20]
 8003e2a:	69f8      	ldr	r0, [r7, #28]
 8003e2c:	f000 fff4 	bl	8004e18 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8003e30:	69fb      	ldr	r3, [r7, #28]
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3720      	adds	r7, #32
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b08a      	sub	sp, #40	; 0x28
 8003e3e:	af02      	add	r7, sp, #8
 8003e40:	60f8      	str	r0, [r7, #12]
 8003e42:	60b9      	str	r1, [r7, #8]
 8003e44:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003e46:	2300      	movs	r3, #0
 8003e48:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e4a:	f3ef 8305 	mrs	r3, IPSR
 8003e4e:	613b      	str	r3, [r7, #16]
  return(result);
 8003e50:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d15f      	bne.n	8003f16 <osMessageQueueNew+0xdc>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d05c      	beq.n	8003f16 <osMessageQueueNew+0xdc>
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d059      	beq.n	8003f16 <osMessageQueueNew+0xdc>
    mem = -1;
 8003e62:	f04f 33ff 	mov.w	r3, #4294967295
 8003e66:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d029      	beq.n	8003ec2 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d012      	beq.n	8003e9c <osMessageQueueNew+0x62>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	2b4f      	cmp	r3, #79	; 0x4f
 8003e7c:	d90e      	bls.n	8003e9c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00a      	beq.n	8003e9c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	695a      	ldr	r2, [r3, #20]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	68b9      	ldr	r1, [r7, #8]
 8003e8e:	fb01 f303 	mul.w	r3, r1, r3
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d302      	bcc.n	8003e9c <osMessageQueueNew+0x62>
        mem = 1;
 8003e96:	2301      	movs	r3, #1
 8003e98:	61bb      	str	r3, [r7, #24]
 8003e9a:	e014      	b.n	8003ec6 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d110      	bne.n	8003ec6 <osMessageQueueNew+0x8c>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10c      	bne.n	8003ec6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d108      	bne.n	8003ec6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	695b      	ldr	r3, [r3, #20]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d104      	bne.n	8003ec6 <osMessageQueueNew+0x8c>
          mem = 0;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	61bb      	str	r3, [r7, #24]
 8003ec0:	e001      	b.n	8003ec6 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d10b      	bne.n	8003ee4 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	691a      	ldr	r2, [r3, #16]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	9100      	str	r1, [sp, #0]
 8003ed8:	68b9      	ldr	r1, [r7, #8]
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f000 fa2e 	bl	800433c <xQueueGenericCreateStatic>
 8003ee0:	61f8      	str	r0, [r7, #28]
 8003ee2:	e008      	b.n	8003ef6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d105      	bne.n	8003ef6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003eea:	2200      	movs	r2, #0
 8003eec:	68b9      	ldr	r1, [r7, #8]
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f000 fa9c 	bl	800442c <xQueueGenericCreate>
 8003ef4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00c      	beq.n	8003f16 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d003      	beq.n	8003f0a <osMessageQueueNew+0xd0>
        name = attr->name;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	617b      	str	r3, [r7, #20]
 8003f08:	e001      	b.n	8003f0e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8003f0e:	6979      	ldr	r1, [r7, #20]
 8003f10:	69f8      	ldr	r0, [r7, #28]
 8003f12:	f000 ff81 	bl	8004e18 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003f16:	69fb      	ldr	r3, [r7, #28]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3720      	adds	r7, #32
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b088      	sub	sp, #32
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	603b      	str	r3, [r7, #0]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003f34:	2300      	movs	r3, #0
 8003f36:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f38:	f3ef 8305 	mrs	r3, IPSR
 8003f3c:	617b      	str	r3, [r7, #20]
  return(result);
 8003f3e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d028      	beq.n	8003f96 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d005      	beq.n	8003f56 <osMessageQueuePut+0x36>
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d002      	beq.n	8003f56 <osMessageQueuePut+0x36>
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8003f56:	f06f 0303 	mvn.w	r3, #3
 8003f5a:	61fb      	str	r3, [r7, #28]
 8003f5c:	e038      	b.n	8003fd0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003f62:	f107 0210 	add.w	r2, r7, #16
 8003f66:	2300      	movs	r3, #0
 8003f68:	68b9      	ldr	r1, [r7, #8]
 8003f6a:	69b8      	ldr	r0, [r7, #24]
 8003f6c:	f000 fc24 	bl	80047b8 <xQueueGenericSendFromISR>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d003      	beq.n	8003f7e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8003f76:	f06f 0302 	mvn.w	r3, #2
 8003f7a:	61fb      	str	r3, [r7, #28]
 8003f7c:	e028      	b.n	8003fd0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d025      	beq.n	8003fd0 <osMessageQueuePut+0xb0>
 8003f84:	4b15      	ldr	r3, [pc, #84]	; (8003fdc <osMessageQueuePut+0xbc>)
 8003f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	f3bf 8f4f 	dsb	sy
 8003f90:	f3bf 8f6f 	isb	sy
 8003f94:	e01c      	b.n	8003fd0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d002      	beq.n	8003fa2 <osMessageQueuePut+0x82>
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d103      	bne.n	8003faa <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8003fa2:	f06f 0303 	mvn.w	r3, #3
 8003fa6:	61fb      	str	r3, [r7, #28]
 8003fa8:	e012      	b.n	8003fd0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003faa:	2300      	movs	r3, #0
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	68b9      	ldr	r1, [r7, #8]
 8003fb0:	69b8      	ldr	r0, [r7, #24]
 8003fb2:	f000 fb03 	bl	80045bc <xQueueGenericSend>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d009      	beq.n	8003fd0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d003      	beq.n	8003fca <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8003fc2:	f06f 0301 	mvn.w	r3, #1
 8003fc6:	61fb      	str	r3, [r7, #28]
 8003fc8:	e002      	b.n	8003fd0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8003fca:	f06f 0302 	mvn.w	r3, #2
 8003fce:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003fd0:	69fb      	ldr	r3, [r7, #28]
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3720      	adds	r7, #32
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	e000ed04 	.word	0xe000ed04

08003fe0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b088      	sub	sp, #32
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
 8003fec:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ff6:	f3ef 8305 	mrs	r3, IPSR
 8003ffa:	617b      	str	r3, [r7, #20]
  return(result);
 8003ffc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d028      	beq.n	8004054 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d005      	beq.n	8004014 <osMessageQueueGet+0x34>
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d002      	beq.n	8004014 <osMessageQueueGet+0x34>
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d003      	beq.n	800401c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8004014:	f06f 0303 	mvn.w	r3, #3
 8004018:	61fb      	str	r3, [r7, #28]
 800401a:	e037      	b.n	800408c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800401c:	2300      	movs	r3, #0
 800401e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004020:	f107 0310 	add.w	r3, r7, #16
 8004024:	461a      	mov	r2, r3
 8004026:	68b9      	ldr	r1, [r7, #8]
 8004028:	69b8      	ldr	r0, [r7, #24]
 800402a:	f000 fd41 	bl	8004ab0 <xQueueReceiveFromISR>
 800402e:	4603      	mov	r3, r0
 8004030:	2b01      	cmp	r3, #1
 8004032:	d003      	beq.n	800403c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8004034:	f06f 0302 	mvn.w	r3, #2
 8004038:	61fb      	str	r3, [r7, #28]
 800403a:	e027      	b.n	800408c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d024      	beq.n	800408c <osMessageQueueGet+0xac>
 8004042:	4b15      	ldr	r3, [pc, #84]	; (8004098 <osMessageQueueGet+0xb8>)
 8004044:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004048:	601a      	str	r2, [r3, #0]
 800404a:	f3bf 8f4f 	dsb	sy
 800404e:	f3bf 8f6f 	isb	sy
 8004052:	e01b      	b.n	800408c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d002      	beq.n	8004060 <osMessageQueueGet+0x80>
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d103      	bne.n	8004068 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004060:	f06f 0303 	mvn.w	r3, #3
 8004064:	61fb      	str	r3, [r7, #28]
 8004066:	e011      	b.n	800408c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004068:	683a      	ldr	r2, [r7, #0]
 800406a:	68b9      	ldr	r1, [r7, #8]
 800406c:	69b8      	ldr	r0, [r7, #24]
 800406e:	f000 fc3f 	bl	80048f0 <xQueueReceive>
 8004072:	4603      	mov	r3, r0
 8004074:	2b01      	cmp	r3, #1
 8004076:	d009      	beq.n	800408c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d003      	beq.n	8004086 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800407e:	f06f 0301 	mvn.w	r3, #1
 8004082:	61fb      	str	r3, [r7, #28]
 8004084:	e002      	b.n	800408c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8004086:	f06f 0302 	mvn.w	r3, #2
 800408a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800408c:	69fb      	ldr	r3, [r7, #28]
}
 800408e:	4618      	mov	r0, r3
 8004090:	3720      	adds	r7, #32
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	e000ed04 	.word	0xe000ed04

0800409c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4a07      	ldr	r2, [pc, #28]	; (80040c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80040ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	4a06      	ldr	r2, [pc, #24]	; (80040cc <vApplicationGetIdleTaskMemory+0x30>)
 80040b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2280      	movs	r2, #128	; 0x80
 80040b8:	601a      	str	r2, [r3, #0]
}
 80040ba:	bf00      	nop
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	2000011c 	.word	0x2000011c
 80040cc:	20000178 	.word	0x20000178

080040d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	4a07      	ldr	r2, [pc, #28]	; (80040fc <vApplicationGetTimerTaskMemory+0x2c>)
 80040e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	4a06      	ldr	r2, [pc, #24]	; (8004100 <vApplicationGetTimerTaskMemory+0x30>)
 80040e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040ee:	601a      	str	r2, [r3, #0]
}
 80040f0:	bf00      	nop
 80040f2:	3714      	adds	r7, #20
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr
 80040fc:	20000378 	.word	0x20000378
 8004100:	200003d4 	.word	0x200003d4

08004104 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f103 0208 	add.w	r2, r3, #8
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f04f 32ff 	mov.w	r2, #4294967295
 800411c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f103 0208 	add.w	r2, r3, #8
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f103 0208 	add.w	r2, r3, #8
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004152:	bf00      	nop
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr

0800415e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800415e:	b480      	push	{r7}
 8004160:	b085      	sub	sp, #20
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
 8004166:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	683a      	ldr	r2, [r7, #0]
 8004188:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	1c5a      	adds	r2, r3, #1
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	601a      	str	r2, [r3, #0]
}
 800419a:	bf00      	nop
 800419c:	3714      	adds	r7, #20
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr

080041a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80041a6:	b480      	push	{r7}
 80041a8:	b085      	sub	sp, #20
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
 80041ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041bc:	d103      	bne.n	80041c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	60fb      	str	r3, [r7, #12]
 80041c4:	e00c      	b.n	80041e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	3308      	adds	r3, #8
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	e002      	b.n	80041d4 <vListInsert+0x2e>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	60fb      	str	r3, [r7, #12]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68ba      	ldr	r2, [r7, #8]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d2f6      	bcs.n	80041ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	601a      	str	r2, [r3, #0]
}
 800420c:	bf00      	nop
 800420e:	3714      	adds	r7, #20
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6892      	ldr	r2, [r2, #8]
 800422e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	6852      	ldr	r2, [r2, #4]
 8004238:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	429a      	cmp	r2, r3
 8004242:	d103      	bne.n	800424c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	1e5a      	subs	r2, r3, #1
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
}
 8004260:	4618      	mov	r0, r3
 8004262:	3714      	adds	r7, #20
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10a      	bne.n	8004296 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004284:	f383 8811 	msr	BASEPRI, r3
 8004288:	f3bf 8f6f 	isb	sy
 800428c:	f3bf 8f4f 	dsb	sy
 8004290:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004292:	bf00      	nop
 8004294:	e7fe      	b.n	8004294 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004296:	f002 f98d 	bl	80065b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a2:	68f9      	ldr	r1, [r7, #12]
 80042a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80042a6:	fb01 f303 	mul.w	r3, r1, r3
 80042aa:	441a      	add	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c6:	3b01      	subs	r3, #1
 80042c8:	68f9      	ldr	r1, [r7, #12]
 80042ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80042cc:	fb01 f303 	mul.w	r3, r1, r3
 80042d0:	441a      	add	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	22ff      	movs	r2, #255	; 0xff
 80042da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	22ff      	movs	r2, #255	; 0xff
 80042e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d114      	bne.n	8004316 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d01a      	beq.n	800432a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	3310      	adds	r3, #16
 80042f8:	4618      	mov	r0, r3
 80042fa:	f001 fa41 	bl	8005780 <xTaskRemoveFromEventList>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d012      	beq.n	800432a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004304:	4b0c      	ldr	r3, [pc, #48]	; (8004338 <xQueueGenericReset+0xcc>)
 8004306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800430a:	601a      	str	r2, [r3, #0]
 800430c:	f3bf 8f4f 	dsb	sy
 8004310:	f3bf 8f6f 	isb	sy
 8004314:	e009      	b.n	800432a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	3310      	adds	r3, #16
 800431a:	4618      	mov	r0, r3
 800431c:	f7ff fef2 	bl	8004104 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	3324      	adds	r3, #36	; 0x24
 8004324:	4618      	mov	r0, r3
 8004326:	f7ff feed 	bl	8004104 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800432a:	f002 f973 	bl	8006614 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800432e:	2301      	movs	r3, #1
}
 8004330:	4618      	mov	r0, r3
 8004332:	3710      	adds	r7, #16
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	e000ed04 	.word	0xe000ed04

0800433c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800433c:	b580      	push	{r7, lr}
 800433e:	b08e      	sub	sp, #56	; 0x38
 8004340:	af02      	add	r7, sp, #8
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
 8004348:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10a      	bne.n	8004366 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004354:	f383 8811 	msr	BASEPRI, r3
 8004358:	f3bf 8f6f 	isb	sy
 800435c:	f3bf 8f4f 	dsb	sy
 8004360:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004362:	bf00      	nop
 8004364:	e7fe      	b.n	8004364 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10a      	bne.n	8004382 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800436c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004370:	f383 8811 	msr	BASEPRI, r3
 8004374:	f3bf 8f6f 	isb	sy
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800437e:	bf00      	nop
 8004380:	e7fe      	b.n	8004380 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d002      	beq.n	800438e <xQueueGenericCreateStatic+0x52>
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <xQueueGenericCreateStatic+0x56>
 800438e:	2301      	movs	r3, #1
 8004390:	e000      	b.n	8004394 <xQueueGenericCreateStatic+0x58>
 8004392:	2300      	movs	r3, #0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10a      	bne.n	80043ae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439c:	f383 8811 	msr	BASEPRI, r3
 80043a0:	f3bf 8f6f 	isb	sy
 80043a4:	f3bf 8f4f 	dsb	sy
 80043a8:	623b      	str	r3, [r7, #32]
}
 80043aa:	bf00      	nop
 80043ac:	e7fe      	b.n	80043ac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d102      	bne.n	80043ba <xQueueGenericCreateStatic+0x7e>
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <xQueueGenericCreateStatic+0x82>
 80043ba:	2301      	movs	r3, #1
 80043bc:	e000      	b.n	80043c0 <xQueueGenericCreateStatic+0x84>
 80043be:	2300      	movs	r3, #0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10a      	bne.n	80043da <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80043c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c8:	f383 8811 	msr	BASEPRI, r3
 80043cc:	f3bf 8f6f 	isb	sy
 80043d0:	f3bf 8f4f 	dsb	sy
 80043d4:	61fb      	str	r3, [r7, #28]
}
 80043d6:	bf00      	nop
 80043d8:	e7fe      	b.n	80043d8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80043da:	2350      	movs	r3, #80	; 0x50
 80043dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	2b50      	cmp	r3, #80	; 0x50
 80043e2:	d00a      	beq.n	80043fa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80043e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e8:	f383 8811 	msr	BASEPRI, r3
 80043ec:	f3bf 8f6f 	isb	sy
 80043f0:	f3bf 8f4f 	dsb	sy
 80043f4:	61bb      	str	r3, [r7, #24]
}
 80043f6:	bf00      	nop
 80043f8:	e7fe      	b.n	80043f8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80043fa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00d      	beq.n	8004422 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004408:	2201      	movs	r2, #1
 800440a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800440e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004414:	9300      	str	r3, [sp, #0]
 8004416:	4613      	mov	r3, r2
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	68b9      	ldr	r1, [r7, #8]
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f000 f83f 	bl	80044a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004424:	4618      	mov	r0, r3
 8004426:	3730      	adds	r7, #48	; 0x30
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800442c:	b580      	push	{r7, lr}
 800442e:	b08a      	sub	sp, #40	; 0x28
 8004430:	af02      	add	r7, sp, #8
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	4613      	mov	r3, r2
 8004438:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10a      	bne.n	8004456 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004444:	f383 8811 	msr	BASEPRI, r3
 8004448:	f3bf 8f6f 	isb	sy
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	613b      	str	r3, [r7, #16]
}
 8004452:	bf00      	nop
 8004454:	e7fe      	b.n	8004454 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	68ba      	ldr	r2, [r7, #8]
 800445a:	fb02 f303 	mul.w	r3, r2, r3
 800445e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	3350      	adds	r3, #80	; 0x50
 8004464:	4618      	mov	r0, r3
 8004466:	f002 f9c7 	bl	80067f8 <pvPortMalloc>
 800446a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d011      	beq.n	8004496 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	3350      	adds	r3, #80	; 0x50
 800447a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004484:	79fa      	ldrb	r2, [r7, #7]
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	9300      	str	r3, [sp, #0]
 800448a:	4613      	mov	r3, r2
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	68b9      	ldr	r1, [r7, #8]
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f000 f805 	bl	80044a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004496:	69bb      	ldr	r3, [r7, #24]
	}
 8004498:	4618      	mov	r0, r3
 800449a:	3720      	adds	r7, #32
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
 80044ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d103      	bne.n	80044bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	601a      	str	r2, [r3, #0]
 80044ba:	e002      	b.n	80044c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	68ba      	ldr	r2, [r7, #8]
 80044cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80044ce:	2101      	movs	r1, #1
 80044d0:	69b8      	ldr	r0, [r7, #24]
 80044d2:	f7ff fecb 	bl	800426c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	78fa      	ldrb	r2, [r7, #3]
 80044da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80044de:	bf00      	nop
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b08a      	sub	sp, #40	; 0x28
 80044ea:	af02      	add	r7, sp, #8
 80044ec:	60f8      	str	r0, [r7, #12]
 80044ee:	60b9      	str	r1, [r7, #8]
 80044f0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d10a      	bne.n	800450e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80044f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fc:	f383 8811 	msr	BASEPRI, r3
 8004500:	f3bf 8f6f 	isb	sy
 8004504:	f3bf 8f4f 	dsb	sy
 8004508:	61bb      	str	r3, [r7, #24]
}
 800450a:	bf00      	nop
 800450c:	e7fe      	b.n	800450c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	429a      	cmp	r2, r3
 8004514:	d90a      	bls.n	800452c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8004516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451a:	f383 8811 	msr	BASEPRI, r3
 800451e:	f3bf 8f6f 	isb	sy
 8004522:	f3bf 8f4f 	dsb	sy
 8004526:	617b      	str	r3, [r7, #20]
}
 8004528:	bf00      	nop
 800452a:	e7fe      	b.n	800452a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800452c:	2302      	movs	r3, #2
 800452e:	9300      	str	r3, [sp, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	2100      	movs	r1, #0
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f7ff ff00 	bl	800433c <xQueueGenericCreateStatic>
 800453c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d002      	beq.n	800454a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	68ba      	ldr	r2, [r7, #8]
 8004548:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800454a:	69fb      	ldr	r3, [r7, #28]
	}
 800454c:	4618      	mov	r0, r3
 800454e:	3720      	adds	r7, #32
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10a      	bne.n	800457a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8004564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004568:	f383 8811 	msr	BASEPRI, r3
 800456c:	f3bf 8f6f 	isb	sy
 8004570:	f3bf 8f4f 	dsb	sy
 8004574:	613b      	str	r3, [r7, #16]
}
 8004576:	bf00      	nop
 8004578:	e7fe      	b.n	8004578 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	429a      	cmp	r2, r3
 8004580:	d90a      	bls.n	8004598 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8004582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004586:	f383 8811 	msr	BASEPRI, r3
 800458a:	f3bf 8f6f 	isb	sy
 800458e:	f3bf 8f4f 	dsb	sy
 8004592:	60fb      	str	r3, [r7, #12]
}
 8004594:	bf00      	nop
 8004596:	e7fe      	b.n	8004596 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004598:	2202      	movs	r2, #2
 800459a:	2100      	movs	r1, #0
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f7ff ff45 	bl	800442c <xQueueGenericCreate>
 80045a2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d002      	beq.n	80045b0 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80045b0:	697b      	ldr	r3, [r7, #20]
	}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3718      	adds	r7, #24
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
	...

080045bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b08e      	sub	sp, #56	; 0x38
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
 80045c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80045ca:	2300      	movs	r3, #0
 80045cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80045d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10a      	bne.n	80045ee <xQueueGenericSend+0x32>
	__asm volatile
 80045d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80045ea:	bf00      	nop
 80045ec:	e7fe      	b.n	80045ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d103      	bne.n	80045fc <xQueueGenericSend+0x40>
 80045f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d101      	bne.n	8004600 <xQueueGenericSend+0x44>
 80045fc:	2301      	movs	r3, #1
 80045fe:	e000      	b.n	8004602 <xQueueGenericSend+0x46>
 8004600:	2300      	movs	r3, #0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10a      	bne.n	800461c <xQueueGenericSend+0x60>
	__asm volatile
 8004606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460a:	f383 8811 	msr	BASEPRI, r3
 800460e:	f3bf 8f6f 	isb	sy
 8004612:	f3bf 8f4f 	dsb	sy
 8004616:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004618:	bf00      	nop
 800461a:	e7fe      	b.n	800461a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	2b02      	cmp	r3, #2
 8004620:	d103      	bne.n	800462a <xQueueGenericSend+0x6e>
 8004622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004626:	2b01      	cmp	r3, #1
 8004628:	d101      	bne.n	800462e <xQueueGenericSend+0x72>
 800462a:	2301      	movs	r3, #1
 800462c:	e000      	b.n	8004630 <xQueueGenericSend+0x74>
 800462e:	2300      	movs	r3, #0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10a      	bne.n	800464a <xQueueGenericSend+0x8e>
	__asm volatile
 8004634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004638:	f383 8811 	msr	BASEPRI, r3
 800463c:	f3bf 8f6f 	isb	sy
 8004640:	f3bf 8f4f 	dsb	sy
 8004644:	623b      	str	r3, [r7, #32]
}
 8004646:	bf00      	nop
 8004648:	e7fe      	b.n	8004648 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800464a:	f001 fa57 	bl	8005afc <xTaskGetSchedulerState>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d102      	bne.n	800465a <xQueueGenericSend+0x9e>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <xQueueGenericSend+0xa2>
 800465a:	2301      	movs	r3, #1
 800465c:	e000      	b.n	8004660 <xQueueGenericSend+0xa4>
 800465e:	2300      	movs	r3, #0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10a      	bne.n	800467a <xQueueGenericSend+0xbe>
	__asm volatile
 8004664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004668:	f383 8811 	msr	BASEPRI, r3
 800466c:	f3bf 8f6f 	isb	sy
 8004670:	f3bf 8f4f 	dsb	sy
 8004674:	61fb      	str	r3, [r7, #28]
}
 8004676:	bf00      	nop
 8004678:	e7fe      	b.n	8004678 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800467a:	f001 ff9b 	bl	80065b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800467e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004680:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004686:	429a      	cmp	r2, r3
 8004688:	d302      	bcc.n	8004690 <xQueueGenericSend+0xd4>
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	2b02      	cmp	r3, #2
 800468e:	d129      	bne.n	80046e4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	68b9      	ldr	r1, [r7, #8]
 8004694:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004696:	f000 faae 	bl	8004bf6 <prvCopyDataToQueue>
 800469a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800469c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d010      	beq.n	80046c6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a6:	3324      	adds	r3, #36	; 0x24
 80046a8:	4618      	mov	r0, r3
 80046aa:	f001 f869 	bl	8005780 <xTaskRemoveFromEventList>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d013      	beq.n	80046dc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80046b4:	4b3f      	ldr	r3, [pc, #252]	; (80047b4 <xQueueGenericSend+0x1f8>)
 80046b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	f3bf 8f6f 	isb	sy
 80046c4:	e00a      	b.n	80046dc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80046c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d007      	beq.n	80046dc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80046cc:	4b39      	ldr	r3, [pc, #228]	; (80047b4 <xQueueGenericSend+0x1f8>)
 80046ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046d2:	601a      	str	r2, [r3, #0]
 80046d4:	f3bf 8f4f 	dsb	sy
 80046d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80046dc:	f001 ff9a 	bl	8006614 <vPortExitCritical>
				return pdPASS;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e063      	b.n	80047ac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d103      	bne.n	80046f2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80046ea:	f001 ff93 	bl	8006614 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80046ee:	2300      	movs	r3, #0
 80046f0:	e05c      	b.n	80047ac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80046f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d106      	bne.n	8004706 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80046f8:	f107 0314 	add.w	r3, r7, #20
 80046fc:	4618      	mov	r0, r3
 80046fe:	f001 f8a3 	bl	8005848 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004702:	2301      	movs	r3, #1
 8004704:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004706:	f001 ff85 	bl	8006614 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800470a:	f000 fe15 	bl	8005338 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800470e:	f001 ff51 	bl	80065b4 <vPortEnterCritical>
 8004712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004714:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004718:	b25b      	sxtb	r3, r3
 800471a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800471e:	d103      	bne.n	8004728 <xQueueGenericSend+0x16c>
 8004720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004722:	2200      	movs	r2, #0
 8004724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800472e:	b25b      	sxtb	r3, r3
 8004730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004734:	d103      	bne.n	800473e <xQueueGenericSend+0x182>
 8004736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004738:	2200      	movs	r2, #0
 800473a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800473e:	f001 ff69 	bl	8006614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004742:	1d3a      	adds	r2, r7, #4
 8004744:	f107 0314 	add.w	r3, r7, #20
 8004748:	4611      	mov	r1, r2
 800474a:	4618      	mov	r0, r3
 800474c:	f001 f892 	bl	8005874 <xTaskCheckForTimeOut>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d124      	bne.n	80047a0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004756:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004758:	f000 fb45 	bl	8004de6 <prvIsQueueFull>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d018      	beq.n	8004794 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004764:	3310      	adds	r3, #16
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	4611      	mov	r1, r2
 800476a:	4618      	mov	r0, r3
 800476c:	f000 ffb8 	bl	80056e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004770:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004772:	f000 fad0 	bl	8004d16 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004776:	f000 fded 	bl	8005354 <xTaskResumeAll>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	f47f af7c 	bne.w	800467a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004782:	4b0c      	ldr	r3, [pc, #48]	; (80047b4 <xQueueGenericSend+0x1f8>)
 8004784:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004788:	601a      	str	r2, [r3, #0]
 800478a:	f3bf 8f4f 	dsb	sy
 800478e:	f3bf 8f6f 	isb	sy
 8004792:	e772      	b.n	800467a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004794:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004796:	f000 fabe 	bl	8004d16 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800479a:	f000 fddb 	bl	8005354 <xTaskResumeAll>
 800479e:	e76c      	b.n	800467a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80047a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047a2:	f000 fab8 	bl	8004d16 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047a6:	f000 fdd5 	bl	8005354 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80047aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3738      	adds	r7, #56	; 0x38
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	e000ed04 	.word	0xe000ed04

080047b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b090      	sub	sp, #64	; 0x40
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
 80047c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80047ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10a      	bne.n	80047e6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80047d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d4:	f383 8811 	msr	BASEPRI, r3
 80047d8:	f3bf 8f6f 	isb	sy
 80047dc:	f3bf 8f4f 	dsb	sy
 80047e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80047e2:	bf00      	nop
 80047e4:	e7fe      	b.n	80047e4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d103      	bne.n	80047f4 <xQueueGenericSendFromISR+0x3c>
 80047ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d101      	bne.n	80047f8 <xQueueGenericSendFromISR+0x40>
 80047f4:	2301      	movs	r3, #1
 80047f6:	e000      	b.n	80047fa <xQueueGenericSendFromISR+0x42>
 80047f8:	2300      	movs	r3, #0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10a      	bne.n	8004814 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80047fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004802:	f383 8811 	msr	BASEPRI, r3
 8004806:	f3bf 8f6f 	isb	sy
 800480a:	f3bf 8f4f 	dsb	sy
 800480e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004810:	bf00      	nop
 8004812:	e7fe      	b.n	8004812 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	2b02      	cmp	r3, #2
 8004818:	d103      	bne.n	8004822 <xQueueGenericSendFromISR+0x6a>
 800481a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800481c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800481e:	2b01      	cmp	r3, #1
 8004820:	d101      	bne.n	8004826 <xQueueGenericSendFromISR+0x6e>
 8004822:	2301      	movs	r3, #1
 8004824:	e000      	b.n	8004828 <xQueueGenericSendFromISR+0x70>
 8004826:	2300      	movs	r3, #0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10a      	bne.n	8004842 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800482c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004830:	f383 8811 	msr	BASEPRI, r3
 8004834:	f3bf 8f6f 	isb	sy
 8004838:	f3bf 8f4f 	dsb	sy
 800483c:	623b      	str	r3, [r7, #32]
}
 800483e:	bf00      	nop
 8004840:	e7fe      	b.n	8004840 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004842:	f001 ff99 	bl	8006778 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004846:	f3ef 8211 	mrs	r2, BASEPRI
 800484a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484e:	f383 8811 	msr	BASEPRI, r3
 8004852:	f3bf 8f6f 	isb	sy
 8004856:	f3bf 8f4f 	dsb	sy
 800485a:	61fa      	str	r2, [r7, #28]
 800485c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800485e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004860:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004864:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800486a:	429a      	cmp	r2, r3
 800486c:	d302      	bcc.n	8004874 <xQueueGenericSendFromISR+0xbc>
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2b02      	cmp	r3, #2
 8004872:	d12f      	bne.n	80048d4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004876:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800487a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800487e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004882:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	68b9      	ldr	r1, [r7, #8]
 8004888:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800488a:	f000 f9b4 	bl	8004bf6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800488e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004896:	d112      	bne.n	80048be <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800489a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489c:	2b00      	cmp	r3, #0
 800489e:	d016      	beq.n	80048ce <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a2:	3324      	adds	r3, #36	; 0x24
 80048a4:	4618      	mov	r0, r3
 80048a6:	f000 ff6b 	bl	8005780 <xTaskRemoveFromEventList>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00e      	beq.n	80048ce <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00b      	beq.n	80048ce <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	601a      	str	r2, [r3, #0]
 80048bc:	e007      	b.n	80048ce <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80048be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80048c2:	3301      	adds	r3, #1
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	b25a      	sxtb	r2, r3
 80048c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80048ce:	2301      	movs	r3, #1
 80048d0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80048d2:	e001      	b.n	80048d8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80048d4:	2300      	movs	r3, #0
 80048d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048da:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80048e2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80048e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3740      	adds	r7, #64	; 0x40
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
	...

080048f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b08c      	sub	sp, #48	; 0x30
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80048fc:	2300      	movs	r3, #0
 80048fe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004906:	2b00      	cmp	r3, #0
 8004908:	d10a      	bne.n	8004920 <xQueueReceive+0x30>
	__asm volatile
 800490a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490e:	f383 8811 	msr	BASEPRI, r3
 8004912:	f3bf 8f6f 	isb	sy
 8004916:	f3bf 8f4f 	dsb	sy
 800491a:	623b      	str	r3, [r7, #32]
}
 800491c:	bf00      	nop
 800491e:	e7fe      	b.n	800491e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d103      	bne.n	800492e <xQueueReceive+0x3e>
 8004926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <xQueueReceive+0x42>
 800492e:	2301      	movs	r3, #1
 8004930:	e000      	b.n	8004934 <xQueueReceive+0x44>
 8004932:	2300      	movs	r3, #0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d10a      	bne.n	800494e <xQueueReceive+0x5e>
	__asm volatile
 8004938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493c:	f383 8811 	msr	BASEPRI, r3
 8004940:	f3bf 8f6f 	isb	sy
 8004944:	f3bf 8f4f 	dsb	sy
 8004948:	61fb      	str	r3, [r7, #28]
}
 800494a:	bf00      	nop
 800494c:	e7fe      	b.n	800494c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800494e:	f001 f8d5 	bl	8005afc <xTaskGetSchedulerState>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d102      	bne.n	800495e <xQueueReceive+0x6e>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <xQueueReceive+0x72>
 800495e:	2301      	movs	r3, #1
 8004960:	e000      	b.n	8004964 <xQueueReceive+0x74>
 8004962:	2300      	movs	r3, #0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d10a      	bne.n	800497e <xQueueReceive+0x8e>
	__asm volatile
 8004968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496c:	f383 8811 	msr	BASEPRI, r3
 8004970:	f3bf 8f6f 	isb	sy
 8004974:	f3bf 8f4f 	dsb	sy
 8004978:	61bb      	str	r3, [r7, #24]
}
 800497a:	bf00      	nop
 800497c:	e7fe      	b.n	800497c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800497e:	f001 fe19 	bl	80065b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004986:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498a:	2b00      	cmp	r3, #0
 800498c:	d01f      	beq.n	80049ce <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800498e:	68b9      	ldr	r1, [r7, #8]
 8004990:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004992:	f000 f99a 	bl	8004cca <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004998:	1e5a      	subs	r2, r3, #1
 800499a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800499e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00f      	beq.n	80049c6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a8:	3310      	adds	r3, #16
 80049aa:	4618      	mov	r0, r3
 80049ac:	f000 fee8 	bl	8005780 <xTaskRemoveFromEventList>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d007      	beq.n	80049c6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80049b6:	4b3d      	ldr	r3, [pc, #244]	; (8004aac <xQueueReceive+0x1bc>)
 80049b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049bc:	601a      	str	r2, [r3, #0]
 80049be:	f3bf 8f4f 	dsb	sy
 80049c2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80049c6:	f001 fe25 	bl	8006614 <vPortExitCritical>
				return pdPASS;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e069      	b.n	8004aa2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d103      	bne.n	80049dc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80049d4:	f001 fe1e 	bl	8006614 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80049d8:	2300      	movs	r3, #0
 80049da:	e062      	b.n	8004aa2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80049dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d106      	bne.n	80049f0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80049e2:	f107 0310 	add.w	r3, r7, #16
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 ff2e 	bl	8005848 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80049ec:	2301      	movs	r3, #1
 80049ee:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80049f0:	f001 fe10 	bl	8006614 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80049f4:	f000 fca0 	bl	8005338 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80049f8:	f001 fddc 	bl	80065b4 <vPortEnterCritical>
 80049fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a02:	b25b      	sxtb	r3, r3
 8004a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a08:	d103      	bne.n	8004a12 <xQueueReceive+0x122>
 8004a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a18:	b25b      	sxtb	r3, r3
 8004a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a1e:	d103      	bne.n	8004a28 <xQueueReceive+0x138>
 8004a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a28:	f001 fdf4 	bl	8006614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a2c:	1d3a      	adds	r2, r7, #4
 8004a2e:	f107 0310 	add.w	r3, r7, #16
 8004a32:	4611      	mov	r1, r2
 8004a34:	4618      	mov	r0, r3
 8004a36:	f000 ff1d 	bl	8005874 <xTaskCheckForTimeOut>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d123      	bne.n	8004a88 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a42:	f000 f9ba 	bl	8004dba <prvIsQueueEmpty>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d017      	beq.n	8004a7c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4e:	3324      	adds	r3, #36	; 0x24
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	4611      	mov	r1, r2
 8004a54:	4618      	mov	r0, r3
 8004a56:	f000 fe43 	bl	80056e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004a5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a5c:	f000 f95b 	bl	8004d16 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004a60:	f000 fc78 	bl	8005354 <xTaskResumeAll>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d189      	bne.n	800497e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004a6a:	4b10      	ldr	r3, [pc, #64]	; (8004aac <xQueueReceive+0x1bc>)
 8004a6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a70:	601a      	str	r2, [r3, #0]
 8004a72:	f3bf 8f4f 	dsb	sy
 8004a76:	f3bf 8f6f 	isb	sy
 8004a7a:	e780      	b.n	800497e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004a7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a7e:	f000 f94a 	bl	8004d16 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a82:	f000 fc67 	bl	8005354 <xTaskResumeAll>
 8004a86:	e77a      	b.n	800497e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004a88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a8a:	f000 f944 	bl	8004d16 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a8e:	f000 fc61 	bl	8005354 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a94:	f000 f991 	bl	8004dba <prvIsQueueEmpty>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	f43f af6f 	beq.w	800497e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004aa0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3730      	adds	r7, #48	; 0x30
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	e000ed04 	.word	0xe000ed04

08004ab0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b08e      	sub	sp, #56	; 0x38
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10a      	bne.n	8004adc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aca:	f383 8811 	msr	BASEPRI, r3
 8004ace:	f3bf 8f6f 	isb	sy
 8004ad2:	f3bf 8f4f 	dsb	sy
 8004ad6:	623b      	str	r3, [r7, #32]
}
 8004ad8:	bf00      	nop
 8004ada:	e7fe      	b.n	8004ada <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d103      	bne.n	8004aea <xQueueReceiveFromISR+0x3a>
 8004ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <xQueueReceiveFromISR+0x3e>
 8004aea:	2301      	movs	r3, #1
 8004aec:	e000      	b.n	8004af0 <xQueueReceiveFromISR+0x40>
 8004aee:	2300      	movs	r3, #0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10a      	bne.n	8004b0a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af8:	f383 8811 	msr	BASEPRI, r3
 8004afc:	f3bf 8f6f 	isb	sy
 8004b00:	f3bf 8f4f 	dsb	sy
 8004b04:	61fb      	str	r3, [r7, #28]
}
 8004b06:	bf00      	nop
 8004b08:	e7fe      	b.n	8004b08 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b0a:	f001 fe35 	bl	8006778 <vPortValidateInterruptPriority>
	__asm volatile
 8004b0e:	f3ef 8211 	mrs	r2, BASEPRI
 8004b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b16:	f383 8811 	msr	BASEPRI, r3
 8004b1a:	f3bf 8f6f 	isb	sy
 8004b1e:	f3bf 8f4f 	dsb	sy
 8004b22:	61ba      	str	r2, [r7, #24]
 8004b24:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004b26:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b28:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d02f      	beq.n	8004b96 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004b40:	68b9      	ldr	r1, [r7, #8]
 8004b42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b44:	f000 f8c1 	bl	8004cca <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4a:	1e5a      	subs	r2, r3, #1
 8004b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004b50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b58:	d112      	bne.n	8004b80 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d016      	beq.n	8004b90 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b64:	3310      	adds	r3, #16
 8004b66:	4618      	mov	r0, r3
 8004b68:	f000 fe0a 	bl	8005780 <xTaskRemoveFromEventList>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00e      	beq.n	8004b90 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00b      	beq.n	8004b90 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	e007      	b.n	8004b90 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004b80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b84:	3301      	adds	r3, #1
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	b25a      	sxtb	r2, r3
 8004b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004b90:	2301      	movs	r3, #1
 8004b92:	637b      	str	r3, [r7, #52]	; 0x34
 8004b94:	e001      	b.n	8004b9a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004b96:	2300      	movs	r3, #0
 8004b98:	637b      	str	r3, [r7, #52]	; 0x34
 8004b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b9c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	f383 8811 	msr	BASEPRI, r3
}
 8004ba4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3738      	adds	r7, #56	; 0x38
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10a      	bne.n	8004bd8 <vQueueDelete+0x28>
	__asm volatile
 8004bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc6:	f383 8811 	msr	BASEPRI, r3
 8004bca:	f3bf 8f6f 	isb	sy
 8004bce:	f3bf 8f4f 	dsb	sy
 8004bd2:	60bb      	str	r3, [r7, #8]
}
 8004bd4:	bf00      	nop
 8004bd6:	e7fe      	b.n	8004bd6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f000 f947 	bl	8004e6c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d102      	bne.n	8004bee <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f001 fed1 	bl	8006990 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004bee:	bf00      	nop
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	b086      	sub	sp, #24
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	60f8      	str	r0, [r7, #12]
 8004bfe:	60b9      	str	r1, [r7, #8]
 8004c00:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004c02:	2300      	movs	r3, #0
 8004c04:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10d      	bne.n	8004c30 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d14d      	bne.n	8004cb8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	4618      	mov	r0, r3
 8004c22:	f000 ff89 	bl	8005b38 <xTaskPriorityDisinherit>
 8004c26:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	609a      	str	r2, [r3, #8]
 8004c2e:	e043      	b.n	8004cb8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d119      	bne.n	8004c6a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6858      	ldr	r0, [r3, #4]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3e:	461a      	mov	r2, r3
 8004c40:	68b9      	ldr	r1, [r7, #8]
 8004c42:	f001 ffe7 	bl	8006c14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	685a      	ldr	r2, [r3, #4]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4e:	441a      	add	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	685a      	ldr	r2, [r3, #4]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d32b      	bcc.n	8004cb8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	605a      	str	r2, [r3, #4]
 8004c68:	e026      	b.n	8004cb8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	68d8      	ldr	r0, [r3, #12]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c72:	461a      	mov	r2, r3
 8004c74:	68b9      	ldr	r1, [r7, #8]
 8004c76:	f001 ffcd 	bl	8006c14 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	68da      	ldr	r2, [r3, #12]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c82:	425b      	negs	r3, r3
 8004c84:	441a      	add	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	68da      	ldr	r2, [r3, #12]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d207      	bcs.n	8004ca6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	689a      	ldr	r2, [r3, #8]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9e:	425b      	negs	r3, r3
 8004ca0:	441a      	add	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d105      	bne.n	8004cb8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d002      	beq.n	8004cb8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	1c5a      	adds	r2, r3, #1
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004cc0:	697b      	ldr	r3, [r7, #20]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3718      	adds	r7, #24
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b082      	sub	sp, #8
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
 8004cd2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d018      	beq.n	8004d0e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	68da      	ldr	r2, [r3, #12]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce4:	441a      	add	r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68da      	ldr	r2, [r3, #12]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d303      	bcc.n	8004cfe <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68d9      	ldr	r1, [r3, #12]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	461a      	mov	r2, r3
 8004d08:	6838      	ldr	r0, [r7, #0]
 8004d0a:	f001 ff83 	bl	8006c14 <memcpy>
	}
}
 8004d0e:	bf00      	nop
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b084      	sub	sp, #16
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004d1e:	f001 fc49 	bl	80065b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d28:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d2a:	e011      	b.n	8004d50 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d012      	beq.n	8004d5a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	3324      	adds	r3, #36	; 0x24
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f000 fd21 	bl	8005780 <xTaskRemoveFromEventList>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d001      	beq.n	8004d48 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004d44:	f000 fdf8 	bl	8005938 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004d48:	7bfb      	ldrb	r3, [r7, #15]
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	dce9      	bgt.n	8004d2c <prvUnlockQueue+0x16>
 8004d58:	e000      	b.n	8004d5c <prvUnlockQueue+0x46>
					break;
 8004d5a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	22ff      	movs	r2, #255	; 0xff
 8004d60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004d64:	f001 fc56 	bl	8006614 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004d68:	f001 fc24 	bl	80065b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d72:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d74:	e011      	b.n	8004d9a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d012      	beq.n	8004da4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	3310      	adds	r3, #16
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 fcfc 	bl	8005780 <xTaskRemoveFromEventList>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d001      	beq.n	8004d92 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004d8e:	f000 fdd3 	bl	8005938 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004d92:	7bbb      	ldrb	r3, [r7, #14]
 8004d94:	3b01      	subs	r3, #1
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	dce9      	bgt.n	8004d76 <prvUnlockQueue+0x60>
 8004da2:	e000      	b.n	8004da6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004da4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	22ff      	movs	r2, #255	; 0xff
 8004daa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004dae:	f001 fc31 	bl	8006614 <vPortExitCritical>
}
 8004db2:	bf00      	nop
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b084      	sub	sp, #16
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004dc2:	f001 fbf7 	bl	80065b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d102      	bne.n	8004dd4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	60fb      	str	r3, [r7, #12]
 8004dd2:	e001      	b.n	8004dd8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004dd8:	f001 fc1c 	bl	8006614 <vPortExitCritical>

	return xReturn;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b084      	sub	sp, #16
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004dee:	f001 fbe1 	bl	80065b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d102      	bne.n	8004e04 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	60fb      	str	r3, [r7, #12]
 8004e02:	e001      	b.n	8004e08 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004e04:	2300      	movs	r3, #0
 8004e06:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e08:	f001 fc04 	bl	8006614 <vPortExitCritical>

	return xReturn;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
	...

08004e18 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e22:	2300      	movs	r3, #0
 8004e24:	60fb      	str	r3, [r7, #12]
 8004e26:	e014      	b.n	8004e52 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004e28:	4a0f      	ldr	r2, [pc, #60]	; (8004e68 <vQueueAddToRegistry+0x50>)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d10b      	bne.n	8004e4c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004e34:	490c      	ldr	r1, [pc, #48]	; (8004e68 <vQueueAddToRegistry+0x50>)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	683a      	ldr	r2, [r7, #0]
 8004e3a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004e3e:	4a0a      	ldr	r2, [pc, #40]	; (8004e68 <vQueueAddToRegistry+0x50>)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	00db      	lsls	r3, r3, #3
 8004e44:	4413      	add	r3, r2
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004e4a:	e006      	b.n	8004e5a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	3301      	adds	r3, #1
 8004e50:	60fb      	str	r3, [r7, #12]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2b07      	cmp	r3, #7
 8004e56:	d9e7      	bls.n	8004e28 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004e58:	bf00      	nop
 8004e5a:	bf00      	nop
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	200007d4 	.word	0x200007d4

08004e6c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e74:	2300      	movs	r3, #0
 8004e76:	60fb      	str	r3, [r7, #12]
 8004e78:	e016      	b.n	8004ea8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004e7a:	4a10      	ldr	r2, [pc, #64]	; (8004ebc <vQueueUnregisterQueue+0x50>)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	00db      	lsls	r3, r3, #3
 8004e80:	4413      	add	r3, r2
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d10b      	bne.n	8004ea2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004e8a:	4a0c      	ldr	r2, [pc, #48]	; (8004ebc <vQueueUnregisterQueue+0x50>)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2100      	movs	r1, #0
 8004e90:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004e94:	4a09      	ldr	r2, [pc, #36]	; (8004ebc <vQueueUnregisterQueue+0x50>)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	00db      	lsls	r3, r3, #3
 8004e9a:	4413      	add	r3, r2
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	605a      	str	r2, [r3, #4]
				break;
 8004ea0:	e006      	b.n	8004eb0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	60fb      	str	r3, [r7, #12]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2b07      	cmp	r3, #7
 8004eac:	d9e5      	bls.n	8004e7a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004eae:	bf00      	nop
 8004eb0:	bf00      	nop
 8004eb2:	3714      	adds	r7, #20
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr
 8004ebc:	200007d4 	.word	0x200007d4

08004ec0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004ed0:	f001 fb70 	bl	80065b4 <vPortEnterCritical>
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004eda:	b25b      	sxtb	r3, r3
 8004edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee0:	d103      	bne.n	8004eea <vQueueWaitForMessageRestricted+0x2a>
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ef0:	b25b      	sxtb	r3, r3
 8004ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef6:	d103      	bne.n	8004f00 <vQueueWaitForMessageRestricted+0x40>
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f00:	f001 fb88 	bl	8006614 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d106      	bne.n	8004f1a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	3324      	adds	r3, #36	; 0x24
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	68b9      	ldr	r1, [r7, #8]
 8004f14:	4618      	mov	r0, r3
 8004f16:	f000 fc07 	bl	8005728 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004f1a:	6978      	ldr	r0, [r7, #20]
 8004f1c:	f7ff fefb 	bl	8004d16 <prvUnlockQueue>
	}
 8004f20:	bf00      	nop
 8004f22:	3718      	adds	r7, #24
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b08e      	sub	sp, #56	; 0x38
 8004f2c:	af04      	add	r7, sp, #16
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
 8004f34:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d10a      	bne.n	8004f52 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f40:	f383 8811 	msr	BASEPRI, r3
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	f3bf 8f4f 	dsb	sy
 8004f4c:	623b      	str	r3, [r7, #32]
}
 8004f4e:	bf00      	nop
 8004f50:	e7fe      	b.n	8004f50 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10a      	bne.n	8004f6e <xTaskCreateStatic+0x46>
	__asm volatile
 8004f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5c:	f383 8811 	msr	BASEPRI, r3
 8004f60:	f3bf 8f6f 	isb	sy
 8004f64:	f3bf 8f4f 	dsb	sy
 8004f68:	61fb      	str	r3, [r7, #28]
}
 8004f6a:	bf00      	nop
 8004f6c:	e7fe      	b.n	8004f6c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004f6e:	235c      	movs	r3, #92	; 0x5c
 8004f70:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	2b5c      	cmp	r3, #92	; 0x5c
 8004f76:	d00a      	beq.n	8004f8e <xTaskCreateStatic+0x66>
	__asm volatile
 8004f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7c:	f383 8811 	msr	BASEPRI, r3
 8004f80:	f3bf 8f6f 	isb	sy
 8004f84:	f3bf 8f4f 	dsb	sy
 8004f88:	61bb      	str	r3, [r7, #24]
}
 8004f8a:	bf00      	nop
 8004f8c:	e7fe      	b.n	8004f8c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004f8e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d01e      	beq.n	8004fd4 <xTaskCreateStatic+0xac>
 8004f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d01b      	beq.n	8004fd4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f9e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fa4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa8:	2202      	movs	r2, #2
 8004faa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004fae:	2300      	movs	r3, #0
 8004fb0:	9303      	str	r3, [sp, #12]
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb4:	9302      	str	r3, [sp, #8]
 8004fb6:	f107 0314 	add.w	r3, r7, #20
 8004fba:	9301      	str	r3, [sp, #4]
 8004fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fbe:	9300      	str	r3, [sp, #0]
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	68b9      	ldr	r1, [r7, #8]
 8004fc6:	68f8      	ldr	r0, [r7, #12]
 8004fc8:	f000 f850 	bl	800506c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004fcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004fce:	f000 f8dd 	bl	800518c <prvAddNewTaskToReadyList>
 8004fd2:	e001      	b.n	8004fd8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004fd8:	697b      	ldr	r3, [r7, #20]
	}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3728      	adds	r7, #40	; 0x28
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b08c      	sub	sp, #48	; 0x30
 8004fe6:	af04      	add	r7, sp, #16
 8004fe8:	60f8      	str	r0, [r7, #12]
 8004fea:	60b9      	str	r1, [r7, #8]
 8004fec:	603b      	str	r3, [r7, #0]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004ff2:	88fb      	ldrh	r3, [r7, #6]
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f001 fbfe 	bl	80067f8 <pvPortMalloc>
 8004ffc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00e      	beq.n	8005022 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005004:	205c      	movs	r0, #92	; 0x5c
 8005006:	f001 fbf7 	bl	80067f8 <pvPortMalloc>
 800500a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d003      	beq.n	800501a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	631a      	str	r2, [r3, #48]	; 0x30
 8005018:	e005      	b.n	8005026 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800501a:	6978      	ldr	r0, [r7, #20]
 800501c:	f001 fcb8 	bl	8006990 <vPortFree>
 8005020:	e001      	b.n	8005026 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005022:	2300      	movs	r3, #0
 8005024:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d017      	beq.n	800505c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005034:	88fa      	ldrh	r2, [r7, #6]
 8005036:	2300      	movs	r3, #0
 8005038:	9303      	str	r3, [sp, #12]
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	9302      	str	r3, [sp, #8]
 800503e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005040:	9301      	str	r3, [sp, #4]
 8005042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	68b9      	ldr	r1, [r7, #8]
 800504a:	68f8      	ldr	r0, [r7, #12]
 800504c:	f000 f80e 	bl	800506c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005050:	69f8      	ldr	r0, [r7, #28]
 8005052:	f000 f89b 	bl	800518c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005056:	2301      	movs	r3, #1
 8005058:	61bb      	str	r3, [r7, #24]
 800505a:	e002      	b.n	8005062 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800505c:	f04f 33ff 	mov.w	r3, #4294967295
 8005060:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005062:	69bb      	ldr	r3, [r7, #24]
	}
 8005064:	4618      	mov	r0, r3
 8005066:	3720      	adds	r7, #32
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b088      	sub	sp, #32
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]
 8005078:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800507a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	461a      	mov	r2, r3
 8005084:	21a5      	movs	r1, #165	; 0xa5
 8005086:	f001 fdd3 	bl	8006c30 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800508a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005094:	3b01      	subs	r3, #1
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4413      	add	r3, r2
 800509a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	f023 0307 	bic.w	r3, r3, #7
 80050a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	f003 0307 	and.w	r3, r3, #7
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00a      	beq.n	80050c4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80050ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b2:	f383 8811 	msr	BASEPRI, r3
 80050b6:	f3bf 8f6f 	isb	sy
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	617b      	str	r3, [r7, #20]
}
 80050c0:	bf00      	nop
 80050c2:	e7fe      	b.n	80050c2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d01f      	beq.n	800510a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050ca:	2300      	movs	r3, #0
 80050cc:	61fb      	str	r3, [r7, #28]
 80050ce:	e012      	b.n	80050f6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80050d0:	68ba      	ldr	r2, [r7, #8]
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	4413      	add	r3, r2
 80050d6:	7819      	ldrb	r1, [r3, #0]
 80050d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	4413      	add	r3, r2
 80050de:	3334      	adds	r3, #52	; 0x34
 80050e0:	460a      	mov	r2, r1
 80050e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	4413      	add	r3, r2
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d006      	beq.n	80050fe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	3301      	adds	r3, #1
 80050f4:	61fb      	str	r3, [r7, #28]
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	2b0f      	cmp	r3, #15
 80050fa:	d9e9      	bls.n	80050d0 <prvInitialiseNewTask+0x64>
 80050fc:	e000      	b.n	8005100 <prvInitialiseNewTask+0x94>
			{
				break;
 80050fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005102:	2200      	movs	r2, #0
 8005104:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005108:	e003      	b.n	8005112 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800510a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510c:	2200      	movs	r2, #0
 800510e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005114:	2b37      	cmp	r3, #55	; 0x37
 8005116:	d901      	bls.n	800511c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005118:	2337      	movs	r3, #55	; 0x37
 800511a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800511c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005120:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005124:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005126:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512a:	2200      	movs	r2, #0
 800512c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800512e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005130:	3304      	adds	r3, #4
 8005132:	4618      	mov	r0, r3
 8005134:	f7ff f806 	bl	8004144 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513a:	3318      	adds	r3, #24
 800513c:	4618      	mov	r0, r3
 800513e:	f7ff f801 	bl	8004144 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005144:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005146:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800514e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005150:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005156:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515a:	2200      	movs	r2, #0
 800515c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800515e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005160:	2200      	movs	r2, #0
 8005162:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	68f9      	ldr	r1, [r7, #12]
 800516a:	69b8      	ldr	r0, [r7, #24]
 800516c:	f001 f8f4 	bl	8006358 <pxPortInitialiseStack>
 8005170:	4602      	mov	r2, r0
 8005172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005174:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005178:	2b00      	cmp	r3, #0
 800517a:	d002      	beq.n	8005182 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800517c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800517e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005180:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005182:	bf00      	nop
 8005184:	3720      	adds	r7, #32
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
	...

0800518c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005194:	f001 fa0e 	bl	80065b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005198:	4b2d      	ldr	r3, [pc, #180]	; (8005250 <prvAddNewTaskToReadyList+0xc4>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	3301      	adds	r3, #1
 800519e:	4a2c      	ldr	r2, [pc, #176]	; (8005250 <prvAddNewTaskToReadyList+0xc4>)
 80051a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80051a2:	4b2c      	ldr	r3, [pc, #176]	; (8005254 <prvAddNewTaskToReadyList+0xc8>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d109      	bne.n	80051be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80051aa:	4a2a      	ldr	r2, [pc, #168]	; (8005254 <prvAddNewTaskToReadyList+0xc8>)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80051b0:	4b27      	ldr	r3, [pc, #156]	; (8005250 <prvAddNewTaskToReadyList+0xc4>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d110      	bne.n	80051da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80051b8:	f000 fbe2 	bl	8005980 <prvInitialiseTaskLists>
 80051bc:	e00d      	b.n	80051da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80051be:	4b26      	ldr	r3, [pc, #152]	; (8005258 <prvAddNewTaskToReadyList+0xcc>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d109      	bne.n	80051da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80051c6:	4b23      	ldr	r3, [pc, #140]	; (8005254 <prvAddNewTaskToReadyList+0xc8>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d802      	bhi.n	80051da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80051d4:	4a1f      	ldr	r2, [pc, #124]	; (8005254 <prvAddNewTaskToReadyList+0xc8>)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80051da:	4b20      	ldr	r3, [pc, #128]	; (800525c <prvAddNewTaskToReadyList+0xd0>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	3301      	adds	r3, #1
 80051e0:	4a1e      	ldr	r2, [pc, #120]	; (800525c <prvAddNewTaskToReadyList+0xd0>)
 80051e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80051e4:	4b1d      	ldr	r3, [pc, #116]	; (800525c <prvAddNewTaskToReadyList+0xd0>)
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051f0:	4b1b      	ldr	r3, [pc, #108]	; (8005260 <prvAddNewTaskToReadyList+0xd4>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d903      	bls.n	8005200 <prvAddNewTaskToReadyList+0x74>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fc:	4a18      	ldr	r2, [pc, #96]	; (8005260 <prvAddNewTaskToReadyList+0xd4>)
 80051fe:	6013      	str	r3, [r2, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005204:	4613      	mov	r3, r2
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	4413      	add	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4a15      	ldr	r2, [pc, #84]	; (8005264 <prvAddNewTaskToReadyList+0xd8>)
 800520e:	441a      	add	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	3304      	adds	r3, #4
 8005214:	4619      	mov	r1, r3
 8005216:	4610      	mov	r0, r2
 8005218:	f7fe ffa1 	bl	800415e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800521c:	f001 f9fa 	bl	8006614 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005220:	4b0d      	ldr	r3, [pc, #52]	; (8005258 <prvAddNewTaskToReadyList+0xcc>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00e      	beq.n	8005246 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005228:	4b0a      	ldr	r3, [pc, #40]	; (8005254 <prvAddNewTaskToReadyList+0xc8>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005232:	429a      	cmp	r2, r3
 8005234:	d207      	bcs.n	8005246 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005236:	4b0c      	ldr	r3, [pc, #48]	; (8005268 <prvAddNewTaskToReadyList+0xdc>)
 8005238:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800523c:	601a      	str	r2, [r3, #0]
 800523e:	f3bf 8f4f 	dsb	sy
 8005242:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005246:	bf00      	nop
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	20000ce8 	.word	0x20000ce8
 8005254:	20000814 	.word	0x20000814
 8005258:	20000cf4 	.word	0x20000cf4
 800525c:	20000d04 	.word	0x20000d04
 8005260:	20000cf0 	.word	0x20000cf0
 8005264:	20000818 	.word	0x20000818
 8005268:	e000ed04 	.word	0xe000ed04

0800526c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b08a      	sub	sp, #40	; 0x28
 8005270:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005272:	2300      	movs	r3, #0
 8005274:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005276:	2300      	movs	r3, #0
 8005278:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800527a:	463a      	mov	r2, r7
 800527c:	1d39      	adds	r1, r7, #4
 800527e:	f107 0308 	add.w	r3, r7, #8
 8005282:	4618      	mov	r0, r3
 8005284:	f7fe ff0a 	bl	800409c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005288:	6839      	ldr	r1, [r7, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	68ba      	ldr	r2, [r7, #8]
 800528e:	9202      	str	r2, [sp, #8]
 8005290:	9301      	str	r3, [sp, #4]
 8005292:	2300      	movs	r3, #0
 8005294:	9300      	str	r3, [sp, #0]
 8005296:	2300      	movs	r3, #0
 8005298:	460a      	mov	r2, r1
 800529a:	4921      	ldr	r1, [pc, #132]	; (8005320 <vTaskStartScheduler+0xb4>)
 800529c:	4821      	ldr	r0, [pc, #132]	; (8005324 <vTaskStartScheduler+0xb8>)
 800529e:	f7ff fe43 	bl	8004f28 <xTaskCreateStatic>
 80052a2:	4603      	mov	r3, r0
 80052a4:	4a20      	ldr	r2, [pc, #128]	; (8005328 <vTaskStartScheduler+0xbc>)
 80052a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80052a8:	4b1f      	ldr	r3, [pc, #124]	; (8005328 <vTaskStartScheduler+0xbc>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d002      	beq.n	80052b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80052b0:	2301      	movs	r3, #1
 80052b2:	617b      	str	r3, [r7, #20]
 80052b4:	e001      	b.n	80052ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80052b6:	2300      	movs	r3, #0
 80052b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d102      	bne.n	80052c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80052c0:	f000 fcfc 	bl	8005cbc <xTimerCreateTimerTask>
 80052c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d116      	bne.n	80052fa <vTaskStartScheduler+0x8e>
	__asm volatile
 80052cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d0:	f383 8811 	msr	BASEPRI, r3
 80052d4:	f3bf 8f6f 	isb	sy
 80052d8:	f3bf 8f4f 	dsb	sy
 80052dc:	613b      	str	r3, [r7, #16]
}
 80052de:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80052e0:	4b12      	ldr	r3, [pc, #72]	; (800532c <vTaskStartScheduler+0xc0>)
 80052e2:	f04f 32ff 	mov.w	r2, #4294967295
 80052e6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80052e8:	4b11      	ldr	r3, [pc, #68]	; (8005330 <vTaskStartScheduler+0xc4>)
 80052ea:	2201      	movs	r2, #1
 80052ec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80052ee:	4b11      	ldr	r3, [pc, #68]	; (8005334 <vTaskStartScheduler+0xc8>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80052f4:	f001 f8bc 	bl	8006470 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80052f8:	e00e      	b.n	8005318 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005300:	d10a      	bne.n	8005318 <vTaskStartScheduler+0xac>
	__asm volatile
 8005302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005306:	f383 8811 	msr	BASEPRI, r3
 800530a:	f3bf 8f6f 	isb	sy
 800530e:	f3bf 8f4f 	dsb	sy
 8005312:	60fb      	str	r3, [r7, #12]
}
 8005314:	bf00      	nop
 8005316:	e7fe      	b.n	8005316 <vTaskStartScheduler+0xaa>
}
 8005318:	bf00      	nop
 800531a:	3718      	adds	r7, #24
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	08006cb0 	.word	0x08006cb0
 8005324:	08005951 	.word	0x08005951
 8005328:	20000d0c 	.word	0x20000d0c
 800532c:	20000d08 	.word	0x20000d08
 8005330:	20000cf4 	.word	0x20000cf4
 8005334:	20000cec 	.word	0x20000cec

08005338 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005338:	b480      	push	{r7}
 800533a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800533c:	4b04      	ldr	r3, [pc, #16]	; (8005350 <vTaskSuspendAll+0x18>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	3301      	adds	r3, #1
 8005342:	4a03      	ldr	r2, [pc, #12]	; (8005350 <vTaskSuspendAll+0x18>)
 8005344:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005346:	bf00      	nop
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr
 8005350:	20000d10 	.word	0x20000d10

08005354 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800535a:	2300      	movs	r3, #0
 800535c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800535e:	2300      	movs	r3, #0
 8005360:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005362:	4b42      	ldr	r3, [pc, #264]	; (800546c <xTaskResumeAll+0x118>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10a      	bne.n	8005380 <xTaskResumeAll+0x2c>
	__asm volatile
 800536a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536e:	f383 8811 	msr	BASEPRI, r3
 8005372:	f3bf 8f6f 	isb	sy
 8005376:	f3bf 8f4f 	dsb	sy
 800537a:	603b      	str	r3, [r7, #0]
}
 800537c:	bf00      	nop
 800537e:	e7fe      	b.n	800537e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005380:	f001 f918 	bl	80065b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005384:	4b39      	ldr	r3, [pc, #228]	; (800546c <xTaskResumeAll+0x118>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	3b01      	subs	r3, #1
 800538a:	4a38      	ldr	r2, [pc, #224]	; (800546c <xTaskResumeAll+0x118>)
 800538c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800538e:	4b37      	ldr	r3, [pc, #220]	; (800546c <xTaskResumeAll+0x118>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d162      	bne.n	800545c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005396:	4b36      	ldr	r3, [pc, #216]	; (8005470 <xTaskResumeAll+0x11c>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d05e      	beq.n	800545c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800539e:	e02f      	b.n	8005400 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053a0:	4b34      	ldr	r3, [pc, #208]	; (8005474 <xTaskResumeAll+0x120>)
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	3318      	adds	r3, #24
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7fe ff33 	bl	8004218 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	3304      	adds	r3, #4
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7fe ff2e 	bl	8004218 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c0:	4b2d      	ldr	r3, [pc, #180]	; (8005478 <xTaskResumeAll+0x124>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d903      	bls.n	80053d0 <xTaskResumeAll+0x7c>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053cc:	4a2a      	ldr	r2, [pc, #168]	; (8005478 <xTaskResumeAll+0x124>)
 80053ce:	6013      	str	r3, [r2, #0]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053d4:	4613      	mov	r3, r2
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	4413      	add	r3, r2
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4a27      	ldr	r2, [pc, #156]	; (800547c <xTaskResumeAll+0x128>)
 80053de:	441a      	add	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	3304      	adds	r3, #4
 80053e4:	4619      	mov	r1, r3
 80053e6:	4610      	mov	r0, r2
 80053e8:	f7fe feb9 	bl	800415e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f0:	4b23      	ldr	r3, [pc, #140]	; (8005480 <xTaskResumeAll+0x12c>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d302      	bcc.n	8005400 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80053fa:	4b22      	ldr	r3, [pc, #136]	; (8005484 <xTaskResumeAll+0x130>)
 80053fc:	2201      	movs	r2, #1
 80053fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005400:	4b1c      	ldr	r3, [pc, #112]	; (8005474 <xTaskResumeAll+0x120>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d1cb      	bne.n	80053a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d001      	beq.n	8005412 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800540e:	f000 fb55 	bl	8005abc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005412:	4b1d      	ldr	r3, [pc, #116]	; (8005488 <xTaskResumeAll+0x134>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d010      	beq.n	8005440 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800541e:	f000 f847 	bl	80054b0 <xTaskIncrementTick>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d002      	beq.n	800542e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005428:	4b16      	ldr	r3, [pc, #88]	; (8005484 <xTaskResumeAll+0x130>)
 800542a:	2201      	movs	r2, #1
 800542c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	3b01      	subs	r3, #1
 8005432:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1f1      	bne.n	800541e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800543a:	4b13      	ldr	r3, [pc, #76]	; (8005488 <xTaskResumeAll+0x134>)
 800543c:	2200      	movs	r2, #0
 800543e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005440:	4b10      	ldr	r3, [pc, #64]	; (8005484 <xTaskResumeAll+0x130>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d009      	beq.n	800545c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005448:	2301      	movs	r3, #1
 800544a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800544c:	4b0f      	ldr	r3, [pc, #60]	; (800548c <xTaskResumeAll+0x138>)
 800544e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005452:	601a      	str	r2, [r3, #0]
 8005454:	f3bf 8f4f 	dsb	sy
 8005458:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800545c:	f001 f8da 	bl	8006614 <vPortExitCritical>

	return xAlreadyYielded;
 8005460:	68bb      	ldr	r3, [r7, #8]
}
 8005462:	4618      	mov	r0, r3
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	20000d10 	.word	0x20000d10
 8005470:	20000ce8 	.word	0x20000ce8
 8005474:	20000ca8 	.word	0x20000ca8
 8005478:	20000cf0 	.word	0x20000cf0
 800547c:	20000818 	.word	0x20000818
 8005480:	20000814 	.word	0x20000814
 8005484:	20000cfc 	.word	0x20000cfc
 8005488:	20000cf8 	.word	0x20000cf8
 800548c:	e000ed04 	.word	0xe000ed04

08005490 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005496:	4b05      	ldr	r3, [pc, #20]	; (80054ac <xTaskGetTickCount+0x1c>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800549c:	687b      	ldr	r3, [r7, #4]
}
 800549e:	4618      	mov	r0, r3
 80054a0:	370c      	adds	r7, #12
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	20000cec 	.word	0x20000cec

080054b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b086      	sub	sp, #24
 80054b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80054b6:	2300      	movs	r3, #0
 80054b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054ba:	4b4f      	ldr	r3, [pc, #316]	; (80055f8 <xTaskIncrementTick+0x148>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	f040 808f 	bne.w	80055e2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80054c4:	4b4d      	ldr	r3, [pc, #308]	; (80055fc <xTaskIncrementTick+0x14c>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	3301      	adds	r3, #1
 80054ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80054cc:	4a4b      	ldr	r2, [pc, #300]	; (80055fc <xTaskIncrementTick+0x14c>)
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d120      	bne.n	800551a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80054d8:	4b49      	ldr	r3, [pc, #292]	; (8005600 <xTaskIncrementTick+0x150>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00a      	beq.n	80054f8 <xTaskIncrementTick+0x48>
	__asm volatile
 80054e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e6:	f383 8811 	msr	BASEPRI, r3
 80054ea:	f3bf 8f6f 	isb	sy
 80054ee:	f3bf 8f4f 	dsb	sy
 80054f2:	603b      	str	r3, [r7, #0]
}
 80054f4:	bf00      	nop
 80054f6:	e7fe      	b.n	80054f6 <xTaskIncrementTick+0x46>
 80054f8:	4b41      	ldr	r3, [pc, #260]	; (8005600 <xTaskIncrementTick+0x150>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	60fb      	str	r3, [r7, #12]
 80054fe:	4b41      	ldr	r3, [pc, #260]	; (8005604 <xTaskIncrementTick+0x154>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a3f      	ldr	r2, [pc, #252]	; (8005600 <xTaskIncrementTick+0x150>)
 8005504:	6013      	str	r3, [r2, #0]
 8005506:	4a3f      	ldr	r2, [pc, #252]	; (8005604 <xTaskIncrementTick+0x154>)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6013      	str	r3, [r2, #0]
 800550c:	4b3e      	ldr	r3, [pc, #248]	; (8005608 <xTaskIncrementTick+0x158>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	3301      	adds	r3, #1
 8005512:	4a3d      	ldr	r2, [pc, #244]	; (8005608 <xTaskIncrementTick+0x158>)
 8005514:	6013      	str	r3, [r2, #0]
 8005516:	f000 fad1 	bl	8005abc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800551a:	4b3c      	ldr	r3, [pc, #240]	; (800560c <xTaskIncrementTick+0x15c>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	429a      	cmp	r2, r3
 8005522:	d349      	bcc.n	80055b8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005524:	4b36      	ldr	r3, [pc, #216]	; (8005600 <xTaskIncrementTick+0x150>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d104      	bne.n	8005538 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800552e:	4b37      	ldr	r3, [pc, #220]	; (800560c <xTaskIncrementTick+0x15c>)
 8005530:	f04f 32ff 	mov.w	r2, #4294967295
 8005534:	601a      	str	r2, [r3, #0]
					break;
 8005536:	e03f      	b.n	80055b8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005538:	4b31      	ldr	r3, [pc, #196]	; (8005600 <xTaskIncrementTick+0x150>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005548:	693a      	ldr	r2, [r7, #16]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	429a      	cmp	r2, r3
 800554e:	d203      	bcs.n	8005558 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005550:	4a2e      	ldr	r2, [pc, #184]	; (800560c <xTaskIncrementTick+0x15c>)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005556:	e02f      	b.n	80055b8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	3304      	adds	r3, #4
 800555c:	4618      	mov	r0, r3
 800555e:	f7fe fe5b 	bl	8004218 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005566:	2b00      	cmp	r3, #0
 8005568:	d004      	beq.n	8005574 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	3318      	adds	r3, #24
 800556e:	4618      	mov	r0, r3
 8005570:	f7fe fe52 	bl	8004218 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005578:	4b25      	ldr	r3, [pc, #148]	; (8005610 <xTaskIncrementTick+0x160>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	429a      	cmp	r2, r3
 800557e:	d903      	bls.n	8005588 <xTaskIncrementTick+0xd8>
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005584:	4a22      	ldr	r2, [pc, #136]	; (8005610 <xTaskIncrementTick+0x160>)
 8005586:	6013      	str	r3, [r2, #0]
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800558c:	4613      	mov	r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	4413      	add	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4a1f      	ldr	r2, [pc, #124]	; (8005614 <xTaskIncrementTick+0x164>)
 8005596:	441a      	add	r2, r3
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	3304      	adds	r3, #4
 800559c:	4619      	mov	r1, r3
 800559e:	4610      	mov	r0, r2
 80055a0:	f7fe fddd 	bl	800415e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055a8:	4b1b      	ldr	r3, [pc, #108]	; (8005618 <xTaskIncrementTick+0x168>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d3b8      	bcc.n	8005524 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80055b2:	2301      	movs	r3, #1
 80055b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055b6:	e7b5      	b.n	8005524 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80055b8:	4b17      	ldr	r3, [pc, #92]	; (8005618 <xTaskIncrementTick+0x168>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055be:	4915      	ldr	r1, [pc, #84]	; (8005614 <xTaskIncrementTick+0x164>)
 80055c0:	4613      	mov	r3, r2
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	4413      	add	r3, r2
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	440b      	add	r3, r1
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d901      	bls.n	80055d4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80055d0:	2301      	movs	r3, #1
 80055d2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80055d4:	4b11      	ldr	r3, [pc, #68]	; (800561c <xTaskIncrementTick+0x16c>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d007      	beq.n	80055ec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80055dc:	2301      	movs	r3, #1
 80055de:	617b      	str	r3, [r7, #20]
 80055e0:	e004      	b.n	80055ec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80055e2:	4b0f      	ldr	r3, [pc, #60]	; (8005620 <xTaskIncrementTick+0x170>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	3301      	adds	r3, #1
 80055e8:	4a0d      	ldr	r2, [pc, #52]	; (8005620 <xTaskIncrementTick+0x170>)
 80055ea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80055ec:	697b      	ldr	r3, [r7, #20]
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3718      	adds	r7, #24
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	20000d10 	.word	0x20000d10
 80055fc:	20000cec 	.word	0x20000cec
 8005600:	20000ca0 	.word	0x20000ca0
 8005604:	20000ca4 	.word	0x20000ca4
 8005608:	20000d00 	.word	0x20000d00
 800560c:	20000d08 	.word	0x20000d08
 8005610:	20000cf0 	.word	0x20000cf0
 8005614:	20000818 	.word	0x20000818
 8005618:	20000814 	.word	0x20000814
 800561c:	20000cfc 	.word	0x20000cfc
 8005620:	20000cf8 	.word	0x20000cf8

08005624 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800562a:	4b28      	ldr	r3, [pc, #160]	; (80056cc <vTaskSwitchContext+0xa8>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005632:	4b27      	ldr	r3, [pc, #156]	; (80056d0 <vTaskSwitchContext+0xac>)
 8005634:	2201      	movs	r2, #1
 8005636:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005638:	e041      	b.n	80056be <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800563a:	4b25      	ldr	r3, [pc, #148]	; (80056d0 <vTaskSwitchContext+0xac>)
 800563c:	2200      	movs	r2, #0
 800563e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005640:	4b24      	ldr	r3, [pc, #144]	; (80056d4 <vTaskSwitchContext+0xb0>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	60fb      	str	r3, [r7, #12]
 8005646:	e010      	b.n	800566a <vTaskSwitchContext+0x46>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d10a      	bne.n	8005664 <vTaskSwitchContext+0x40>
	__asm volatile
 800564e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005652:	f383 8811 	msr	BASEPRI, r3
 8005656:	f3bf 8f6f 	isb	sy
 800565a:	f3bf 8f4f 	dsb	sy
 800565e:	607b      	str	r3, [r7, #4]
}
 8005660:	bf00      	nop
 8005662:	e7fe      	b.n	8005662 <vTaskSwitchContext+0x3e>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	3b01      	subs	r3, #1
 8005668:	60fb      	str	r3, [r7, #12]
 800566a:	491b      	ldr	r1, [pc, #108]	; (80056d8 <vTaskSwitchContext+0xb4>)
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	4613      	mov	r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4413      	add	r3, r2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	440b      	add	r3, r1
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d0e4      	beq.n	8005648 <vTaskSwitchContext+0x24>
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	4613      	mov	r3, r2
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	4413      	add	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	4a13      	ldr	r2, [pc, #76]	; (80056d8 <vTaskSwitchContext+0xb4>)
 800568a:	4413      	add	r3, r2
 800568c:	60bb      	str	r3, [r7, #8]
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	685a      	ldr	r2, [r3, #4]
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	605a      	str	r2, [r3, #4]
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	685a      	ldr	r2, [r3, #4]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	3308      	adds	r3, #8
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d104      	bne.n	80056ae <vTaskSwitchContext+0x8a>
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	685a      	ldr	r2, [r3, #4]
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	605a      	str	r2, [r3, #4]
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	4a09      	ldr	r2, [pc, #36]	; (80056dc <vTaskSwitchContext+0xb8>)
 80056b6:	6013      	str	r3, [r2, #0]
 80056b8:	4a06      	ldr	r2, [pc, #24]	; (80056d4 <vTaskSwitchContext+0xb0>)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6013      	str	r3, [r2, #0]
}
 80056be:	bf00      	nop
 80056c0:	3714      	adds	r7, #20
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	20000d10 	.word	0x20000d10
 80056d0:	20000cfc 	.word	0x20000cfc
 80056d4:	20000cf0 	.word	0x20000cf0
 80056d8:	20000818 	.word	0x20000818
 80056dc:	20000814 	.word	0x20000814

080056e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10a      	bne.n	8005706 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80056f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f4:	f383 8811 	msr	BASEPRI, r3
 80056f8:	f3bf 8f6f 	isb	sy
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	60fb      	str	r3, [r7, #12]
}
 8005702:	bf00      	nop
 8005704:	e7fe      	b.n	8005704 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005706:	4b07      	ldr	r3, [pc, #28]	; (8005724 <vTaskPlaceOnEventList+0x44>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	3318      	adds	r3, #24
 800570c:	4619      	mov	r1, r3
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f7fe fd49 	bl	80041a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005714:	2101      	movs	r1, #1
 8005716:	6838      	ldr	r0, [r7, #0]
 8005718:	f000 fa7c 	bl	8005c14 <prvAddCurrentTaskToDelayedList>
}
 800571c:	bf00      	nop
 800571e:	3710      	adds	r7, #16
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	20000814 	.word	0x20000814

08005728 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005728:	b580      	push	{r7, lr}
 800572a:	b086      	sub	sp, #24
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d10a      	bne.n	8005750 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800573a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573e:	f383 8811 	msr	BASEPRI, r3
 8005742:	f3bf 8f6f 	isb	sy
 8005746:	f3bf 8f4f 	dsb	sy
 800574a:	617b      	str	r3, [r7, #20]
}
 800574c:	bf00      	nop
 800574e:	e7fe      	b.n	800574e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005750:	4b0a      	ldr	r3, [pc, #40]	; (800577c <vTaskPlaceOnEventListRestricted+0x54>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	3318      	adds	r3, #24
 8005756:	4619      	mov	r1, r3
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f7fe fd00 	bl	800415e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d002      	beq.n	800576a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005764:	f04f 33ff 	mov.w	r3, #4294967295
 8005768:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800576a:	6879      	ldr	r1, [r7, #4]
 800576c:	68b8      	ldr	r0, [r7, #8]
 800576e:	f000 fa51 	bl	8005c14 <prvAddCurrentTaskToDelayedList>
	}
 8005772:	bf00      	nop
 8005774:	3718      	adds	r7, #24
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	20000814 	.word	0x20000814

08005780 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b086      	sub	sp, #24
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10a      	bne.n	80057ac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579a:	f383 8811 	msr	BASEPRI, r3
 800579e:	f3bf 8f6f 	isb	sy
 80057a2:	f3bf 8f4f 	dsb	sy
 80057a6:	60fb      	str	r3, [r7, #12]
}
 80057a8:	bf00      	nop
 80057aa:	e7fe      	b.n	80057aa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	3318      	adds	r3, #24
 80057b0:	4618      	mov	r0, r3
 80057b2:	f7fe fd31 	bl	8004218 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057b6:	4b1e      	ldr	r3, [pc, #120]	; (8005830 <xTaskRemoveFromEventList+0xb0>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d11d      	bne.n	80057fa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	3304      	adds	r3, #4
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7fe fd28 	bl	8004218 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057cc:	4b19      	ldr	r3, [pc, #100]	; (8005834 <xTaskRemoveFromEventList+0xb4>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d903      	bls.n	80057dc <xTaskRemoveFromEventList+0x5c>
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d8:	4a16      	ldr	r2, [pc, #88]	; (8005834 <xTaskRemoveFromEventList+0xb4>)
 80057da:	6013      	str	r3, [r2, #0]
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e0:	4613      	mov	r3, r2
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	4413      	add	r3, r2
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4a13      	ldr	r2, [pc, #76]	; (8005838 <xTaskRemoveFromEventList+0xb8>)
 80057ea:	441a      	add	r2, r3
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	3304      	adds	r3, #4
 80057f0:	4619      	mov	r1, r3
 80057f2:	4610      	mov	r0, r2
 80057f4:	f7fe fcb3 	bl	800415e <vListInsertEnd>
 80057f8:	e005      	b.n	8005806 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	3318      	adds	r3, #24
 80057fe:	4619      	mov	r1, r3
 8005800:	480e      	ldr	r0, [pc, #56]	; (800583c <xTaskRemoveFromEventList+0xbc>)
 8005802:	f7fe fcac 	bl	800415e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800580a:	4b0d      	ldr	r3, [pc, #52]	; (8005840 <xTaskRemoveFromEventList+0xc0>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005810:	429a      	cmp	r2, r3
 8005812:	d905      	bls.n	8005820 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005814:	2301      	movs	r3, #1
 8005816:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005818:	4b0a      	ldr	r3, [pc, #40]	; (8005844 <xTaskRemoveFromEventList+0xc4>)
 800581a:	2201      	movs	r2, #1
 800581c:	601a      	str	r2, [r3, #0]
 800581e:	e001      	b.n	8005824 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005820:	2300      	movs	r3, #0
 8005822:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005824:	697b      	ldr	r3, [r7, #20]
}
 8005826:	4618      	mov	r0, r3
 8005828:	3718      	adds	r7, #24
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	20000d10 	.word	0x20000d10
 8005834:	20000cf0 	.word	0x20000cf0
 8005838:	20000818 	.word	0x20000818
 800583c:	20000ca8 	.word	0x20000ca8
 8005840:	20000814 	.word	0x20000814
 8005844:	20000cfc 	.word	0x20000cfc

08005848 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005850:	4b06      	ldr	r3, [pc, #24]	; (800586c <vTaskInternalSetTimeOutState+0x24>)
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005858:	4b05      	ldr	r3, [pc, #20]	; (8005870 <vTaskInternalSetTimeOutState+0x28>)
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	605a      	str	r2, [r3, #4]
}
 8005860:	bf00      	nop
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr
 800586c:	20000d00 	.word	0x20000d00
 8005870:	20000cec 	.word	0x20000cec

08005874 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b088      	sub	sp, #32
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10a      	bne.n	800589a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005888:	f383 8811 	msr	BASEPRI, r3
 800588c:	f3bf 8f6f 	isb	sy
 8005890:	f3bf 8f4f 	dsb	sy
 8005894:	613b      	str	r3, [r7, #16]
}
 8005896:	bf00      	nop
 8005898:	e7fe      	b.n	8005898 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10a      	bne.n	80058b6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80058a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a4:	f383 8811 	msr	BASEPRI, r3
 80058a8:	f3bf 8f6f 	isb	sy
 80058ac:	f3bf 8f4f 	dsb	sy
 80058b0:	60fb      	str	r3, [r7, #12]
}
 80058b2:	bf00      	nop
 80058b4:	e7fe      	b.n	80058b4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80058b6:	f000 fe7d 	bl	80065b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80058ba:	4b1d      	ldr	r3, [pc, #116]	; (8005930 <xTaskCheckForTimeOut+0xbc>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	69ba      	ldr	r2, [r7, #24]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d2:	d102      	bne.n	80058da <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80058d4:	2300      	movs	r3, #0
 80058d6:	61fb      	str	r3, [r7, #28]
 80058d8:	e023      	b.n	8005922 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	4b15      	ldr	r3, [pc, #84]	; (8005934 <xTaskCheckForTimeOut+0xc0>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d007      	beq.n	80058f6 <xTaskCheckForTimeOut+0x82>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	69ba      	ldr	r2, [r7, #24]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d302      	bcc.n	80058f6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80058f0:	2301      	movs	r3, #1
 80058f2:	61fb      	str	r3, [r7, #28]
 80058f4:	e015      	b.n	8005922 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d20b      	bcs.n	8005918 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	1ad2      	subs	r2, r2, r3
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f7ff ff9b 	bl	8005848 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005912:	2300      	movs	r3, #0
 8005914:	61fb      	str	r3, [r7, #28]
 8005916:	e004      	b.n	8005922 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	2200      	movs	r2, #0
 800591c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800591e:	2301      	movs	r3, #1
 8005920:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005922:	f000 fe77 	bl	8006614 <vPortExitCritical>

	return xReturn;
 8005926:	69fb      	ldr	r3, [r7, #28]
}
 8005928:	4618      	mov	r0, r3
 800592a:	3720      	adds	r7, #32
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	20000cec 	.word	0x20000cec
 8005934:	20000d00 	.word	0x20000d00

08005938 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005938:	b480      	push	{r7}
 800593a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800593c:	4b03      	ldr	r3, [pc, #12]	; (800594c <vTaskMissedYield+0x14>)
 800593e:	2201      	movs	r2, #1
 8005940:	601a      	str	r2, [r3, #0]
}
 8005942:	bf00      	nop
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr
 800594c:	20000cfc 	.word	0x20000cfc

08005950 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005958:	f000 f852 	bl	8005a00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800595c:	4b06      	ldr	r3, [pc, #24]	; (8005978 <prvIdleTask+0x28>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d9f9      	bls.n	8005958 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005964:	4b05      	ldr	r3, [pc, #20]	; (800597c <prvIdleTask+0x2c>)
 8005966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800596a:	601a      	str	r2, [r3, #0]
 800596c:	f3bf 8f4f 	dsb	sy
 8005970:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005974:	e7f0      	b.n	8005958 <prvIdleTask+0x8>
 8005976:	bf00      	nop
 8005978:	20000818 	.word	0x20000818
 800597c:	e000ed04 	.word	0xe000ed04

08005980 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005986:	2300      	movs	r3, #0
 8005988:	607b      	str	r3, [r7, #4]
 800598a:	e00c      	b.n	80059a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	4613      	mov	r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	4413      	add	r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	4a12      	ldr	r2, [pc, #72]	; (80059e0 <prvInitialiseTaskLists+0x60>)
 8005998:	4413      	add	r3, r2
 800599a:	4618      	mov	r0, r3
 800599c:	f7fe fbb2 	bl	8004104 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	3301      	adds	r3, #1
 80059a4:	607b      	str	r3, [r7, #4]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2b37      	cmp	r3, #55	; 0x37
 80059aa:	d9ef      	bls.n	800598c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80059ac:	480d      	ldr	r0, [pc, #52]	; (80059e4 <prvInitialiseTaskLists+0x64>)
 80059ae:	f7fe fba9 	bl	8004104 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80059b2:	480d      	ldr	r0, [pc, #52]	; (80059e8 <prvInitialiseTaskLists+0x68>)
 80059b4:	f7fe fba6 	bl	8004104 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80059b8:	480c      	ldr	r0, [pc, #48]	; (80059ec <prvInitialiseTaskLists+0x6c>)
 80059ba:	f7fe fba3 	bl	8004104 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80059be:	480c      	ldr	r0, [pc, #48]	; (80059f0 <prvInitialiseTaskLists+0x70>)
 80059c0:	f7fe fba0 	bl	8004104 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80059c4:	480b      	ldr	r0, [pc, #44]	; (80059f4 <prvInitialiseTaskLists+0x74>)
 80059c6:	f7fe fb9d 	bl	8004104 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80059ca:	4b0b      	ldr	r3, [pc, #44]	; (80059f8 <prvInitialiseTaskLists+0x78>)
 80059cc:	4a05      	ldr	r2, [pc, #20]	; (80059e4 <prvInitialiseTaskLists+0x64>)
 80059ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80059d0:	4b0a      	ldr	r3, [pc, #40]	; (80059fc <prvInitialiseTaskLists+0x7c>)
 80059d2:	4a05      	ldr	r2, [pc, #20]	; (80059e8 <prvInitialiseTaskLists+0x68>)
 80059d4:	601a      	str	r2, [r3, #0]
}
 80059d6:	bf00      	nop
 80059d8:	3708      	adds	r7, #8
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	20000818 	.word	0x20000818
 80059e4:	20000c78 	.word	0x20000c78
 80059e8:	20000c8c 	.word	0x20000c8c
 80059ec:	20000ca8 	.word	0x20000ca8
 80059f0:	20000cbc 	.word	0x20000cbc
 80059f4:	20000cd4 	.word	0x20000cd4
 80059f8:	20000ca0 	.word	0x20000ca0
 80059fc:	20000ca4 	.word	0x20000ca4

08005a00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a06:	e019      	b.n	8005a3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a08:	f000 fdd4 	bl	80065b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a0c:	4b10      	ldr	r3, [pc, #64]	; (8005a50 <prvCheckTasksWaitingTermination+0x50>)
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	3304      	adds	r3, #4
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f7fe fbfd 	bl	8004218 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a1e:	4b0d      	ldr	r3, [pc, #52]	; (8005a54 <prvCheckTasksWaitingTermination+0x54>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	3b01      	subs	r3, #1
 8005a24:	4a0b      	ldr	r2, [pc, #44]	; (8005a54 <prvCheckTasksWaitingTermination+0x54>)
 8005a26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a28:	4b0b      	ldr	r3, [pc, #44]	; (8005a58 <prvCheckTasksWaitingTermination+0x58>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	4a0a      	ldr	r2, [pc, #40]	; (8005a58 <prvCheckTasksWaitingTermination+0x58>)
 8005a30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a32:	f000 fdef 	bl	8006614 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f810 	bl	8005a5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a3c:	4b06      	ldr	r3, [pc, #24]	; (8005a58 <prvCheckTasksWaitingTermination+0x58>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d1e1      	bne.n	8005a08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a44:	bf00      	nop
 8005a46:	bf00      	nop
 8005a48:	3708      	adds	r7, #8
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	20000cbc 	.word	0x20000cbc
 8005a54:	20000ce8 	.word	0x20000ce8
 8005a58:	20000cd0 	.word	0x20000cd0

08005a5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d108      	bne.n	8005a80 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a72:	4618      	mov	r0, r3
 8005a74:	f000 ff8c 	bl	8006990 <vPortFree>
				vPortFree( pxTCB );
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 ff89 	bl	8006990 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a7e:	e018      	b.n	8005ab2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d103      	bne.n	8005a92 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 ff80 	bl	8006990 <vPortFree>
	}
 8005a90:	e00f      	b.n	8005ab2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d00a      	beq.n	8005ab2 <prvDeleteTCB+0x56>
	__asm volatile
 8005a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa0:	f383 8811 	msr	BASEPRI, r3
 8005aa4:	f3bf 8f6f 	isb	sy
 8005aa8:	f3bf 8f4f 	dsb	sy
 8005aac:	60fb      	str	r3, [r7, #12]
}
 8005aae:	bf00      	nop
 8005ab0:	e7fe      	b.n	8005ab0 <prvDeleteTCB+0x54>
	}
 8005ab2:	bf00      	nop
 8005ab4:	3710      	adds	r7, #16
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
	...

08005abc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ac2:	4b0c      	ldr	r3, [pc, #48]	; (8005af4 <prvResetNextTaskUnblockTime+0x38>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d104      	bne.n	8005ad6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005acc:	4b0a      	ldr	r3, [pc, #40]	; (8005af8 <prvResetNextTaskUnblockTime+0x3c>)
 8005ace:	f04f 32ff 	mov.w	r2, #4294967295
 8005ad2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ad4:	e008      	b.n	8005ae8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ad6:	4b07      	ldr	r3, [pc, #28]	; (8005af4 <prvResetNextTaskUnblockTime+0x38>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	4a04      	ldr	r2, [pc, #16]	; (8005af8 <prvResetNextTaskUnblockTime+0x3c>)
 8005ae6:	6013      	str	r3, [r2, #0]
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr
 8005af4:	20000ca0 	.word	0x20000ca0
 8005af8:	20000d08 	.word	0x20000d08

08005afc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005b02:	4b0b      	ldr	r3, [pc, #44]	; (8005b30 <xTaskGetSchedulerState+0x34>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d102      	bne.n	8005b10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	607b      	str	r3, [r7, #4]
 8005b0e:	e008      	b.n	8005b22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b10:	4b08      	ldr	r3, [pc, #32]	; (8005b34 <xTaskGetSchedulerState+0x38>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d102      	bne.n	8005b1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005b18:	2302      	movs	r3, #2
 8005b1a:	607b      	str	r3, [r7, #4]
 8005b1c:	e001      	b.n	8005b22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005b22:	687b      	ldr	r3, [r7, #4]
	}
 8005b24:	4618      	mov	r0, r3
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr
 8005b30:	20000cf4 	.word	0x20000cf4
 8005b34:	20000d10 	.word	0x20000d10

08005b38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b086      	sub	sp, #24
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005b44:	2300      	movs	r3, #0
 8005b46:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d056      	beq.n	8005bfc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005b4e:	4b2e      	ldr	r3, [pc, #184]	; (8005c08 <xTaskPriorityDisinherit+0xd0>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d00a      	beq.n	8005b6e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5c:	f383 8811 	msr	BASEPRI, r3
 8005b60:	f3bf 8f6f 	isb	sy
 8005b64:	f3bf 8f4f 	dsb	sy
 8005b68:	60fb      	str	r3, [r7, #12]
}
 8005b6a:	bf00      	nop
 8005b6c:	e7fe      	b.n	8005b6c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d10a      	bne.n	8005b8c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7a:	f383 8811 	msr	BASEPRI, r3
 8005b7e:	f3bf 8f6f 	isb	sy
 8005b82:	f3bf 8f4f 	dsb	sy
 8005b86:	60bb      	str	r3, [r7, #8]
}
 8005b88:	bf00      	nop
 8005b8a:	e7fe      	b.n	8005b8a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b90:	1e5a      	subs	r2, r3, #1
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d02c      	beq.n	8005bfc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d128      	bne.n	8005bfc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	3304      	adds	r3, #4
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7fe fb32 	bl	8004218 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bcc:	4b0f      	ldr	r3, [pc, #60]	; (8005c0c <xTaskPriorityDisinherit+0xd4>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d903      	bls.n	8005bdc <xTaskPriorityDisinherit+0xa4>
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd8:	4a0c      	ldr	r2, [pc, #48]	; (8005c0c <xTaskPriorityDisinherit+0xd4>)
 8005bda:	6013      	str	r3, [r2, #0]
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be0:	4613      	mov	r3, r2
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	4413      	add	r3, r2
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	4a09      	ldr	r2, [pc, #36]	; (8005c10 <xTaskPriorityDisinherit+0xd8>)
 8005bea:	441a      	add	r2, r3
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	3304      	adds	r3, #4
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	4610      	mov	r0, r2
 8005bf4:	f7fe fab3 	bl	800415e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005bfc:	697b      	ldr	r3, [r7, #20]
	}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3718      	adds	r7, #24
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	20000814 	.word	0x20000814
 8005c0c:	20000cf0 	.word	0x20000cf0
 8005c10:	20000818 	.word	0x20000818

08005c14 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c1e:	4b21      	ldr	r3, [pc, #132]	; (8005ca4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c24:	4b20      	ldr	r3, [pc, #128]	; (8005ca8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	3304      	adds	r3, #4
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7fe faf4 	bl	8004218 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c36:	d10a      	bne.n	8005c4e <prvAddCurrentTaskToDelayedList+0x3a>
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d007      	beq.n	8005c4e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c3e:	4b1a      	ldr	r3, [pc, #104]	; (8005ca8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	3304      	adds	r3, #4
 8005c44:	4619      	mov	r1, r3
 8005c46:	4819      	ldr	r0, [pc, #100]	; (8005cac <prvAddCurrentTaskToDelayedList+0x98>)
 8005c48:	f7fe fa89 	bl	800415e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005c4c:	e026      	b.n	8005c9c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4413      	add	r3, r2
 8005c54:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005c56:	4b14      	ldr	r3, [pc, #80]	; (8005ca8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d209      	bcs.n	8005c7a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c66:	4b12      	ldr	r3, [pc, #72]	; (8005cb0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	4b0f      	ldr	r3, [pc, #60]	; (8005ca8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	3304      	adds	r3, #4
 8005c70:	4619      	mov	r1, r3
 8005c72:	4610      	mov	r0, r2
 8005c74:	f7fe fa97 	bl	80041a6 <vListInsert>
}
 8005c78:	e010      	b.n	8005c9c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c7a:	4b0e      	ldr	r3, [pc, #56]	; (8005cb4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	4b0a      	ldr	r3, [pc, #40]	; (8005ca8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	3304      	adds	r3, #4
 8005c84:	4619      	mov	r1, r3
 8005c86:	4610      	mov	r0, r2
 8005c88:	f7fe fa8d 	bl	80041a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005c8c:	4b0a      	ldr	r3, [pc, #40]	; (8005cb8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d202      	bcs.n	8005c9c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005c96:	4a08      	ldr	r2, [pc, #32]	; (8005cb8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	6013      	str	r3, [r2, #0]
}
 8005c9c:	bf00      	nop
 8005c9e:	3710      	adds	r7, #16
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	20000cec 	.word	0x20000cec
 8005ca8:	20000814 	.word	0x20000814
 8005cac:	20000cd4 	.word	0x20000cd4
 8005cb0:	20000ca4 	.word	0x20000ca4
 8005cb4:	20000ca0 	.word	0x20000ca0
 8005cb8:	20000d08 	.word	0x20000d08

08005cbc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b08a      	sub	sp, #40	; 0x28
 8005cc0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005cc6:	f000 fb07 	bl	80062d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005cca:	4b1c      	ldr	r3, [pc, #112]	; (8005d3c <xTimerCreateTimerTask+0x80>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d021      	beq.n	8005d16 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005cda:	1d3a      	adds	r2, r7, #4
 8005cdc:	f107 0108 	add.w	r1, r7, #8
 8005ce0:	f107 030c 	add.w	r3, r7, #12
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f7fe f9f3 	bl	80040d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005cea:	6879      	ldr	r1, [r7, #4]
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	9202      	str	r2, [sp, #8]
 8005cf2:	9301      	str	r3, [sp, #4]
 8005cf4:	2302      	movs	r3, #2
 8005cf6:	9300      	str	r3, [sp, #0]
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	460a      	mov	r2, r1
 8005cfc:	4910      	ldr	r1, [pc, #64]	; (8005d40 <xTimerCreateTimerTask+0x84>)
 8005cfe:	4811      	ldr	r0, [pc, #68]	; (8005d44 <xTimerCreateTimerTask+0x88>)
 8005d00:	f7ff f912 	bl	8004f28 <xTaskCreateStatic>
 8005d04:	4603      	mov	r3, r0
 8005d06:	4a10      	ldr	r2, [pc, #64]	; (8005d48 <xTimerCreateTimerTask+0x8c>)
 8005d08:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005d0a:	4b0f      	ldr	r3, [pc, #60]	; (8005d48 <xTimerCreateTimerTask+0x8c>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d001      	beq.n	8005d16 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005d12:	2301      	movs	r3, #1
 8005d14:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d10a      	bne.n	8005d32 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d20:	f383 8811 	msr	BASEPRI, r3
 8005d24:	f3bf 8f6f 	isb	sy
 8005d28:	f3bf 8f4f 	dsb	sy
 8005d2c:	613b      	str	r3, [r7, #16]
}
 8005d2e:	bf00      	nop
 8005d30:	e7fe      	b.n	8005d30 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005d32:	697b      	ldr	r3, [r7, #20]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3718      	adds	r7, #24
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	20000d44 	.word	0x20000d44
 8005d40:	08006cb8 	.word	0x08006cb8
 8005d44:	08005e81 	.word	0x08005e81
 8005d48:	20000d48 	.word	0x20000d48

08005d4c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b08a      	sub	sp, #40	; 0x28
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
 8005d58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10a      	bne.n	8005d7a <xTimerGenericCommand+0x2e>
	__asm volatile
 8005d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d68:	f383 8811 	msr	BASEPRI, r3
 8005d6c:	f3bf 8f6f 	isb	sy
 8005d70:	f3bf 8f4f 	dsb	sy
 8005d74:	623b      	str	r3, [r7, #32]
}
 8005d76:	bf00      	nop
 8005d78:	e7fe      	b.n	8005d78 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005d7a:	4b1a      	ldr	r3, [pc, #104]	; (8005de4 <xTimerGenericCommand+0x98>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d02a      	beq.n	8005dd8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	2b05      	cmp	r3, #5
 8005d92:	dc18      	bgt.n	8005dc6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005d94:	f7ff feb2 	bl	8005afc <xTaskGetSchedulerState>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d109      	bne.n	8005db2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005d9e:	4b11      	ldr	r3, [pc, #68]	; (8005de4 <xTimerGenericCommand+0x98>)
 8005da0:	6818      	ldr	r0, [r3, #0]
 8005da2:	f107 0110 	add.w	r1, r7, #16
 8005da6:	2300      	movs	r3, #0
 8005da8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005daa:	f7fe fc07 	bl	80045bc <xQueueGenericSend>
 8005dae:	6278      	str	r0, [r7, #36]	; 0x24
 8005db0:	e012      	b.n	8005dd8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005db2:	4b0c      	ldr	r3, [pc, #48]	; (8005de4 <xTimerGenericCommand+0x98>)
 8005db4:	6818      	ldr	r0, [r3, #0]
 8005db6:	f107 0110 	add.w	r1, r7, #16
 8005dba:	2300      	movs	r3, #0
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f7fe fbfd 	bl	80045bc <xQueueGenericSend>
 8005dc2:	6278      	str	r0, [r7, #36]	; 0x24
 8005dc4:	e008      	b.n	8005dd8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005dc6:	4b07      	ldr	r3, [pc, #28]	; (8005de4 <xTimerGenericCommand+0x98>)
 8005dc8:	6818      	ldr	r0, [r3, #0]
 8005dca:	f107 0110 	add.w	r1, r7, #16
 8005dce:	2300      	movs	r3, #0
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	f7fe fcf1 	bl	80047b8 <xQueueGenericSendFromISR>
 8005dd6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3728      	adds	r7, #40	; 0x28
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	20000d44 	.word	0x20000d44

08005de8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b088      	sub	sp, #32
 8005dec:	af02      	add	r7, sp, #8
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005df2:	4b22      	ldr	r3, [pc, #136]	; (8005e7c <prvProcessExpiredTimer+0x94>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	3304      	adds	r3, #4
 8005e00:	4618      	mov	r0, r3
 8005e02:	f7fe fa09 	bl	8004218 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e0c:	f003 0304 	and.w	r3, r3, #4
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d022      	beq.n	8005e5a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	699a      	ldr	r2, [r3, #24]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	18d1      	adds	r1, r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	683a      	ldr	r2, [r7, #0]
 8005e20:	6978      	ldr	r0, [r7, #20]
 8005e22:	f000 f8d1 	bl	8005fc8 <prvInsertTimerInActiveList>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d01f      	beq.n	8005e6c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	9300      	str	r3, [sp, #0]
 8005e30:	2300      	movs	r3, #0
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	2100      	movs	r1, #0
 8005e36:	6978      	ldr	r0, [r7, #20]
 8005e38:	f7ff ff88 	bl	8005d4c <xTimerGenericCommand>
 8005e3c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d113      	bne.n	8005e6c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e48:	f383 8811 	msr	BASEPRI, r3
 8005e4c:	f3bf 8f6f 	isb	sy
 8005e50:	f3bf 8f4f 	dsb	sy
 8005e54:	60fb      	str	r3, [r7, #12]
}
 8005e56:	bf00      	nop
 8005e58:	e7fe      	b.n	8005e58 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e60:	f023 0301 	bic.w	r3, r3, #1
 8005e64:	b2da      	uxtb	r2, r3
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	6a1b      	ldr	r3, [r3, #32]
 8005e70:	6978      	ldr	r0, [r7, #20]
 8005e72:	4798      	blx	r3
}
 8005e74:	bf00      	nop
 8005e76:	3718      	adds	r7, #24
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	20000d3c 	.word	0x20000d3c

08005e80 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e88:	f107 0308 	add.w	r3, r7, #8
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f000 f857 	bl	8005f40 <prvGetNextExpireTime>
 8005e92:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	4619      	mov	r1, r3
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f000 f803 	bl	8005ea4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005e9e:	f000 f8d5 	bl	800604c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ea2:	e7f1      	b.n	8005e88 <prvTimerTask+0x8>

08005ea4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005eae:	f7ff fa43 	bl	8005338 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005eb2:	f107 0308 	add.w	r3, r7, #8
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f000 f866 	bl	8005f88 <prvSampleTimeNow>
 8005ebc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d130      	bne.n	8005f26 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10a      	bne.n	8005ee0 <prvProcessTimerOrBlockTask+0x3c>
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d806      	bhi.n	8005ee0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005ed2:	f7ff fa3f 	bl	8005354 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005ed6:	68f9      	ldr	r1, [r7, #12]
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f7ff ff85 	bl	8005de8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005ede:	e024      	b.n	8005f2a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d008      	beq.n	8005ef8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005ee6:	4b13      	ldr	r3, [pc, #76]	; (8005f34 <prvProcessTimerOrBlockTask+0x90>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d101      	bne.n	8005ef4 <prvProcessTimerOrBlockTask+0x50>
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e000      	b.n	8005ef6 <prvProcessTimerOrBlockTask+0x52>
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005ef8:	4b0f      	ldr	r3, [pc, #60]	; (8005f38 <prvProcessTimerOrBlockTask+0x94>)
 8005efa:	6818      	ldr	r0, [r3, #0]
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	683a      	ldr	r2, [r7, #0]
 8005f04:	4619      	mov	r1, r3
 8005f06:	f7fe ffdb 	bl	8004ec0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005f0a:	f7ff fa23 	bl	8005354 <xTaskResumeAll>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10a      	bne.n	8005f2a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005f14:	4b09      	ldr	r3, [pc, #36]	; (8005f3c <prvProcessTimerOrBlockTask+0x98>)
 8005f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f1a:	601a      	str	r2, [r3, #0]
 8005f1c:	f3bf 8f4f 	dsb	sy
 8005f20:	f3bf 8f6f 	isb	sy
}
 8005f24:	e001      	b.n	8005f2a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005f26:	f7ff fa15 	bl	8005354 <xTaskResumeAll>
}
 8005f2a:	bf00      	nop
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	20000d40 	.word	0x20000d40
 8005f38:	20000d44 	.word	0x20000d44
 8005f3c:	e000ed04 	.word	0xe000ed04

08005f40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005f48:	4b0e      	ldr	r3, [pc, #56]	; (8005f84 <prvGetNextExpireTime+0x44>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d101      	bne.n	8005f56 <prvGetNextExpireTime+0x16>
 8005f52:	2201      	movs	r2, #1
 8005f54:	e000      	b.n	8005f58 <prvGetNextExpireTime+0x18>
 8005f56:	2200      	movs	r2, #0
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d105      	bne.n	8005f70 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f64:	4b07      	ldr	r3, [pc, #28]	; (8005f84 <prvGetNextExpireTime+0x44>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	60fb      	str	r3, [r7, #12]
 8005f6e:	e001      	b.n	8005f74 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005f70:	2300      	movs	r3, #0
 8005f72:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005f74:	68fb      	ldr	r3, [r7, #12]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3714      	adds	r7, #20
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	20000d3c 	.word	0x20000d3c

08005f88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005f90:	f7ff fa7e 	bl	8005490 <xTaskGetTickCount>
 8005f94:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005f96:	4b0b      	ldr	r3, [pc, #44]	; (8005fc4 <prvSampleTimeNow+0x3c>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d205      	bcs.n	8005fac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005fa0:	f000 f936 	bl	8006210 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	601a      	str	r2, [r3, #0]
 8005faa:	e002      	b.n	8005fb2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005fb2:	4a04      	ldr	r2, [pc, #16]	; (8005fc4 <prvSampleTimeNow+0x3c>)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	20000d4c 	.word	0x20000d4c

08005fc8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b086      	sub	sp, #24
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]
 8005fd4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	68ba      	ldr	r2, [r7, #8]
 8005fde:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005fe6:	68ba      	ldr	r2, [r7, #8]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d812      	bhi.n	8006014 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	1ad2      	subs	r2, r2, r3
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	699b      	ldr	r3, [r3, #24]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d302      	bcc.n	8006002 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	617b      	str	r3, [r7, #20]
 8006000:	e01b      	b.n	800603a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006002:	4b10      	ldr	r3, [pc, #64]	; (8006044 <prvInsertTimerInActiveList+0x7c>)
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	3304      	adds	r3, #4
 800600a:	4619      	mov	r1, r3
 800600c:	4610      	mov	r0, r2
 800600e:	f7fe f8ca 	bl	80041a6 <vListInsert>
 8006012:	e012      	b.n	800603a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	429a      	cmp	r2, r3
 800601a:	d206      	bcs.n	800602a <prvInsertTimerInActiveList+0x62>
 800601c:	68ba      	ldr	r2, [r7, #8]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	429a      	cmp	r2, r3
 8006022:	d302      	bcc.n	800602a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006024:	2301      	movs	r3, #1
 8006026:	617b      	str	r3, [r7, #20]
 8006028:	e007      	b.n	800603a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800602a:	4b07      	ldr	r3, [pc, #28]	; (8006048 <prvInsertTimerInActiveList+0x80>)
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	3304      	adds	r3, #4
 8006032:	4619      	mov	r1, r3
 8006034:	4610      	mov	r0, r2
 8006036:	f7fe f8b6 	bl	80041a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800603a:	697b      	ldr	r3, [r7, #20]
}
 800603c:	4618      	mov	r0, r3
 800603e:	3718      	adds	r7, #24
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	20000d40 	.word	0x20000d40
 8006048:	20000d3c 	.word	0x20000d3c

0800604c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b08e      	sub	sp, #56	; 0x38
 8006050:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006052:	e0ca      	b.n	80061ea <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	da18      	bge.n	800608c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800605a:	1d3b      	adds	r3, r7, #4
 800605c:	3304      	adds	r3, #4
 800605e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006062:	2b00      	cmp	r3, #0
 8006064:	d10a      	bne.n	800607c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606a:	f383 8811 	msr	BASEPRI, r3
 800606e:	f3bf 8f6f 	isb	sy
 8006072:	f3bf 8f4f 	dsb	sy
 8006076:	61fb      	str	r3, [r7, #28]
}
 8006078:	bf00      	nop
 800607a:	e7fe      	b.n	800607a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800607c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006082:	6850      	ldr	r0, [r2, #4]
 8006084:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006086:	6892      	ldr	r2, [r2, #8]
 8006088:	4611      	mov	r1, r2
 800608a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	f2c0 80aa 	blt.w	80061e8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609a:	695b      	ldr	r3, [r3, #20]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d004      	beq.n	80060aa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a2:	3304      	adds	r3, #4
 80060a4:	4618      	mov	r0, r3
 80060a6:	f7fe f8b7 	bl	8004218 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80060aa:	463b      	mov	r3, r7
 80060ac:	4618      	mov	r0, r3
 80060ae:	f7ff ff6b 	bl	8005f88 <prvSampleTimeNow>
 80060b2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b09      	cmp	r3, #9
 80060b8:	f200 8097 	bhi.w	80061ea <prvProcessReceivedCommands+0x19e>
 80060bc:	a201      	add	r2, pc, #4	; (adr r2, 80060c4 <prvProcessReceivedCommands+0x78>)
 80060be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c2:	bf00      	nop
 80060c4:	080060ed 	.word	0x080060ed
 80060c8:	080060ed 	.word	0x080060ed
 80060cc:	080060ed 	.word	0x080060ed
 80060d0:	08006161 	.word	0x08006161
 80060d4:	08006175 	.word	0x08006175
 80060d8:	080061bf 	.word	0x080061bf
 80060dc:	080060ed 	.word	0x080060ed
 80060e0:	080060ed 	.word	0x080060ed
 80060e4:	08006161 	.word	0x08006161
 80060e8:	08006175 	.word	0x08006175
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80060ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060f2:	f043 0301 	orr.w	r3, r3, #1
 80060f6:	b2da      	uxtb	r2, r3
 80060f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80060fe:	68ba      	ldr	r2, [r7, #8]
 8006100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	18d1      	adds	r1, r2, r3
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800610a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800610c:	f7ff ff5c 	bl	8005fc8 <prvInsertTimerInActiveList>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d069      	beq.n	80061ea <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800611c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800611e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006120:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006124:	f003 0304 	and.w	r3, r3, #4
 8006128:	2b00      	cmp	r3, #0
 800612a:	d05e      	beq.n	80061ea <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	441a      	add	r2, r3
 8006134:	2300      	movs	r3, #0
 8006136:	9300      	str	r3, [sp, #0]
 8006138:	2300      	movs	r3, #0
 800613a:	2100      	movs	r1, #0
 800613c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800613e:	f7ff fe05 	bl	8005d4c <xTimerGenericCommand>
 8006142:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006144:	6a3b      	ldr	r3, [r7, #32]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d14f      	bne.n	80061ea <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800614a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614e:	f383 8811 	msr	BASEPRI, r3
 8006152:	f3bf 8f6f 	isb	sy
 8006156:	f3bf 8f4f 	dsb	sy
 800615a:	61bb      	str	r3, [r7, #24]
}
 800615c:	bf00      	nop
 800615e:	e7fe      	b.n	800615e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006162:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006166:	f023 0301 	bic.w	r3, r3, #1
 800616a:	b2da      	uxtb	r2, r3
 800616c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006172:	e03a      	b.n	80061ea <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006176:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800617a:	f043 0301 	orr.w	r3, r3, #1
 800617e:	b2da      	uxtb	r2, r3
 8006180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006182:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800618c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618e:	699b      	ldr	r3, [r3, #24]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10a      	bne.n	80061aa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006198:	f383 8811 	msr	BASEPRI, r3
 800619c:	f3bf 8f6f 	isb	sy
 80061a0:	f3bf 8f4f 	dsb	sy
 80061a4:	617b      	str	r3, [r7, #20]
}
 80061a6:	bf00      	nop
 80061a8:	e7fe      	b.n	80061a8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80061aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ac:	699a      	ldr	r2, [r3, #24]
 80061ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b0:	18d1      	adds	r1, r2, r3
 80061b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061b8:	f7ff ff06 	bl	8005fc8 <prvInsertTimerInActiveList>
					break;
 80061bc:	e015      	b.n	80061ea <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80061be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061c4:	f003 0302 	and.w	r3, r3, #2
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d103      	bne.n	80061d4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80061cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061ce:	f000 fbdf 	bl	8006990 <vPortFree>
 80061d2:	e00a      	b.n	80061ea <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80061d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061da:	f023 0301 	bic.w	r3, r3, #1
 80061de:	b2da      	uxtb	r2, r3
 80061e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80061e6:	e000      	b.n	80061ea <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80061e8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80061ea:	4b08      	ldr	r3, [pc, #32]	; (800620c <prvProcessReceivedCommands+0x1c0>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	1d39      	adds	r1, r7, #4
 80061f0:	2200      	movs	r2, #0
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7fe fb7c 	bl	80048f0 <xQueueReceive>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	f47f af2a 	bne.w	8006054 <prvProcessReceivedCommands+0x8>
	}
}
 8006200:	bf00      	nop
 8006202:	bf00      	nop
 8006204:	3730      	adds	r7, #48	; 0x30
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	20000d44 	.word	0x20000d44

08006210 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b088      	sub	sp, #32
 8006214:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006216:	e048      	b.n	80062aa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006218:	4b2d      	ldr	r3, [pc, #180]	; (80062d0 <prvSwitchTimerLists+0xc0>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006222:	4b2b      	ldr	r3, [pc, #172]	; (80062d0 <prvSwitchTimerLists+0xc0>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	3304      	adds	r3, #4
 8006230:	4618      	mov	r0, r3
 8006232:	f7fd fff1 	bl	8004218 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006244:	f003 0304 	and.w	r3, r3, #4
 8006248:	2b00      	cmp	r3, #0
 800624a:	d02e      	beq.n	80062aa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	4413      	add	r3, r2
 8006254:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006256:	68ba      	ldr	r2, [r7, #8]
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	429a      	cmp	r2, r3
 800625c:	d90e      	bls.n	800627c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800626a:	4b19      	ldr	r3, [pc, #100]	; (80062d0 <prvSwitchTimerLists+0xc0>)
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	3304      	adds	r3, #4
 8006272:	4619      	mov	r1, r3
 8006274:	4610      	mov	r0, r2
 8006276:	f7fd ff96 	bl	80041a6 <vListInsert>
 800627a:	e016      	b.n	80062aa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800627c:	2300      	movs	r3, #0
 800627e:	9300      	str	r3, [sp, #0]
 8006280:	2300      	movs	r3, #0
 8006282:	693a      	ldr	r2, [r7, #16]
 8006284:	2100      	movs	r1, #0
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	f7ff fd60 	bl	8005d4c <xTimerGenericCommand>
 800628c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d10a      	bne.n	80062aa <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006298:	f383 8811 	msr	BASEPRI, r3
 800629c:	f3bf 8f6f 	isb	sy
 80062a0:	f3bf 8f4f 	dsb	sy
 80062a4:	603b      	str	r3, [r7, #0]
}
 80062a6:	bf00      	nop
 80062a8:	e7fe      	b.n	80062a8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80062aa:	4b09      	ldr	r3, [pc, #36]	; (80062d0 <prvSwitchTimerLists+0xc0>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d1b1      	bne.n	8006218 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80062b4:	4b06      	ldr	r3, [pc, #24]	; (80062d0 <prvSwitchTimerLists+0xc0>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80062ba:	4b06      	ldr	r3, [pc, #24]	; (80062d4 <prvSwitchTimerLists+0xc4>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a04      	ldr	r2, [pc, #16]	; (80062d0 <prvSwitchTimerLists+0xc0>)
 80062c0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80062c2:	4a04      	ldr	r2, [pc, #16]	; (80062d4 <prvSwitchTimerLists+0xc4>)
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	6013      	str	r3, [r2, #0]
}
 80062c8:	bf00      	nop
 80062ca:	3718      	adds	r7, #24
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	20000d3c 	.word	0x20000d3c
 80062d4:	20000d40 	.word	0x20000d40

080062d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80062de:	f000 f969 	bl	80065b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80062e2:	4b15      	ldr	r3, [pc, #84]	; (8006338 <prvCheckForValidListAndQueue+0x60>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d120      	bne.n	800632c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80062ea:	4814      	ldr	r0, [pc, #80]	; (800633c <prvCheckForValidListAndQueue+0x64>)
 80062ec:	f7fd ff0a 	bl	8004104 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80062f0:	4813      	ldr	r0, [pc, #76]	; (8006340 <prvCheckForValidListAndQueue+0x68>)
 80062f2:	f7fd ff07 	bl	8004104 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80062f6:	4b13      	ldr	r3, [pc, #76]	; (8006344 <prvCheckForValidListAndQueue+0x6c>)
 80062f8:	4a10      	ldr	r2, [pc, #64]	; (800633c <prvCheckForValidListAndQueue+0x64>)
 80062fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80062fc:	4b12      	ldr	r3, [pc, #72]	; (8006348 <prvCheckForValidListAndQueue+0x70>)
 80062fe:	4a10      	ldr	r2, [pc, #64]	; (8006340 <prvCheckForValidListAndQueue+0x68>)
 8006300:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006302:	2300      	movs	r3, #0
 8006304:	9300      	str	r3, [sp, #0]
 8006306:	4b11      	ldr	r3, [pc, #68]	; (800634c <prvCheckForValidListAndQueue+0x74>)
 8006308:	4a11      	ldr	r2, [pc, #68]	; (8006350 <prvCheckForValidListAndQueue+0x78>)
 800630a:	2110      	movs	r1, #16
 800630c:	200a      	movs	r0, #10
 800630e:	f7fe f815 	bl	800433c <xQueueGenericCreateStatic>
 8006312:	4603      	mov	r3, r0
 8006314:	4a08      	ldr	r2, [pc, #32]	; (8006338 <prvCheckForValidListAndQueue+0x60>)
 8006316:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006318:	4b07      	ldr	r3, [pc, #28]	; (8006338 <prvCheckForValidListAndQueue+0x60>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d005      	beq.n	800632c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006320:	4b05      	ldr	r3, [pc, #20]	; (8006338 <prvCheckForValidListAndQueue+0x60>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	490b      	ldr	r1, [pc, #44]	; (8006354 <prvCheckForValidListAndQueue+0x7c>)
 8006326:	4618      	mov	r0, r3
 8006328:	f7fe fd76 	bl	8004e18 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800632c:	f000 f972 	bl	8006614 <vPortExitCritical>
}
 8006330:	bf00      	nop
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	20000d44 	.word	0x20000d44
 800633c:	20000d14 	.word	0x20000d14
 8006340:	20000d28 	.word	0x20000d28
 8006344:	20000d3c 	.word	0x20000d3c
 8006348:	20000d40 	.word	0x20000d40
 800634c:	20000df0 	.word	0x20000df0
 8006350:	20000d50 	.word	0x20000d50
 8006354:	08006cc0 	.word	0x08006cc0

08006358 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	3b04      	subs	r3, #4
 8006368:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006370:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	3b04      	subs	r3, #4
 8006376:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	f023 0201 	bic.w	r2, r3, #1
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	3b04      	subs	r3, #4
 8006386:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006388:	4a0c      	ldr	r2, [pc, #48]	; (80063bc <pxPortInitialiseStack+0x64>)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	3b14      	subs	r3, #20
 8006392:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	3b04      	subs	r3, #4
 800639e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f06f 0202 	mvn.w	r2, #2
 80063a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	3b20      	subs	r3, #32
 80063ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80063ae:	68fb      	ldr	r3, [r7, #12]
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3714      	adds	r7, #20
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr
 80063bc:	080063c1 	.word	0x080063c1

080063c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80063c6:	2300      	movs	r3, #0
 80063c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80063ca:	4b12      	ldr	r3, [pc, #72]	; (8006414 <prvTaskExitError+0x54>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d2:	d00a      	beq.n	80063ea <prvTaskExitError+0x2a>
	__asm volatile
 80063d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d8:	f383 8811 	msr	BASEPRI, r3
 80063dc:	f3bf 8f6f 	isb	sy
 80063e0:	f3bf 8f4f 	dsb	sy
 80063e4:	60fb      	str	r3, [r7, #12]
}
 80063e6:	bf00      	nop
 80063e8:	e7fe      	b.n	80063e8 <prvTaskExitError+0x28>
	__asm volatile
 80063ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ee:	f383 8811 	msr	BASEPRI, r3
 80063f2:	f3bf 8f6f 	isb	sy
 80063f6:	f3bf 8f4f 	dsb	sy
 80063fa:	60bb      	str	r3, [r7, #8]
}
 80063fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80063fe:	bf00      	nop
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d0fc      	beq.n	8006400 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006406:	bf00      	nop
 8006408:	bf00      	nop
 800640a:	3714      	adds	r7, #20
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr
 8006414:	2000000c 	.word	0x2000000c
	...

08006420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006420:	4b07      	ldr	r3, [pc, #28]	; (8006440 <pxCurrentTCBConst2>)
 8006422:	6819      	ldr	r1, [r3, #0]
 8006424:	6808      	ldr	r0, [r1, #0]
 8006426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800642a:	f380 8809 	msr	PSP, r0
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	f04f 0000 	mov.w	r0, #0
 8006436:	f380 8811 	msr	BASEPRI, r0
 800643a:	4770      	bx	lr
 800643c:	f3af 8000 	nop.w

08006440 <pxCurrentTCBConst2>:
 8006440:	20000814 	.word	0x20000814
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006444:	bf00      	nop
 8006446:	bf00      	nop

08006448 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006448:	4808      	ldr	r0, [pc, #32]	; (800646c <prvPortStartFirstTask+0x24>)
 800644a:	6800      	ldr	r0, [r0, #0]
 800644c:	6800      	ldr	r0, [r0, #0]
 800644e:	f380 8808 	msr	MSP, r0
 8006452:	f04f 0000 	mov.w	r0, #0
 8006456:	f380 8814 	msr	CONTROL, r0
 800645a:	b662      	cpsie	i
 800645c:	b661      	cpsie	f
 800645e:	f3bf 8f4f 	dsb	sy
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	df00      	svc	0
 8006468:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800646a:	bf00      	nop
 800646c:	e000ed08 	.word	0xe000ed08

08006470 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006476:	4b46      	ldr	r3, [pc, #280]	; (8006590 <xPortStartScheduler+0x120>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a46      	ldr	r2, [pc, #280]	; (8006594 <xPortStartScheduler+0x124>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d10a      	bne.n	8006496 <xPortStartScheduler+0x26>
	__asm volatile
 8006480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006484:	f383 8811 	msr	BASEPRI, r3
 8006488:	f3bf 8f6f 	isb	sy
 800648c:	f3bf 8f4f 	dsb	sy
 8006490:	613b      	str	r3, [r7, #16]
}
 8006492:	bf00      	nop
 8006494:	e7fe      	b.n	8006494 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006496:	4b3e      	ldr	r3, [pc, #248]	; (8006590 <xPortStartScheduler+0x120>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a3f      	ldr	r2, [pc, #252]	; (8006598 <xPortStartScheduler+0x128>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d10a      	bne.n	80064b6 <xPortStartScheduler+0x46>
	__asm volatile
 80064a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a4:	f383 8811 	msr	BASEPRI, r3
 80064a8:	f3bf 8f6f 	isb	sy
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	60fb      	str	r3, [r7, #12]
}
 80064b2:	bf00      	nop
 80064b4:	e7fe      	b.n	80064b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80064b6:	4b39      	ldr	r3, [pc, #228]	; (800659c <xPortStartScheduler+0x12c>)
 80064b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	22ff      	movs	r2, #255	; 0xff
 80064c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80064d0:	78fb      	ldrb	r3, [r7, #3]
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80064d8:	b2da      	uxtb	r2, r3
 80064da:	4b31      	ldr	r3, [pc, #196]	; (80065a0 <xPortStartScheduler+0x130>)
 80064dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80064de:	4b31      	ldr	r3, [pc, #196]	; (80065a4 <xPortStartScheduler+0x134>)
 80064e0:	2207      	movs	r2, #7
 80064e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064e4:	e009      	b.n	80064fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80064e6:	4b2f      	ldr	r3, [pc, #188]	; (80065a4 <xPortStartScheduler+0x134>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	3b01      	subs	r3, #1
 80064ec:	4a2d      	ldr	r2, [pc, #180]	; (80065a4 <xPortStartScheduler+0x134>)
 80064ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80064f0:	78fb      	ldrb	r3, [r7, #3]
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	005b      	lsls	r3, r3, #1
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064fa:	78fb      	ldrb	r3, [r7, #3]
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006502:	2b80      	cmp	r3, #128	; 0x80
 8006504:	d0ef      	beq.n	80064e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006506:	4b27      	ldr	r3, [pc, #156]	; (80065a4 <xPortStartScheduler+0x134>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f1c3 0307 	rsb	r3, r3, #7
 800650e:	2b04      	cmp	r3, #4
 8006510:	d00a      	beq.n	8006528 <xPortStartScheduler+0xb8>
	__asm volatile
 8006512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006516:	f383 8811 	msr	BASEPRI, r3
 800651a:	f3bf 8f6f 	isb	sy
 800651e:	f3bf 8f4f 	dsb	sy
 8006522:	60bb      	str	r3, [r7, #8]
}
 8006524:	bf00      	nop
 8006526:	e7fe      	b.n	8006526 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006528:	4b1e      	ldr	r3, [pc, #120]	; (80065a4 <xPortStartScheduler+0x134>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	021b      	lsls	r3, r3, #8
 800652e:	4a1d      	ldr	r2, [pc, #116]	; (80065a4 <xPortStartScheduler+0x134>)
 8006530:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006532:	4b1c      	ldr	r3, [pc, #112]	; (80065a4 <xPortStartScheduler+0x134>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800653a:	4a1a      	ldr	r2, [pc, #104]	; (80065a4 <xPortStartScheduler+0x134>)
 800653c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	b2da      	uxtb	r2, r3
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006546:	4b18      	ldr	r3, [pc, #96]	; (80065a8 <xPortStartScheduler+0x138>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a17      	ldr	r2, [pc, #92]	; (80065a8 <xPortStartScheduler+0x138>)
 800654c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006550:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006552:	4b15      	ldr	r3, [pc, #84]	; (80065a8 <xPortStartScheduler+0x138>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a14      	ldr	r2, [pc, #80]	; (80065a8 <xPortStartScheduler+0x138>)
 8006558:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800655c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800655e:	f000 f8dd 	bl	800671c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006562:	4b12      	ldr	r3, [pc, #72]	; (80065ac <xPortStartScheduler+0x13c>)
 8006564:	2200      	movs	r2, #0
 8006566:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006568:	f000 f8fc 	bl	8006764 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800656c:	4b10      	ldr	r3, [pc, #64]	; (80065b0 <xPortStartScheduler+0x140>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a0f      	ldr	r2, [pc, #60]	; (80065b0 <xPortStartScheduler+0x140>)
 8006572:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006576:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006578:	f7ff ff66 	bl	8006448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800657c:	f7ff f852 	bl	8005624 <vTaskSwitchContext>
	prvTaskExitError();
 8006580:	f7ff ff1e 	bl	80063c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3718      	adds	r7, #24
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	e000ed00 	.word	0xe000ed00
 8006594:	410fc271 	.word	0x410fc271
 8006598:	410fc270 	.word	0x410fc270
 800659c:	e000e400 	.word	0xe000e400
 80065a0:	20000e40 	.word	0x20000e40
 80065a4:	20000e44 	.word	0x20000e44
 80065a8:	e000ed20 	.word	0xe000ed20
 80065ac:	2000000c 	.word	0x2000000c
 80065b0:	e000ef34 	.word	0xe000ef34

080065b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
	__asm volatile
 80065ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065be:	f383 8811 	msr	BASEPRI, r3
 80065c2:	f3bf 8f6f 	isb	sy
 80065c6:	f3bf 8f4f 	dsb	sy
 80065ca:	607b      	str	r3, [r7, #4]
}
 80065cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80065ce:	4b0f      	ldr	r3, [pc, #60]	; (800660c <vPortEnterCritical+0x58>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	3301      	adds	r3, #1
 80065d4:	4a0d      	ldr	r2, [pc, #52]	; (800660c <vPortEnterCritical+0x58>)
 80065d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80065d8:	4b0c      	ldr	r3, [pc, #48]	; (800660c <vPortEnterCritical+0x58>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d10f      	bne.n	8006600 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80065e0:	4b0b      	ldr	r3, [pc, #44]	; (8006610 <vPortEnterCritical+0x5c>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00a      	beq.n	8006600 <vPortEnterCritical+0x4c>
	__asm volatile
 80065ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ee:	f383 8811 	msr	BASEPRI, r3
 80065f2:	f3bf 8f6f 	isb	sy
 80065f6:	f3bf 8f4f 	dsb	sy
 80065fa:	603b      	str	r3, [r7, #0]
}
 80065fc:	bf00      	nop
 80065fe:	e7fe      	b.n	80065fe <vPortEnterCritical+0x4a>
	}
}
 8006600:	bf00      	nop
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr
 800660c:	2000000c 	.word	0x2000000c
 8006610:	e000ed04 	.word	0xe000ed04

08006614 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800661a:	4b12      	ldr	r3, [pc, #72]	; (8006664 <vPortExitCritical+0x50>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10a      	bne.n	8006638 <vPortExitCritical+0x24>
	__asm volatile
 8006622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	607b      	str	r3, [r7, #4]
}
 8006634:	bf00      	nop
 8006636:	e7fe      	b.n	8006636 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006638:	4b0a      	ldr	r3, [pc, #40]	; (8006664 <vPortExitCritical+0x50>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	3b01      	subs	r3, #1
 800663e:	4a09      	ldr	r2, [pc, #36]	; (8006664 <vPortExitCritical+0x50>)
 8006640:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006642:	4b08      	ldr	r3, [pc, #32]	; (8006664 <vPortExitCritical+0x50>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d105      	bne.n	8006656 <vPortExitCritical+0x42>
 800664a:	2300      	movs	r3, #0
 800664c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	f383 8811 	msr	BASEPRI, r3
}
 8006654:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006656:	bf00      	nop
 8006658:	370c      	adds	r7, #12
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	2000000c 	.word	0x2000000c
	...

08006670 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006670:	f3ef 8009 	mrs	r0, PSP
 8006674:	f3bf 8f6f 	isb	sy
 8006678:	4b15      	ldr	r3, [pc, #84]	; (80066d0 <pxCurrentTCBConst>)
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	f01e 0f10 	tst.w	lr, #16
 8006680:	bf08      	it	eq
 8006682:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006686:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800668a:	6010      	str	r0, [r2, #0]
 800668c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006690:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006694:	f380 8811 	msr	BASEPRI, r0
 8006698:	f3bf 8f4f 	dsb	sy
 800669c:	f3bf 8f6f 	isb	sy
 80066a0:	f7fe ffc0 	bl	8005624 <vTaskSwitchContext>
 80066a4:	f04f 0000 	mov.w	r0, #0
 80066a8:	f380 8811 	msr	BASEPRI, r0
 80066ac:	bc09      	pop	{r0, r3}
 80066ae:	6819      	ldr	r1, [r3, #0]
 80066b0:	6808      	ldr	r0, [r1, #0]
 80066b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b6:	f01e 0f10 	tst.w	lr, #16
 80066ba:	bf08      	it	eq
 80066bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80066c0:	f380 8809 	msr	PSP, r0
 80066c4:	f3bf 8f6f 	isb	sy
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	f3af 8000 	nop.w

080066d0 <pxCurrentTCBConst>:
 80066d0:	20000814 	.word	0x20000814
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80066d4:	bf00      	nop
 80066d6:	bf00      	nop

080066d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
	__asm volatile
 80066de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e2:	f383 8811 	msr	BASEPRI, r3
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	607b      	str	r3, [r7, #4]
}
 80066f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80066f2:	f7fe fedd 	bl	80054b0 <xTaskIncrementTick>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d003      	beq.n	8006704 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80066fc:	4b06      	ldr	r3, [pc, #24]	; (8006718 <xPortSysTickHandler+0x40>)
 80066fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006702:	601a      	str	r2, [r3, #0]
 8006704:	2300      	movs	r3, #0
 8006706:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	f383 8811 	msr	BASEPRI, r3
}
 800670e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006710:	bf00      	nop
 8006712:	3708      	adds	r7, #8
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	e000ed04 	.word	0xe000ed04

0800671c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800671c:	b480      	push	{r7}
 800671e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006720:	4b0b      	ldr	r3, [pc, #44]	; (8006750 <vPortSetupTimerInterrupt+0x34>)
 8006722:	2200      	movs	r2, #0
 8006724:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006726:	4b0b      	ldr	r3, [pc, #44]	; (8006754 <vPortSetupTimerInterrupt+0x38>)
 8006728:	2200      	movs	r2, #0
 800672a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800672c:	4b0a      	ldr	r3, [pc, #40]	; (8006758 <vPortSetupTimerInterrupt+0x3c>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a0a      	ldr	r2, [pc, #40]	; (800675c <vPortSetupTimerInterrupt+0x40>)
 8006732:	fba2 2303 	umull	r2, r3, r2, r3
 8006736:	099b      	lsrs	r3, r3, #6
 8006738:	4a09      	ldr	r2, [pc, #36]	; (8006760 <vPortSetupTimerInterrupt+0x44>)
 800673a:	3b01      	subs	r3, #1
 800673c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800673e:	4b04      	ldr	r3, [pc, #16]	; (8006750 <vPortSetupTimerInterrupt+0x34>)
 8006740:	2207      	movs	r2, #7
 8006742:	601a      	str	r2, [r3, #0]
}
 8006744:	bf00      	nop
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	e000e010 	.word	0xe000e010
 8006754:	e000e018 	.word	0xe000e018
 8006758:	20000000 	.word	0x20000000
 800675c:	10624dd3 	.word	0x10624dd3
 8006760:	e000e014 	.word	0xe000e014

08006764 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006764:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006774 <vPortEnableVFP+0x10>
 8006768:	6801      	ldr	r1, [r0, #0]
 800676a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800676e:	6001      	str	r1, [r0, #0]
 8006770:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006772:	bf00      	nop
 8006774:	e000ed88 	.word	0xe000ed88

08006778 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800677e:	f3ef 8305 	mrs	r3, IPSR
 8006782:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2b0f      	cmp	r3, #15
 8006788:	d914      	bls.n	80067b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800678a:	4a17      	ldr	r2, [pc, #92]	; (80067e8 <vPortValidateInterruptPriority+0x70>)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	4413      	add	r3, r2
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006794:	4b15      	ldr	r3, [pc, #84]	; (80067ec <vPortValidateInterruptPriority+0x74>)
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	7afa      	ldrb	r2, [r7, #11]
 800679a:	429a      	cmp	r2, r3
 800679c:	d20a      	bcs.n	80067b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800679e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a2:	f383 8811 	msr	BASEPRI, r3
 80067a6:	f3bf 8f6f 	isb	sy
 80067aa:	f3bf 8f4f 	dsb	sy
 80067ae:	607b      	str	r3, [r7, #4]
}
 80067b0:	bf00      	nop
 80067b2:	e7fe      	b.n	80067b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80067b4:	4b0e      	ldr	r3, [pc, #56]	; (80067f0 <vPortValidateInterruptPriority+0x78>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80067bc:	4b0d      	ldr	r3, [pc, #52]	; (80067f4 <vPortValidateInterruptPriority+0x7c>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d90a      	bls.n	80067da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80067c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c8:	f383 8811 	msr	BASEPRI, r3
 80067cc:	f3bf 8f6f 	isb	sy
 80067d0:	f3bf 8f4f 	dsb	sy
 80067d4:	603b      	str	r3, [r7, #0]
}
 80067d6:	bf00      	nop
 80067d8:	e7fe      	b.n	80067d8 <vPortValidateInterruptPriority+0x60>
	}
 80067da:	bf00      	nop
 80067dc:	3714      	adds	r7, #20
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	e000e3f0 	.word	0xe000e3f0
 80067ec:	20000e40 	.word	0x20000e40
 80067f0:	e000ed0c 	.word	0xe000ed0c
 80067f4:	20000e44 	.word	0x20000e44

080067f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b08a      	sub	sp, #40	; 0x28
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006800:	2300      	movs	r3, #0
 8006802:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006804:	f7fe fd98 	bl	8005338 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006808:	4b5b      	ldr	r3, [pc, #364]	; (8006978 <pvPortMalloc+0x180>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d101      	bne.n	8006814 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006810:	f000 f920 	bl	8006a54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006814:	4b59      	ldr	r3, [pc, #356]	; (800697c <pvPortMalloc+0x184>)
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4013      	ands	r3, r2
 800681c:	2b00      	cmp	r3, #0
 800681e:	f040 8093 	bne.w	8006948 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d01d      	beq.n	8006864 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006828:	2208      	movs	r2, #8
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4413      	add	r3, r2
 800682e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f003 0307 	and.w	r3, r3, #7
 8006836:	2b00      	cmp	r3, #0
 8006838:	d014      	beq.n	8006864 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f023 0307 	bic.w	r3, r3, #7
 8006840:	3308      	adds	r3, #8
 8006842:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f003 0307 	and.w	r3, r3, #7
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00a      	beq.n	8006864 <pvPortMalloc+0x6c>
	__asm volatile
 800684e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006852:	f383 8811 	msr	BASEPRI, r3
 8006856:	f3bf 8f6f 	isb	sy
 800685a:	f3bf 8f4f 	dsb	sy
 800685e:	617b      	str	r3, [r7, #20]
}
 8006860:	bf00      	nop
 8006862:	e7fe      	b.n	8006862 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d06e      	beq.n	8006948 <pvPortMalloc+0x150>
 800686a:	4b45      	ldr	r3, [pc, #276]	; (8006980 <pvPortMalloc+0x188>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	429a      	cmp	r2, r3
 8006872:	d869      	bhi.n	8006948 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006874:	4b43      	ldr	r3, [pc, #268]	; (8006984 <pvPortMalloc+0x18c>)
 8006876:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006878:	4b42      	ldr	r3, [pc, #264]	; (8006984 <pvPortMalloc+0x18c>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800687e:	e004      	b.n	800688a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006882:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800688a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	429a      	cmp	r2, r3
 8006892:	d903      	bls.n	800689c <pvPortMalloc+0xa4>
 8006894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d1f1      	bne.n	8006880 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800689c:	4b36      	ldr	r3, [pc, #216]	; (8006978 <pvPortMalloc+0x180>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d050      	beq.n	8006948 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80068a6:	6a3b      	ldr	r3, [r7, #32]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2208      	movs	r2, #8
 80068ac:	4413      	add	r3, r2
 80068ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80068b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	6a3b      	ldr	r3, [r7, #32]
 80068b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80068b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ba:	685a      	ldr	r2, [r3, #4]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	1ad2      	subs	r2, r2, r3
 80068c0:	2308      	movs	r3, #8
 80068c2:	005b      	lsls	r3, r3, #1
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d91f      	bls.n	8006908 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80068c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4413      	add	r3, r2
 80068ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	f003 0307 	and.w	r3, r3, #7
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00a      	beq.n	80068f0 <pvPortMalloc+0xf8>
	__asm volatile
 80068da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068de:	f383 8811 	msr	BASEPRI, r3
 80068e2:	f3bf 8f6f 	isb	sy
 80068e6:	f3bf 8f4f 	dsb	sy
 80068ea:	613b      	str	r3, [r7, #16]
}
 80068ec:	bf00      	nop
 80068ee:	e7fe      	b.n	80068ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80068f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f2:	685a      	ldr	r2, [r3, #4]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	1ad2      	subs	r2, r2, r3
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80068fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006902:	69b8      	ldr	r0, [r7, #24]
 8006904:	f000 f908 	bl	8006b18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006908:	4b1d      	ldr	r3, [pc, #116]	; (8006980 <pvPortMalloc+0x188>)
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	4a1b      	ldr	r2, [pc, #108]	; (8006980 <pvPortMalloc+0x188>)
 8006914:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006916:	4b1a      	ldr	r3, [pc, #104]	; (8006980 <pvPortMalloc+0x188>)
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	4b1b      	ldr	r3, [pc, #108]	; (8006988 <pvPortMalloc+0x190>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	429a      	cmp	r2, r3
 8006920:	d203      	bcs.n	800692a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006922:	4b17      	ldr	r3, [pc, #92]	; (8006980 <pvPortMalloc+0x188>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a18      	ldr	r2, [pc, #96]	; (8006988 <pvPortMalloc+0x190>)
 8006928:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800692a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692c:	685a      	ldr	r2, [r3, #4]
 800692e:	4b13      	ldr	r3, [pc, #76]	; (800697c <pvPortMalloc+0x184>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	431a      	orrs	r2, r3
 8006934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006936:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693a:	2200      	movs	r2, #0
 800693c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800693e:	4b13      	ldr	r3, [pc, #76]	; (800698c <pvPortMalloc+0x194>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	3301      	adds	r3, #1
 8006944:	4a11      	ldr	r2, [pc, #68]	; (800698c <pvPortMalloc+0x194>)
 8006946:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006948:	f7fe fd04 	bl	8005354 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	f003 0307 	and.w	r3, r3, #7
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00a      	beq.n	800696c <pvPortMalloc+0x174>
	__asm volatile
 8006956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695a:	f383 8811 	msr	BASEPRI, r3
 800695e:	f3bf 8f6f 	isb	sy
 8006962:	f3bf 8f4f 	dsb	sy
 8006966:	60fb      	str	r3, [r7, #12]
}
 8006968:	bf00      	nop
 800696a:	e7fe      	b.n	800696a <pvPortMalloc+0x172>
	return pvReturn;
 800696c:	69fb      	ldr	r3, [r7, #28]
}
 800696e:	4618      	mov	r0, r3
 8006970:	3728      	adds	r7, #40	; 0x28
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	20004a50 	.word	0x20004a50
 800697c:	20004a64 	.word	0x20004a64
 8006980:	20004a54 	.word	0x20004a54
 8006984:	20004a48 	.word	0x20004a48
 8006988:	20004a58 	.word	0x20004a58
 800698c:	20004a5c 	.word	0x20004a5c

08006990 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b086      	sub	sp, #24
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d04d      	beq.n	8006a3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80069a2:	2308      	movs	r3, #8
 80069a4:	425b      	negs	r3, r3
 80069a6:	697a      	ldr	r2, [r7, #20]
 80069a8:	4413      	add	r3, r2
 80069aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	685a      	ldr	r2, [r3, #4]
 80069b4:	4b24      	ldr	r3, [pc, #144]	; (8006a48 <vPortFree+0xb8>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4013      	ands	r3, r2
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10a      	bne.n	80069d4 <vPortFree+0x44>
	__asm volatile
 80069be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c2:	f383 8811 	msr	BASEPRI, r3
 80069c6:	f3bf 8f6f 	isb	sy
 80069ca:	f3bf 8f4f 	dsb	sy
 80069ce:	60fb      	str	r3, [r7, #12]
}
 80069d0:	bf00      	nop
 80069d2:	e7fe      	b.n	80069d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d00a      	beq.n	80069f2 <vPortFree+0x62>
	__asm volatile
 80069dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e0:	f383 8811 	msr	BASEPRI, r3
 80069e4:	f3bf 8f6f 	isb	sy
 80069e8:	f3bf 8f4f 	dsb	sy
 80069ec:	60bb      	str	r3, [r7, #8]
}
 80069ee:	bf00      	nop
 80069f0:	e7fe      	b.n	80069f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	685a      	ldr	r2, [r3, #4]
 80069f6:	4b14      	ldr	r3, [pc, #80]	; (8006a48 <vPortFree+0xb8>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4013      	ands	r3, r2
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d01e      	beq.n	8006a3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d11a      	bne.n	8006a3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	685a      	ldr	r2, [r3, #4]
 8006a0c:	4b0e      	ldr	r3, [pc, #56]	; (8006a48 <vPortFree+0xb8>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	43db      	mvns	r3, r3
 8006a12:	401a      	ands	r2, r3
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a18:	f7fe fc8e 	bl	8005338 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	685a      	ldr	r2, [r3, #4]
 8006a20:	4b0a      	ldr	r3, [pc, #40]	; (8006a4c <vPortFree+0xbc>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4413      	add	r3, r2
 8006a26:	4a09      	ldr	r2, [pc, #36]	; (8006a4c <vPortFree+0xbc>)
 8006a28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a2a:	6938      	ldr	r0, [r7, #16]
 8006a2c:	f000 f874 	bl	8006b18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006a30:	4b07      	ldr	r3, [pc, #28]	; (8006a50 <vPortFree+0xc0>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	3301      	adds	r3, #1
 8006a36:	4a06      	ldr	r2, [pc, #24]	; (8006a50 <vPortFree+0xc0>)
 8006a38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006a3a:	f7fe fc8b 	bl	8005354 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a3e:	bf00      	nop
 8006a40:	3718      	adds	r7, #24
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	20004a64 	.word	0x20004a64
 8006a4c:	20004a54 	.word	0x20004a54
 8006a50:	20004a60 	.word	0x20004a60

08006a54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006a5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a60:	4b27      	ldr	r3, [pc, #156]	; (8006b00 <prvHeapInit+0xac>)
 8006a62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f003 0307 	and.w	r3, r3, #7
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00c      	beq.n	8006a88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	3307      	adds	r3, #7
 8006a72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f023 0307 	bic.w	r3, r3, #7
 8006a7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a7c:	68ba      	ldr	r2, [r7, #8]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	4a1f      	ldr	r2, [pc, #124]	; (8006b00 <prvHeapInit+0xac>)
 8006a84:	4413      	add	r3, r2
 8006a86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a8c:	4a1d      	ldr	r2, [pc, #116]	; (8006b04 <prvHeapInit+0xb0>)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a92:	4b1c      	ldr	r3, [pc, #112]	; (8006b04 <prvHeapInit+0xb0>)
 8006a94:	2200      	movs	r2, #0
 8006a96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	68ba      	ldr	r2, [r7, #8]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006aa0:	2208      	movs	r2, #8
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	1a9b      	subs	r3, r3, r2
 8006aa6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f023 0307 	bic.w	r3, r3, #7
 8006aae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	4a15      	ldr	r2, [pc, #84]	; (8006b08 <prvHeapInit+0xb4>)
 8006ab4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ab6:	4b14      	ldr	r3, [pc, #80]	; (8006b08 <prvHeapInit+0xb4>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2200      	movs	r2, #0
 8006abc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006abe:	4b12      	ldr	r3, [pc, #72]	; (8006b08 <prvHeapInit+0xb4>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	1ad2      	subs	r2, r2, r3
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ad4:	4b0c      	ldr	r3, [pc, #48]	; (8006b08 <prvHeapInit+0xb4>)
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	4a0a      	ldr	r2, [pc, #40]	; (8006b0c <prvHeapInit+0xb8>)
 8006ae2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	4a09      	ldr	r2, [pc, #36]	; (8006b10 <prvHeapInit+0xbc>)
 8006aea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006aec:	4b09      	ldr	r3, [pc, #36]	; (8006b14 <prvHeapInit+0xc0>)
 8006aee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006af2:	601a      	str	r2, [r3, #0]
}
 8006af4:	bf00      	nop
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr
 8006b00:	20000e48 	.word	0x20000e48
 8006b04:	20004a48 	.word	0x20004a48
 8006b08:	20004a50 	.word	0x20004a50
 8006b0c:	20004a58 	.word	0x20004a58
 8006b10:	20004a54 	.word	0x20004a54
 8006b14:	20004a64 	.word	0x20004a64

08006b18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b20:	4b28      	ldr	r3, [pc, #160]	; (8006bc4 <prvInsertBlockIntoFreeList+0xac>)
 8006b22:	60fb      	str	r3, [r7, #12]
 8006b24:	e002      	b.n	8006b2c <prvInsertBlockIntoFreeList+0x14>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	60fb      	str	r3, [r7, #12]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d8f7      	bhi.n	8006b26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	68ba      	ldr	r2, [r7, #8]
 8006b40:	4413      	add	r3, r2
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d108      	bne.n	8006b5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	685a      	ldr	r2, [r3, #4]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	441a      	add	r2, r3
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	68ba      	ldr	r2, [r7, #8]
 8006b64:	441a      	add	r2, r3
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d118      	bne.n	8006ba0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	4b15      	ldr	r3, [pc, #84]	; (8006bc8 <prvInsertBlockIntoFreeList+0xb0>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d00d      	beq.n	8006b96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	685a      	ldr	r2, [r3, #4]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	441a      	add	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	601a      	str	r2, [r3, #0]
 8006b94:	e008      	b.n	8006ba8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b96:	4b0c      	ldr	r3, [pc, #48]	; (8006bc8 <prvInsertBlockIntoFreeList+0xb0>)
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	601a      	str	r2, [r3, #0]
 8006b9e:	e003      	b.n	8006ba8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d002      	beq.n	8006bb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bb6:	bf00      	nop
 8006bb8:	3714      	adds	r7, #20
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop
 8006bc4:	20004a48 	.word	0x20004a48
 8006bc8:	20004a50 	.word	0x20004a50

08006bcc <__libc_init_array>:
 8006bcc:	b570      	push	{r4, r5, r6, lr}
 8006bce:	4d0d      	ldr	r5, [pc, #52]	; (8006c04 <__libc_init_array+0x38>)
 8006bd0:	4c0d      	ldr	r4, [pc, #52]	; (8006c08 <__libc_init_array+0x3c>)
 8006bd2:	1b64      	subs	r4, r4, r5
 8006bd4:	10a4      	asrs	r4, r4, #2
 8006bd6:	2600      	movs	r6, #0
 8006bd8:	42a6      	cmp	r6, r4
 8006bda:	d109      	bne.n	8006bf0 <__libc_init_array+0x24>
 8006bdc:	4d0b      	ldr	r5, [pc, #44]	; (8006c0c <__libc_init_array+0x40>)
 8006bde:	4c0c      	ldr	r4, [pc, #48]	; (8006c10 <__libc_init_array+0x44>)
 8006be0:	f000 f82e 	bl	8006c40 <_init>
 8006be4:	1b64      	subs	r4, r4, r5
 8006be6:	10a4      	asrs	r4, r4, #2
 8006be8:	2600      	movs	r6, #0
 8006bea:	42a6      	cmp	r6, r4
 8006bec:	d105      	bne.n	8006bfa <__libc_init_array+0x2e>
 8006bee:	bd70      	pop	{r4, r5, r6, pc}
 8006bf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bf4:	4798      	blx	r3
 8006bf6:	3601      	adds	r6, #1
 8006bf8:	e7ee      	b.n	8006bd8 <__libc_init_array+0xc>
 8006bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bfe:	4798      	blx	r3
 8006c00:	3601      	adds	r6, #1
 8006c02:	e7f2      	b.n	8006bea <__libc_init_array+0x1e>
 8006c04:	08006d80 	.word	0x08006d80
 8006c08:	08006d80 	.word	0x08006d80
 8006c0c:	08006d80 	.word	0x08006d80
 8006c10:	08006d84 	.word	0x08006d84

08006c14 <memcpy>:
 8006c14:	440a      	add	r2, r1
 8006c16:	4291      	cmp	r1, r2
 8006c18:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c1c:	d100      	bne.n	8006c20 <memcpy+0xc>
 8006c1e:	4770      	bx	lr
 8006c20:	b510      	push	{r4, lr}
 8006c22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c2a:	4291      	cmp	r1, r2
 8006c2c:	d1f9      	bne.n	8006c22 <memcpy+0xe>
 8006c2e:	bd10      	pop	{r4, pc}

08006c30 <memset>:
 8006c30:	4402      	add	r2, r0
 8006c32:	4603      	mov	r3, r0
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d100      	bne.n	8006c3a <memset+0xa>
 8006c38:	4770      	bx	lr
 8006c3a:	f803 1b01 	strb.w	r1, [r3], #1
 8006c3e:	e7f9      	b.n	8006c34 <memset+0x4>

08006c40 <_init>:
 8006c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c42:	bf00      	nop
 8006c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c46:	bc08      	pop	{r3}
 8006c48:	469e      	mov	lr, r3
 8006c4a:	4770      	bx	lr

08006c4c <_fini>:
 8006c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c4e:	bf00      	nop
 8006c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c52:	bc08      	pop	{r3}
 8006c54:	469e      	mov	lr, r3
 8006c56:	4770      	bx	lr
